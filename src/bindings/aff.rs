// Automatically generated by isl_bindings_generator.
// LICENSE: MIT

use crate::bindings::{
    AffList, BasicSet, Context, DimType, Id, LocalSpace, MultiAff, MultiId, Point, Set, Space, Val,
};
use libc::uintptr_t;
use std::ffi::{CStr, CString};
use std::os::raw::c_char;

/// Wraps `isl_aff`.
pub struct Aff {
    pub ptr: uintptr_t,
    pub should_free_on_drop: bool,
}

extern "C" {

    fn isl_aff_zero_on_domain(ls: uintptr_t) -> uintptr_t;

    fn isl_aff_gist(aff: uintptr_t, context: uintptr_t) -> uintptr_t;

    fn isl_aff_dump(aff: uintptr_t);

    fn isl_aff_to_list(el: uintptr_t) -> uintptr_t;

    fn isl_aff_ge_set(aff1: uintptr_t, aff2: uintptr_t) -> uintptr_t;

    fn isl_aff_set_dim_name(aff: uintptr_t, type_: DimType, pos: u32, s: *const c_char)
                            -> uintptr_t;

    fn isl_aff_lt_basic_set(aff1: uintptr_t, aff2: uintptr_t) -> uintptr_t;

    fn isl_aff_add_coefficient_val(aff: uintptr_t, type_: DimType, pos: i32, v: uintptr_t)
                                   -> uintptr_t;

    fn isl_aff_involves_dims(aff: uintptr_t, type_: DimType, first: u32, n: u32) -> i32;

    fn isl_aff_project_domain_on_params(aff: uintptr_t) -> uintptr_t;

    fn isl_aff_coefficient_sgn(aff: uintptr_t, type_: DimType, pos: i32) -> i32;

    fn isl_aff_copy(aff: uintptr_t) -> uintptr_t;

    fn isl_aff_scale_val(aff: uintptr_t, v: uintptr_t) -> uintptr_t;

    fn isl_aff_le_set(aff1: uintptr_t, aff2: uintptr_t) -> uintptr_t;

    fn isl_aff_plain_is_zero(aff: uintptr_t) -> i32;

    fn isl_aff_add(aff1: uintptr_t, aff2: uintptr_t) -> uintptr_t;

    fn isl_aff_gt_basic_set(aff1: uintptr_t, aff2: uintptr_t) -> uintptr_t;

    fn isl_aff_add_constant_si(aff: uintptr_t, v: i32) -> uintptr_t;

    fn isl_aff_plain_is_equal(aff1: uintptr_t, aff2: uintptr_t) -> i32;

    fn isl_aff_eq_set(aff1: uintptr_t, aff2: uintptr_t) -> uintptr_t;

    fn isl_aff_scale_down_val(aff: uintptr_t, v: uintptr_t) -> uintptr_t;

    fn isl_aff_get_domain_space(aff: uintptr_t) -> uintptr_t;

    fn isl_aff_set_dim_id(aff: uintptr_t, type_: DimType, pos: u32, id: uintptr_t) -> uintptr_t;

    fn isl_aff_lt_set(aff1: uintptr_t, aff2: uintptr_t) -> uintptr_t;

    fn isl_aff_set_tuple_id(aff: uintptr_t, type_: DimType, id: uintptr_t) -> uintptr_t;

    fn isl_aff_set_constant_val(aff: uintptr_t, v: uintptr_t) -> uintptr_t;

    fn isl_aff_move_dims(aff: uintptr_t, dst_type: DimType, dst_pos: u32, src_type: DimType,
                         src_pos: u32, n: u32)
                         -> uintptr_t;

    fn isl_aff_get_denominator_val(aff: uintptr_t) -> uintptr_t;

    fn isl_aff_dim(aff: uintptr_t, type_: DimType) -> i32;

    fn isl_aff_set_coefficient_si(aff: uintptr_t, type_: DimType, pos: i32, v: i32) -> uintptr_t;

    fn isl_aff_add_constant_val(aff: uintptr_t, v: uintptr_t) -> uintptr_t;

    fn isl_aff_free(aff: uintptr_t) -> uintptr_t;

    fn isl_aff_nan_on_domain_space(space: uintptr_t) -> uintptr_t;

    fn isl_aff_involves_locals(aff: uintptr_t) -> i32;

    fn isl_aff_param_on_domain_space_id(space: uintptr_t, id: uintptr_t) -> uintptr_t;

    fn isl_aff_neg(aff: uintptr_t) -> uintptr_t;

    fn isl_aff_find_dim_by_name(aff: uintptr_t, type_: DimType, name: *const c_char) -> i32;

    fn isl_aff_le_basic_set(aff1: uintptr_t, aff2: uintptr_t) -> uintptr_t;

    fn isl_aff_var_on_domain(ls: uintptr_t, type_: DimType, pos: u32) -> uintptr_t;

    fn isl_aff_get_coefficient_val(aff: uintptr_t, type_: DimType, pos: i32) -> uintptr_t;

    fn isl_aff_pullback_aff(aff1: uintptr_t, aff2: uintptr_t) -> uintptr_t;

    fn isl_aff_zero_basic_set(aff: uintptr_t) -> uintptr_t;

    fn isl_aff_sub(aff1: uintptr_t, aff2: uintptr_t) -> uintptr_t;

    fn isl_aff_neg_basic_set(aff: uintptr_t) -> uintptr_t;

    fn isl_aff_pullback_multi_aff(aff: uintptr_t, ma: uintptr_t) -> uintptr_t;

    fn isl_aff_gist_params(aff: uintptr_t, context: uintptr_t) -> uintptr_t;

    fn isl_aff_scale_down_ui(aff: uintptr_t, f: u32) -> uintptr_t;

    fn isl_aff_get_constant_val(aff: uintptr_t) -> uintptr_t;

    fn isl_aff_mod_val(aff: uintptr_t, mod_: uintptr_t) -> uintptr_t;

    fn isl_aff_insert_dims(aff: uintptr_t, type_: DimType, first: u32, n: u32) -> uintptr_t;

    fn isl_aff_align_params(aff: uintptr_t, model: uintptr_t) -> uintptr_t;

    fn isl_aff_add_coefficient_si(aff: uintptr_t, type_: DimType, pos: i32, v: i32) -> uintptr_t;

    fn isl_aff_val_on_domain(ls: uintptr_t, val: uintptr_t) -> uintptr_t;

    fn isl_aff_ge_basic_set(aff1: uintptr_t, aff2: uintptr_t) -> uintptr_t;

    fn isl_aff_add_constant_num_si(aff: uintptr_t, v: i32) -> uintptr_t;

    fn isl_aff_eq_basic_set(aff1: uintptr_t, aff2: uintptr_t) -> uintptr_t;

    fn isl_aff_nan_on_domain(ls: uintptr_t) -> uintptr_t;

    fn isl_aff_zero_on_domain_space(space: uintptr_t) -> uintptr_t;

    fn isl_aff_val_on_domain_space(space: uintptr_t, val: uintptr_t) -> uintptr_t;

    fn isl_aff_get_local_space(aff: uintptr_t) -> uintptr_t;

    fn isl_aff_get_space(aff: uintptr_t) -> uintptr_t;

    fn isl_aff_set_constant_si(aff: uintptr_t, v: i32) -> uintptr_t;

    fn isl_aff_get_hash(aff: uintptr_t) -> u32;

    fn isl_aff_get_domain_local_space(aff: uintptr_t) -> uintptr_t;

    fn isl_aff_ceil(aff: uintptr_t) -> uintptr_t;

    fn isl_aff_is_nan(aff: uintptr_t) -> i32;

    fn isl_aff_add_dims(aff: uintptr_t, type_: DimType, n: u32) -> uintptr_t;

    fn isl_aff_get_ctx(aff: uintptr_t) -> uintptr_t;

    fn isl_aff_drop_dims(aff: uintptr_t, type_: DimType, first: u32, n: u32) -> uintptr_t;

    fn isl_aff_ne_set(aff1: uintptr_t, aff2: uintptr_t) -> uintptr_t;

    fn isl_aff_set_coefficient_val(aff: uintptr_t, type_: DimType, pos: i32, v: uintptr_t)
                                   -> uintptr_t;

    fn isl_aff_gt_set(aff1: uintptr_t, aff2: uintptr_t) -> uintptr_t;

    fn isl_aff_mul(aff1: uintptr_t, aff2: uintptr_t) -> uintptr_t;

    fn isl_aff_get_dim_name(aff: uintptr_t, type_: DimType, pos: u32) -> *const c_char;

    fn isl_aff_is_cst(aff: uintptr_t) -> i32;

    fn isl_aff_floor(aff: uintptr_t) -> uintptr_t;

    fn isl_aff_div(aff1: uintptr_t, aff2: uintptr_t) -> uintptr_t;

    fn isl_aff_bind_id(aff: uintptr_t, id: uintptr_t) -> uintptr_t;

    fn isl_aff_read_from_str(ctx: uintptr_t, str_: *const c_char) -> uintptr_t;

    fn isl_aff_get_div(aff: uintptr_t, pos: i32) -> uintptr_t;

    fn isl_aff_unbind_params_insert_domain(aff: uintptr_t, domain: uintptr_t) -> uintptr_t;

    fn isl_aff_eval(aff: uintptr_t, pnt: uintptr_t) -> uintptr_t;

    fn isl_aff_to_str(aff: uintptr_t) -> *const c_char;

    fn isl_aff_from_range(aff: uintptr_t) -> uintptr_t;

}

impl Clone for Aff {
    fn clone(&self) -> Aff {
        self.copy()
    }
}

impl core::ops::Add for Aff {
    type Output = Aff;

    fn add(self, rhs: Aff) -> Aff {
        self.add(rhs)
    }
}

impl core::ops::Sub for Aff {
    type Output = Aff;

    fn sub(self, rhs: Aff) -> Aff {
        self.sub(rhs)
    }
}

impl core::ops::Mul for Aff {
    type Output = Aff;

    fn mul(self, rhs: Aff) -> Aff {
        self.mul(rhs)
    }
}

impl core::ops::Div for Aff {
    type Output = Aff;

    fn div(self, rhs: Aff) -> Aff {
        self.div(rhs)
    }
}

impl Aff {
    /// Wraps `isl_aff_zero_on_domain`.
    pub fn zero_on_domain(ls: LocalSpace) -> Aff {
        let mut ls = ls;
        ls.do_not_free_on_drop();
        let ls = ls.ptr;
        let isl_rs_result = unsafe { isl_aff_zero_on_domain(ls) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = Aff { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_aff_gist`.
    pub fn gist(self, context: Set) -> Aff {
        let context_for_error_message = self.get_ctx();
        let aff = self;
        let mut aff = aff;
        aff.do_not_free_on_drop();
        let aff = aff.ptr;
        let mut context = context;
        context.do_not_free_on_drop();
        let context = context.ptr;
        let isl_rs_result = unsafe { isl_aff_gist(aff, context) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Aff { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_aff_dump`.
    pub fn dump(&self) {
        let aff = self;
        let aff = aff.ptr;
        let isl_rs_result = unsafe { isl_aff_dump(aff) };
        isl_rs_result
    }

    /// Wraps `isl_aff_to_list`.
    pub fn to_list(self) -> AffList {
        let context_for_error_message = self.get_ctx();
        let el = self;
        let mut el = el;
        el.do_not_free_on_drop();
        let el = el.ptr;
        let isl_rs_result = unsafe { isl_aff_to_list(el) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = AffList { ptr: isl_rs_result,
                                      should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_aff_ge_set`.
    pub fn ge_set(self, aff2: Aff) -> Set {
        let context_for_error_message = self.get_ctx();
        let aff1 = self;
        let mut aff1 = aff1;
        aff1.do_not_free_on_drop();
        let aff1 = aff1.ptr;
        let mut aff2 = aff2;
        aff2.do_not_free_on_drop();
        let aff2 = aff2.ptr;
        let isl_rs_result = unsafe { isl_aff_ge_set(aff1, aff2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Set { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_aff_set_dim_name`.
    pub fn set_dim_name(self, type_: DimType, pos: u32, s: &str) -> Aff {
        let context_for_error_message = self.get_ctx();
        let aff = self;
        let mut aff = aff;
        aff.do_not_free_on_drop();
        let aff = aff.ptr;
        let s = CString::new(s).unwrap();
        let s = s.as_ptr();
        let isl_rs_result = unsafe { isl_aff_set_dim_name(aff, type_, pos, s) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Aff { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_aff_lt_basic_set`.
    pub fn lt_basic_set(self, aff2: Aff) -> BasicSet {
        let context_for_error_message = self.get_ctx();
        let aff1 = self;
        let mut aff1 = aff1;
        aff1.do_not_free_on_drop();
        let aff1 = aff1.ptr;
        let mut aff2 = aff2;
        aff2.do_not_free_on_drop();
        let aff2 = aff2.ptr;
        let isl_rs_result = unsafe { isl_aff_lt_basic_set(aff1, aff2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = BasicSet { ptr: isl_rs_result,
                                       should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_aff_add_coefficient_val`.
    pub fn add_coefficient_val(self, type_: DimType, pos: i32, v: Val) -> Aff {
        let context_for_error_message = self.get_ctx();
        let aff = self;
        let mut aff = aff;
        aff.do_not_free_on_drop();
        let aff = aff.ptr;
        let mut v = v;
        v.do_not_free_on_drop();
        let v = v.ptr;
        let isl_rs_result = unsafe { isl_aff_add_coefficient_val(aff, type_, pos, v) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Aff { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_aff_involves_dims`.
    pub fn involves_dims(&self, type_: DimType, first: u32, n: u32) -> bool {
        let context_for_error_message = self.get_ctx();
        let aff = self;
        let aff = aff.ptr;
        let isl_rs_result = unsafe { isl_aff_involves_dims(aff, type_, first, n) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error: {}", context_for_error_message.last_error_msg()),
        };
        isl_rs_result
    }

    /// Wraps `isl_aff_project_domain_on_params`.
    pub fn project_domain_on_params(self) -> Aff {
        let context_for_error_message = self.get_ctx();
        let aff = self;
        let mut aff = aff;
        aff.do_not_free_on_drop();
        let aff = aff.ptr;
        let isl_rs_result = unsafe { isl_aff_project_domain_on_params(aff) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Aff { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_aff_coefficient_sgn`.
    pub fn coefficient_sgn(&self, type_: DimType, pos: i32) -> i32 {
        let aff = self;
        let aff = aff.ptr;
        let isl_rs_result = unsafe { isl_aff_coefficient_sgn(aff, type_, pos) };
        isl_rs_result
    }

    /// Wraps `isl_aff_copy`.
    pub fn copy(&self) -> Aff {
        let context_for_error_message = self.get_ctx();
        let aff = self;
        let aff = aff.ptr;
        let isl_rs_result = unsafe { isl_aff_copy(aff) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Aff { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_aff_scale_val`.
    pub fn scale_val(self, v: Val) -> Aff {
        let context_for_error_message = self.get_ctx();
        let aff = self;
        let mut aff = aff;
        aff.do_not_free_on_drop();
        let aff = aff.ptr;
        let mut v = v;
        v.do_not_free_on_drop();
        let v = v.ptr;
        let isl_rs_result = unsafe { isl_aff_scale_val(aff, v) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Aff { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_aff_le_set`.
    pub fn le_set(self, aff2: Aff) -> Set {
        let context_for_error_message = self.get_ctx();
        let aff1 = self;
        let mut aff1 = aff1;
        aff1.do_not_free_on_drop();
        let aff1 = aff1.ptr;
        let mut aff2 = aff2;
        aff2.do_not_free_on_drop();
        let aff2 = aff2.ptr;
        let isl_rs_result = unsafe { isl_aff_le_set(aff1, aff2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Set { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_aff_plain_is_zero`.
    pub fn plain_is_zero(&self) -> bool {
        let context_for_error_message = self.get_ctx();
        let aff = self;
        let aff = aff.ptr;
        let isl_rs_result = unsafe { isl_aff_plain_is_zero(aff) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error: {}", context_for_error_message.last_error_msg()),
        };
        isl_rs_result
    }

    /// Wraps `isl_aff_add`.
    pub fn add(self, aff2: Aff) -> Aff {
        let context_for_error_message = self.get_ctx();
        let aff1 = self;
        let mut aff1 = aff1;
        aff1.do_not_free_on_drop();
        let aff1 = aff1.ptr;
        let mut aff2 = aff2;
        aff2.do_not_free_on_drop();
        let aff2 = aff2.ptr;
        let isl_rs_result = unsafe { isl_aff_add(aff1, aff2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Aff { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_aff_gt_basic_set`.
    pub fn gt_basic_set(self, aff2: Aff) -> BasicSet {
        let context_for_error_message = self.get_ctx();
        let aff1 = self;
        let mut aff1 = aff1;
        aff1.do_not_free_on_drop();
        let aff1 = aff1.ptr;
        let mut aff2 = aff2;
        aff2.do_not_free_on_drop();
        let aff2 = aff2.ptr;
        let isl_rs_result = unsafe { isl_aff_gt_basic_set(aff1, aff2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = BasicSet { ptr: isl_rs_result,
                                       should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_aff_add_constant_si`.
    pub fn add_constant_si(self, v: i32) -> Aff {
        let context_for_error_message = self.get_ctx();
        let aff = self;
        let mut aff = aff;
        aff.do_not_free_on_drop();
        let aff = aff.ptr;
        let isl_rs_result = unsafe { isl_aff_add_constant_si(aff, v) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Aff { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_aff_plain_is_equal`.
    pub fn plain_is_equal(&self, aff2: &Aff) -> bool {
        let context_for_error_message = self.get_ctx();
        let aff1 = self;
        let aff1 = aff1.ptr;
        let aff2 = aff2.ptr;
        let isl_rs_result = unsafe { isl_aff_plain_is_equal(aff1, aff2) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error: {}", context_for_error_message.last_error_msg()),
        };
        isl_rs_result
    }

    /// Wraps `isl_aff_eq_set`.
    pub fn eq_set(self, aff2: Aff) -> Set {
        let context_for_error_message = self.get_ctx();
        let aff1 = self;
        let mut aff1 = aff1;
        aff1.do_not_free_on_drop();
        let aff1 = aff1.ptr;
        let mut aff2 = aff2;
        aff2.do_not_free_on_drop();
        let aff2 = aff2.ptr;
        let isl_rs_result = unsafe { isl_aff_eq_set(aff1, aff2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Set { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_aff_scale_down_val`.
    pub fn scale_down_val(self, v: Val) -> Aff {
        let context_for_error_message = self.get_ctx();
        let aff = self;
        let mut aff = aff;
        aff.do_not_free_on_drop();
        let aff = aff.ptr;
        let mut v = v;
        v.do_not_free_on_drop();
        let v = v.ptr;
        let isl_rs_result = unsafe { isl_aff_scale_down_val(aff, v) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Aff { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_aff_get_domain_space`.
    pub fn get_domain_space(&self) -> Space {
        let context_for_error_message = self.get_ctx();
        let aff = self;
        let aff = aff.ptr;
        let isl_rs_result = unsafe { isl_aff_get_domain_space(aff) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Space { ptr: isl_rs_result,
                                    should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_aff_set_dim_id`.
    pub fn set_dim_id(self, type_: DimType, pos: u32, id: Id) -> Aff {
        let context_for_error_message = self.get_ctx();
        let aff = self;
        let mut aff = aff;
        aff.do_not_free_on_drop();
        let aff = aff.ptr;
        let mut id = id;
        id.do_not_free_on_drop();
        let id = id.ptr;
        let isl_rs_result = unsafe { isl_aff_set_dim_id(aff, type_, pos, id) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Aff { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_aff_lt_set`.
    pub fn lt_set(self, aff2: Aff) -> Set {
        let context_for_error_message = self.get_ctx();
        let aff1 = self;
        let mut aff1 = aff1;
        aff1.do_not_free_on_drop();
        let aff1 = aff1.ptr;
        let mut aff2 = aff2;
        aff2.do_not_free_on_drop();
        let aff2 = aff2.ptr;
        let isl_rs_result = unsafe { isl_aff_lt_set(aff1, aff2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Set { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_aff_set_tuple_id`.
    pub fn set_tuple_id(self, type_: DimType, id: Id) -> Aff {
        let context_for_error_message = self.get_ctx();
        let aff = self;
        let mut aff = aff;
        aff.do_not_free_on_drop();
        let aff = aff.ptr;
        let mut id = id;
        id.do_not_free_on_drop();
        let id = id.ptr;
        let isl_rs_result = unsafe { isl_aff_set_tuple_id(aff, type_, id) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Aff { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_aff_set_constant_val`.
    pub fn set_constant_val(self, v: Val) -> Aff {
        let context_for_error_message = self.get_ctx();
        let aff = self;
        let mut aff = aff;
        aff.do_not_free_on_drop();
        let aff = aff.ptr;
        let mut v = v;
        v.do_not_free_on_drop();
        let v = v.ptr;
        let isl_rs_result = unsafe { isl_aff_set_constant_val(aff, v) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Aff { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_aff_move_dims`.
    pub fn move_dims(self, dst_type: DimType, dst_pos: u32, src_type: DimType, src_pos: u32,
                     n: u32)
                     -> Aff {
        let context_for_error_message = self.get_ctx();
        let aff = self;
        let mut aff = aff;
        aff.do_not_free_on_drop();
        let aff = aff.ptr;
        let isl_rs_result =
            unsafe { isl_aff_move_dims(aff, dst_type, dst_pos, src_type, src_pos, n) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Aff { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_aff_get_denominator_val`.
    pub fn get_denominator_val(&self) -> Val {
        let context_for_error_message = self.get_ctx();
        let aff = self;
        let aff = aff.ptr;
        let isl_rs_result = unsafe { isl_aff_get_denominator_val(aff) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Val { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_aff_dim`.
    pub fn dim(&self, type_: DimType) -> i32 {
        let aff = self;
        let aff = aff.ptr;
        let isl_rs_result = unsafe { isl_aff_dim(aff, type_) };
        isl_rs_result
    }

    /// Wraps `isl_aff_set_coefficient_si`.
    pub fn set_coefficient_si(self, type_: DimType, pos: i32, v: i32) -> Aff {
        let context_for_error_message = self.get_ctx();
        let aff = self;
        let mut aff = aff;
        aff.do_not_free_on_drop();
        let aff = aff.ptr;
        let isl_rs_result = unsafe { isl_aff_set_coefficient_si(aff, type_, pos, v) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Aff { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_aff_add_constant_val`.
    pub fn add_constant_val(self, v: Val) -> Aff {
        let context_for_error_message = self.get_ctx();
        let aff = self;
        let mut aff = aff;
        aff.do_not_free_on_drop();
        let aff = aff.ptr;
        let mut v = v;
        v.do_not_free_on_drop();
        let v = v.ptr;
        let isl_rs_result = unsafe { isl_aff_add_constant_val(aff, v) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Aff { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_aff_free`.
    pub fn free(self) -> Aff {
        let context_for_error_message = self.get_ctx();
        let aff = self;
        let mut aff = aff;
        aff.do_not_free_on_drop();
        let aff = aff.ptr;
        let isl_rs_result = unsafe { isl_aff_free(aff) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Aff { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_aff_nan_on_domain_space`.
    pub fn nan_on_domain_space(space: Space) -> Aff {
        let mut space = space;
        space.do_not_free_on_drop();
        let space = space.ptr;
        let isl_rs_result = unsafe { isl_aff_nan_on_domain_space(space) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = Aff { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_aff_involves_locals`.
    pub fn involves_locals(&self) -> bool {
        let context_for_error_message = self.get_ctx();
        let aff = self;
        let aff = aff.ptr;
        let isl_rs_result = unsafe { isl_aff_involves_locals(aff) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error: {}", context_for_error_message.last_error_msg()),
        };
        isl_rs_result
    }

    /// Wraps `isl_aff_param_on_domain_space_id`.
    pub fn param_on_domain_space_id(space: Space, id: Id) -> Aff {
        let mut space = space;
        space.do_not_free_on_drop();
        let space = space.ptr;
        let mut id = id;
        id.do_not_free_on_drop();
        let id = id.ptr;
        let isl_rs_result = unsafe { isl_aff_param_on_domain_space_id(space, id) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = Aff { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_aff_neg`.
    pub fn neg(self) -> Aff {
        let context_for_error_message = self.get_ctx();
        let aff = self;
        let mut aff = aff;
        aff.do_not_free_on_drop();
        let aff = aff.ptr;
        let isl_rs_result = unsafe { isl_aff_neg(aff) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Aff { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_aff_find_dim_by_name`.
    pub fn find_dim_by_name(&self, type_: DimType, name: &str) -> i32 {
        let aff = self;
        let aff = aff.ptr;
        let name = CString::new(name).unwrap();
        let name = name.as_ptr();
        let isl_rs_result = unsafe { isl_aff_find_dim_by_name(aff, type_, name) };
        isl_rs_result
    }

    /// Wraps `isl_aff_le_basic_set`.
    pub fn le_basic_set(self, aff2: Aff) -> BasicSet {
        let context_for_error_message = self.get_ctx();
        let aff1 = self;
        let mut aff1 = aff1;
        aff1.do_not_free_on_drop();
        let aff1 = aff1.ptr;
        let mut aff2 = aff2;
        aff2.do_not_free_on_drop();
        let aff2 = aff2.ptr;
        let isl_rs_result = unsafe { isl_aff_le_basic_set(aff1, aff2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = BasicSet { ptr: isl_rs_result,
                                       should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_aff_var_on_domain`.
    pub fn var_on_domain(ls: LocalSpace, type_: DimType, pos: u32) -> Aff {
        let mut ls = ls;
        ls.do_not_free_on_drop();
        let ls = ls.ptr;
        let isl_rs_result = unsafe { isl_aff_var_on_domain(ls, type_, pos) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = Aff { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_aff_get_coefficient_val`.
    pub fn get_coefficient_val(&self, type_: DimType, pos: i32) -> Val {
        let context_for_error_message = self.get_ctx();
        let aff = self;
        let aff = aff.ptr;
        let isl_rs_result = unsafe { isl_aff_get_coefficient_val(aff, type_, pos) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Val { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_aff_pullback_aff`.
    pub fn pullback_aff(self, aff2: Aff) -> Aff {
        let context_for_error_message = self.get_ctx();
        let aff1 = self;
        let mut aff1 = aff1;
        aff1.do_not_free_on_drop();
        let aff1 = aff1.ptr;
        let mut aff2 = aff2;
        aff2.do_not_free_on_drop();
        let aff2 = aff2.ptr;
        let isl_rs_result = unsafe { isl_aff_pullback_aff(aff1, aff2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Aff { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_aff_zero_basic_set`.
    pub fn zero_basic_set(self) -> BasicSet {
        let context_for_error_message = self.get_ctx();
        let aff = self;
        let mut aff = aff;
        aff.do_not_free_on_drop();
        let aff = aff.ptr;
        let isl_rs_result = unsafe { isl_aff_zero_basic_set(aff) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = BasicSet { ptr: isl_rs_result,
                                       should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_aff_sub`.
    pub fn sub(self, aff2: Aff) -> Aff {
        let context_for_error_message = self.get_ctx();
        let aff1 = self;
        let mut aff1 = aff1;
        aff1.do_not_free_on_drop();
        let aff1 = aff1.ptr;
        let mut aff2 = aff2;
        aff2.do_not_free_on_drop();
        let aff2 = aff2.ptr;
        let isl_rs_result = unsafe { isl_aff_sub(aff1, aff2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Aff { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_aff_neg_basic_set`.
    pub fn neg_basic_set(self) -> BasicSet {
        let context_for_error_message = self.get_ctx();
        let aff = self;
        let mut aff = aff;
        aff.do_not_free_on_drop();
        let aff = aff.ptr;
        let isl_rs_result = unsafe { isl_aff_neg_basic_set(aff) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = BasicSet { ptr: isl_rs_result,
                                       should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_aff_pullback_multi_aff`.
    pub fn pullback_multi_aff(self, ma: MultiAff) -> Aff {
        let context_for_error_message = self.get_ctx();
        let aff = self;
        let mut aff = aff;
        aff.do_not_free_on_drop();
        let aff = aff.ptr;
        let mut ma = ma;
        ma.do_not_free_on_drop();
        let ma = ma.ptr;
        let isl_rs_result = unsafe { isl_aff_pullback_multi_aff(aff, ma) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Aff { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_aff_gist_params`.
    pub fn gist_params(self, context: Set) -> Aff {
        let context_for_error_message = self.get_ctx();
        let aff = self;
        let mut aff = aff;
        aff.do_not_free_on_drop();
        let aff = aff.ptr;
        let mut context = context;
        context.do_not_free_on_drop();
        let context = context.ptr;
        let isl_rs_result = unsafe { isl_aff_gist_params(aff, context) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Aff { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_aff_scale_down_ui`.
    pub fn scale_down_ui(self, f: u32) -> Aff {
        let context_for_error_message = self.get_ctx();
        let aff = self;
        let mut aff = aff;
        aff.do_not_free_on_drop();
        let aff = aff.ptr;
        let isl_rs_result = unsafe { isl_aff_scale_down_ui(aff, f) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Aff { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_aff_get_constant_val`.
    pub fn get_constant_val(&self) -> Val {
        let context_for_error_message = self.get_ctx();
        let aff = self;
        let aff = aff.ptr;
        let isl_rs_result = unsafe { isl_aff_get_constant_val(aff) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Val { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_aff_mod_val`.
    pub fn mod_val(self, mod_: Val) -> Aff {
        let context_for_error_message = self.get_ctx();
        let aff = self;
        let mut aff = aff;
        aff.do_not_free_on_drop();
        let aff = aff.ptr;
        let mut mod_ = mod_;
        mod_.do_not_free_on_drop();
        let mod_ = mod_.ptr;
        let isl_rs_result = unsafe { isl_aff_mod_val(aff, mod_) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Aff { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_aff_insert_dims`.
    pub fn insert_dims(self, type_: DimType, first: u32, n: u32) -> Aff {
        let context_for_error_message = self.get_ctx();
        let aff = self;
        let mut aff = aff;
        aff.do_not_free_on_drop();
        let aff = aff.ptr;
        let isl_rs_result = unsafe { isl_aff_insert_dims(aff, type_, first, n) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Aff { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_aff_align_params`.
    pub fn align_params(self, model: Space) -> Aff {
        let context_for_error_message = self.get_ctx();
        let aff = self;
        let mut aff = aff;
        aff.do_not_free_on_drop();
        let aff = aff.ptr;
        let mut model = model;
        model.do_not_free_on_drop();
        let model = model.ptr;
        let isl_rs_result = unsafe { isl_aff_align_params(aff, model) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Aff { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_aff_add_coefficient_si`.
    pub fn add_coefficient_si(self, type_: DimType, pos: i32, v: i32) -> Aff {
        let context_for_error_message = self.get_ctx();
        let aff = self;
        let mut aff = aff;
        aff.do_not_free_on_drop();
        let aff = aff.ptr;
        let isl_rs_result = unsafe { isl_aff_add_coefficient_si(aff, type_, pos, v) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Aff { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_aff_val_on_domain`.
    pub fn val_on_domain(ls: LocalSpace, val: Val) -> Aff {
        let mut ls = ls;
        ls.do_not_free_on_drop();
        let ls = ls.ptr;
        let mut val = val;
        val.do_not_free_on_drop();
        let val = val.ptr;
        let isl_rs_result = unsafe { isl_aff_val_on_domain(ls, val) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = Aff { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_aff_ge_basic_set`.
    pub fn ge_basic_set(self, aff2: Aff) -> BasicSet {
        let context_for_error_message = self.get_ctx();
        let aff1 = self;
        let mut aff1 = aff1;
        aff1.do_not_free_on_drop();
        let aff1 = aff1.ptr;
        let mut aff2 = aff2;
        aff2.do_not_free_on_drop();
        let aff2 = aff2.ptr;
        let isl_rs_result = unsafe { isl_aff_ge_basic_set(aff1, aff2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = BasicSet { ptr: isl_rs_result,
                                       should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_aff_add_constant_num_si`.
    pub fn add_constant_num_si(self, v: i32) -> Aff {
        let context_for_error_message = self.get_ctx();
        let aff = self;
        let mut aff = aff;
        aff.do_not_free_on_drop();
        let aff = aff.ptr;
        let isl_rs_result = unsafe { isl_aff_add_constant_num_si(aff, v) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Aff { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_aff_eq_basic_set`.
    pub fn eq_basic_set(self, aff2: Aff) -> BasicSet {
        let context_for_error_message = self.get_ctx();
        let aff1 = self;
        let mut aff1 = aff1;
        aff1.do_not_free_on_drop();
        let aff1 = aff1.ptr;
        let mut aff2 = aff2;
        aff2.do_not_free_on_drop();
        let aff2 = aff2.ptr;
        let isl_rs_result = unsafe { isl_aff_eq_basic_set(aff1, aff2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = BasicSet { ptr: isl_rs_result,
                                       should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_aff_nan_on_domain`.
    pub fn nan_on_domain(ls: LocalSpace) -> Aff {
        let mut ls = ls;
        ls.do_not_free_on_drop();
        let ls = ls.ptr;
        let isl_rs_result = unsafe { isl_aff_nan_on_domain(ls) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = Aff { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_aff_zero_on_domain_space`.
    pub fn zero_on_domain_space(space: Space) -> Aff {
        let mut space = space;
        space.do_not_free_on_drop();
        let space = space.ptr;
        let isl_rs_result = unsafe { isl_aff_zero_on_domain_space(space) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = Aff { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_aff_val_on_domain_space`.
    pub fn val_on_domain_space(space: Space, val: Val) -> Aff {
        let mut space = space;
        space.do_not_free_on_drop();
        let space = space.ptr;
        let mut val = val;
        val.do_not_free_on_drop();
        let val = val.ptr;
        let isl_rs_result = unsafe { isl_aff_val_on_domain_space(space, val) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = Aff { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_aff_get_local_space`.
    pub fn get_local_space(&self) -> LocalSpace {
        let context_for_error_message = self.get_ctx();
        let aff = self;
        let aff = aff.ptr;
        let isl_rs_result = unsafe { isl_aff_get_local_space(aff) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = LocalSpace { ptr: isl_rs_result,
                                         should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_aff_get_space`.
    pub fn get_space(&self) -> Space {
        let context_for_error_message = self.get_ctx();
        let aff = self;
        let aff = aff.ptr;
        let isl_rs_result = unsafe { isl_aff_get_space(aff) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Space { ptr: isl_rs_result,
                                    should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_aff_set_constant_si`.
    pub fn set_constant_si(self, v: i32) -> Aff {
        let context_for_error_message = self.get_ctx();
        let aff = self;
        let mut aff = aff;
        aff.do_not_free_on_drop();
        let aff = aff.ptr;
        let isl_rs_result = unsafe { isl_aff_set_constant_si(aff, v) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Aff { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_aff_get_hash`.
    pub fn get_hash(&self) -> u32 {
        let aff = self;
        let aff = aff.ptr;
        let isl_rs_result = unsafe { isl_aff_get_hash(aff) };
        isl_rs_result
    }

    /// Wraps `isl_aff_get_domain_local_space`.
    pub fn get_domain_local_space(&self) -> LocalSpace {
        let context_for_error_message = self.get_ctx();
        let aff = self;
        let aff = aff.ptr;
        let isl_rs_result = unsafe { isl_aff_get_domain_local_space(aff) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = LocalSpace { ptr: isl_rs_result,
                                         should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_aff_ceil`.
    pub fn ceil(self) -> Aff {
        let context_for_error_message = self.get_ctx();
        let aff = self;
        let mut aff = aff;
        aff.do_not_free_on_drop();
        let aff = aff.ptr;
        let isl_rs_result = unsafe { isl_aff_ceil(aff) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Aff { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_aff_is_nan`.
    pub fn is_nan(&self) -> bool {
        let context_for_error_message = self.get_ctx();
        let aff = self;
        let aff = aff.ptr;
        let isl_rs_result = unsafe { isl_aff_is_nan(aff) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error: {}", context_for_error_message.last_error_msg()),
        };
        isl_rs_result
    }

    /// Wraps `isl_aff_add_dims`.
    pub fn add_dims(self, type_: DimType, n: u32) -> Aff {
        let context_for_error_message = self.get_ctx();
        let aff = self;
        let mut aff = aff;
        aff.do_not_free_on_drop();
        let aff = aff.ptr;
        let isl_rs_result = unsafe { isl_aff_add_dims(aff, type_, n) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Aff { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_aff_get_ctx`.
    pub fn get_ctx(&self) -> Context {
        let aff = self;
        let aff = aff.ptr;
        let isl_rs_result = unsafe { isl_aff_get_ctx(aff) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = Context { ptr: isl_rs_result,
                                      should_free_on_drop: true };
        let mut isl_rs_result = isl_rs_result;
        isl_rs_result.do_not_free_on_drop();
        isl_rs_result
    }

    /// Wraps `isl_aff_drop_dims`.
    pub fn drop_dims(self, type_: DimType, first: u32, n: u32) -> Aff {
        let context_for_error_message = self.get_ctx();
        let aff = self;
        let mut aff = aff;
        aff.do_not_free_on_drop();
        let aff = aff.ptr;
        let isl_rs_result = unsafe { isl_aff_drop_dims(aff, type_, first, n) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Aff { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_aff_ne_set`.
    pub fn ne_set(self, aff2: Aff) -> Set {
        let context_for_error_message = self.get_ctx();
        let aff1 = self;
        let mut aff1 = aff1;
        aff1.do_not_free_on_drop();
        let aff1 = aff1.ptr;
        let mut aff2 = aff2;
        aff2.do_not_free_on_drop();
        let aff2 = aff2.ptr;
        let isl_rs_result = unsafe { isl_aff_ne_set(aff1, aff2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Set { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_aff_set_coefficient_val`.
    pub fn set_coefficient_val(self, type_: DimType, pos: i32, v: Val) -> Aff {
        let context_for_error_message = self.get_ctx();
        let aff = self;
        let mut aff = aff;
        aff.do_not_free_on_drop();
        let aff = aff.ptr;
        let mut v = v;
        v.do_not_free_on_drop();
        let v = v.ptr;
        let isl_rs_result = unsafe { isl_aff_set_coefficient_val(aff, type_, pos, v) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Aff { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_aff_gt_set`.
    pub fn gt_set(self, aff2: Aff) -> Set {
        let context_for_error_message = self.get_ctx();
        let aff1 = self;
        let mut aff1 = aff1;
        aff1.do_not_free_on_drop();
        let aff1 = aff1.ptr;
        let mut aff2 = aff2;
        aff2.do_not_free_on_drop();
        let aff2 = aff2.ptr;
        let isl_rs_result = unsafe { isl_aff_gt_set(aff1, aff2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Set { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_aff_mul`.
    pub fn mul(self, aff2: Aff) -> Aff {
        let context_for_error_message = self.get_ctx();
        let aff1 = self;
        let mut aff1 = aff1;
        aff1.do_not_free_on_drop();
        let aff1 = aff1.ptr;
        let mut aff2 = aff2;
        aff2.do_not_free_on_drop();
        let aff2 = aff2.ptr;
        let isl_rs_result = unsafe { isl_aff_mul(aff1, aff2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Aff { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_aff_get_dim_name`.
    pub fn get_dim_name(&self, type_: DimType, pos: u32) -> &str {
        let aff = self;
        let aff = aff.ptr;
        let isl_rs_result = unsafe { isl_aff_get_dim_name(aff, type_, pos) };
        let isl_rs_result = unsafe { CStr::from_ptr(isl_rs_result) };
        let isl_rs_result = isl_rs_result.to_str().unwrap();
        isl_rs_result
    }

    /// Wraps `isl_aff_is_cst`.
    pub fn is_cst(&self) -> bool {
        let context_for_error_message = self.get_ctx();
        let aff = self;
        let aff = aff.ptr;
        let isl_rs_result = unsafe { isl_aff_is_cst(aff) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error: {}", context_for_error_message.last_error_msg()),
        };
        isl_rs_result
    }

    /// Wraps `isl_aff_floor`.
    pub fn floor(self) -> Aff {
        let context_for_error_message = self.get_ctx();
        let aff = self;
        let mut aff = aff;
        aff.do_not_free_on_drop();
        let aff = aff.ptr;
        let isl_rs_result = unsafe { isl_aff_floor(aff) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Aff { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_aff_div`.
    pub fn div(self, aff2: Aff) -> Aff {
        let context_for_error_message = self.get_ctx();
        let aff1 = self;
        let mut aff1 = aff1;
        aff1.do_not_free_on_drop();
        let aff1 = aff1.ptr;
        let mut aff2 = aff2;
        aff2.do_not_free_on_drop();
        let aff2 = aff2.ptr;
        let isl_rs_result = unsafe { isl_aff_div(aff1, aff2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Aff { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_aff_bind_id`.
    pub fn bind_id(self, id: Id) -> BasicSet {
        let context_for_error_message = self.get_ctx();
        let aff = self;
        let mut aff = aff;
        aff.do_not_free_on_drop();
        let aff = aff.ptr;
        let mut id = id;
        id.do_not_free_on_drop();
        let id = id.ptr;
        let isl_rs_result = unsafe { isl_aff_bind_id(aff, id) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = BasicSet { ptr: isl_rs_result,
                                       should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_aff_read_from_str`.
    pub fn read_from_str(ctx: &Context, str_: &str) -> Aff {
        let ctx = ctx.ptr;
        let str_ = CString::new(str_).unwrap();
        let str_ = str_.as_ptr();
        let isl_rs_result = unsafe { isl_aff_read_from_str(ctx, str_) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = Aff { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_aff_get_div`.
    pub fn get_div(&self, pos: i32) -> Aff {
        let context_for_error_message = self.get_ctx();
        let aff = self;
        let aff = aff.ptr;
        let isl_rs_result = unsafe { isl_aff_get_div(aff, pos) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Aff { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_aff_unbind_params_insert_domain`.
    pub fn unbind_params_insert_domain(self, domain: MultiId) -> Aff {
        let context_for_error_message = self.get_ctx();
        let aff = self;
        let mut aff = aff;
        aff.do_not_free_on_drop();
        let aff = aff.ptr;
        let mut domain = domain;
        domain.do_not_free_on_drop();
        let domain = domain.ptr;
        let isl_rs_result = unsafe { isl_aff_unbind_params_insert_domain(aff, domain) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Aff { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_aff_eval`.
    pub fn eval(self, pnt: Point) -> Val {
        let context_for_error_message = self.get_ctx();
        let aff = self;
        let mut aff = aff;
        aff.do_not_free_on_drop();
        let aff = aff.ptr;
        let mut pnt = pnt;
        pnt.do_not_free_on_drop();
        let pnt = pnt.ptr;
        let isl_rs_result = unsafe { isl_aff_eval(aff, pnt) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Val { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_aff_to_str`.
    pub fn to_str(&self) -> &str {
        let aff = self;
        let aff = aff.ptr;
        let isl_rs_result = unsafe { isl_aff_to_str(aff) };
        let isl_rs_result = unsafe { CStr::from_ptr(isl_rs_result) };
        let isl_rs_result = isl_rs_result.to_str().unwrap();
        isl_rs_result
    }

    /// Wraps `isl_aff_from_range`.
    pub fn from_range(self) -> Aff {
        let context_for_error_message = self.get_ctx();
        let aff = self;
        let mut aff = aff;
        aff.do_not_free_on_drop();
        let aff = aff.ptr;
        let isl_rs_result = unsafe { isl_aff_from_range(aff) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Aff { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Does not call isl_xxx_free() on being dropped. (For internal use only.)
    pub fn do_not_free_on_drop(&mut self) {
        self.should_free_on_drop = false;
    }
}

impl Drop for Aff {
    fn drop(&mut self) {
        if self.should_free_on_drop {
            unsafe {
                isl_aff_free(self.ptr);
            }
        }
    }
}
