// Automatically generated by isl_bindings_generator.
// LICENSE: MIT

use crate::bindings::{Context, QPolynomial, Stat};
use libc::uintptr_t;
use std::ffi::{CStr, CString};
use std::os::raw::{c_char, c_void};

/// Wraps `isl_qpolynomial_list`.
pub struct QPolynomialList {
    pub ptr: uintptr_t,
    pub should_free_on_drop: bool,
}

extern "C" {

    fn isl_qpolynomial_list_concat(list1: uintptr_t, list2: uintptr_t) -> uintptr_t;

    fn isl_qpolynomial_list_get_ctx(list: uintptr_t) -> uintptr_t;

    fn isl_qpolynomial_list_n_qpolynomial(list: uintptr_t) -> i32;

    fn isl_qpolynomial_list_every(list: uintptr_t,
                                  test: unsafe extern "C" fn(uintptr_t, *mut c_void) -> i32,
                                  user: *mut c_void)
                                  -> i32;

    fn isl_qpolynomial_list_to_str(list: uintptr_t) -> *const c_char;

    fn isl_qpolynomial_list_swap(list: uintptr_t, pos1: u32, pos2: u32) -> uintptr_t;

    fn isl_qpolynomial_list_get_qpolynomial(list: uintptr_t, index: i32) -> uintptr_t;

    fn isl_qpolynomial_list_copy(list: uintptr_t) -> uintptr_t;

    fn isl_qpolynomial_list_add(list: uintptr_t, el: uintptr_t) -> uintptr_t;

    fn isl_qpolynomial_list_insert(list: uintptr_t, pos: u32, el: uintptr_t) -> uintptr_t;

    fn isl_qpolynomial_list_reverse(list: uintptr_t) -> uintptr_t;

    fn isl_qpolynomial_list_free(list: uintptr_t) -> uintptr_t;

    fn isl_qpolynomial_list_drop(list: uintptr_t, first: u32, n: u32) -> uintptr_t;

    fn isl_qpolynomial_list_set_qpolynomial(list: uintptr_t, index: i32, el: uintptr_t)
                                            -> uintptr_t;

    fn isl_qpolynomial_list_foreach_scc(list: uintptr_t,
                                        follows: unsafe extern "C" fn(uintptr_t,
                                                             uintptr_t,
                                                             *mut c_void)
                                                             -> i32,
                                        follows_user: *mut c_void,
                                        fn_: unsafe extern "C" fn(uintptr_t, *mut c_void) -> Stat,
                                        fn_user: *mut c_void)
                                        -> Stat;

    fn isl_qpolynomial_list_dump(list: uintptr_t);

    fn isl_qpolynomial_list_alloc(ctx: uintptr_t, n: i32) -> uintptr_t;

    fn isl_qpolynomial_list_foreach(list: uintptr_t,
                                    fn_: unsafe extern "C" fn(uintptr_t, *mut c_void) -> Stat,
                                    user: *mut c_void)
                                    -> Stat;

    fn isl_qpolynomial_list_from_qpolynomial(el: uintptr_t) -> uintptr_t;

    fn isl_qpolynomial_list_map(list: uintptr_t,
                                fn_: unsafe extern "C" fn(uintptr_t, *mut c_void) -> uintptr_t,
                                user: *mut c_void)
                                -> uintptr_t;

    fn isl_qpolynomial_list_sort(list: uintptr_t,
                                 cmp: unsafe extern "C" fn(uintptr_t,
                                                      uintptr_t,
                                                      *mut c_void)
                                                      -> i32,
                                 user: *mut c_void)
                                 -> uintptr_t;

    fn isl_qpolynomial_list_size(list: uintptr_t) -> i32;

    fn isl_qpolynomial_list_get_at(list: uintptr_t, index: i32) -> uintptr_t;

    fn isl_qpolynomial_list_clear(list: uintptr_t) -> uintptr_t;

}

impl Clone for QPolynomialList {
    fn clone(&self) -> QPolynomialList {
        self.copy()
    }
}

impl FromIterator<QPolynomial> for QPolynomialList {
    fn from_iter<T>(iter: T) -> Self
        where T: IntoIterator<Item = QPolynomial>
    {
        let mut iter = iter.into_iter().peekable();
        let ctx = iter.peek().unwrap().get_ctx();
        let (size, _) = iter.size_hint();
        let mut res = Self::alloc(&ctx, size as _);
        for x in iter {
            res = res.add(x);
        }
        res
    }
}

impl QPolynomialList {
    /// Wraps `isl_qpolynomial_list_concat`.
    pub fn concat(self, list2: QPolynomialList) -> QPolynomialList {
        let context_for_error_message = self.get_ctx();
        let list1 = self;
        let mut list1 = list1;
        list1.do_not_free_on_drop();
        let list1 = list1.ptr;
        let mut list2 = list2;
        list2.do_not_free_on_drop();
        let list2 = list2.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_list_concat(list1, list2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = QPolynomialList { ptr: isl_rs_result,
                                              should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_list_get_ctx`.
    pub fn get_ctx(&self) -> Context {
        let list = self;
        let list = list.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_list_get_ctx(list) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = Context { ptr: isl_rs_result,
                                      should_free_on_drop: true };
        let mut isl_rs_result = isl_rs_result;
        isl_rs_result.do_not_free_on_drop();
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_list_n_qpolynomial`.
    pub fn n_qpolynomial(&self) -> i32 {
        let list = self;
        let list = list.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_list_n_qpolynomial(list) };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_list_every`.
    pub fn every<test>(&self, test: test, user: *mut c_void) -> bool
        where test: FnMut(&QPolynomial) -> bool
    {
        let context_for_error_message = self.get_ctx();
        let list = self;
        let list = list.ptr;
        extern "C" fn test_wrapper<test>(arg_0: uintptr_t, arg_1: *mut c_void) -> i32
            where test: FnMut(&QPolynomial) -> bool
        {
            if arg_0 == 0 {
                panic!("ISL error");
            }
            let arg_0 = &QPolynomial { ptr: arg_0,
                                       should_free_on_drop: true };
            let test: *mut test = unsafe { core::mem::transmute(arg_1) };
            let test: &mut test = unsafe { &mut *test };
            let res = test(arg_0);
            let res = if res { 1 } else { 0 };
            res
        }

        let mut test = test;
        let test_user: *mut test = &mut test;
        let test_user: *mut c_void = unsafe { core::mem::transmute(test_user) };
        let test = test_wrapper::<test>;
        let isl_rs_result = unsafe { isl_qpolynomial_list_every(list, test, user) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error: {}", context_for_error_message.last_error_msg()),
        };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_list_to_str`.
    pub fn to_str(&self) -> &str {
        let list = self;
        let list = list.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_list_to_str(list) };
        let isl_rs_result = unsafe { CStr::from_ptr(isl_rs_result) };
        let isl_rs_result = isl_rs_result.to_str().unwrap();
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_list_swap`.
    pub fn swap(self, pos1: u32, pos2: u32) -> QPolynomialList {
        let context_for_error_message = self.get_ctx();
        let list = self;
        let mut list = list;
        list.do_not_free_on_drop();
        let list = list.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_list_swap(list, pos1, pos2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = QPolynomialList { ptr: isl_rs_result,
                                              should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_list_get_qpolynomial`.
    pub fn get_qpolynomial(&self, index: i32) -> QPolynomial {
        let context_for_error_message = self.get_ctx();
        let list = self;
        let list = list.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_list_get_qpolynomial(list, index) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = QPolynomial { ptr: isl_rs_result,
                                          should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_list_copy`.
    pub fn copy(&self) -> QPolynomialList {
        let context_for_error_message = self.get_ctx();
        let list = self;
        let list = list.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_list_copy(list) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = QPolynomialList { ptr: isl_rs_result,
                                              should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_list_add`.
    pub fn add(self, el: QPolynomial) -> QPolynomialList {
        let context_for_error_message = self.get_ctx();
        let list = self;
        let mut list = list;
        list.do_not_free_on_drop();
        let list = list.ptr;
        let mut el = el;
        el.do_not_free_on_drop();
        let el = el.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_list_add(list, el) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = QPolynomialList { ptr: isl_rs_result,
                                              should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_list_insert`.
    pub fn insert(self, pos: u32, el: QPolynomial) -> QPolynomialList {
        let context_for_error_message = self.get_ctx();
        let list = self;
        let mut list = list;
        list.do_not_free_on_drop();
        let list = list.ptr;
        let mut el = el;
        el.do_not_free_on_drop();
        let el = el.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_list_insert(list, pos, el) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = QPolynomialList { ptr: isl_rs_result,
                                              should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_list_reverse`.
    pub fn reverse(self) -> QPolynomialList {
        let context_for_error_message = self.get_ctx();
        let list = self;
        let mut list = list;
        list.do_not_free_on_drop();
        let list = list.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_list_reverse(list) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = QPolynomialList { ptr: isl_rs_result,
                                              should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_list_free`.
    pub fn free(self) -> QPolynomialList {
        let context_for_error_message = self.get_ctx();
        let list = self;
        let mut list = list;
        list.do_not_free_on_drop();
        let list = list.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_list_free(list) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = QPolynomialList { ptr: isl_rs_result,
                                              should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_list_drop`.
    pub fn drop(self, first: u32, n: u32) -> QPolynomialList {
        let context_for_error_message = self.get_ctx();
        let list = self;
        let mut list = list;
        list.do_not_free_on_drop();
        let list = list.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_list_drop(list, first, n) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = QPolynomialList { ptr: isl_rs_result,
                                              should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_list_set_qpolynomial`.
    pub fn set_qpolynomial(self, index: i32, el: QPolynomial) -> QPolynomialList {
        let context_for_error_message = self.get_ctx();
        let list = self;
        let mut list = list;
        list.do_not_free_on_drop();
        let list = list.ptr;
        let mut el = el;
        el.do_not_free_on_drop();
        let el = el.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_list_set_qpolynomial(list, index, el) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = QPolynomialList { ptr: isl_rs_result,
                                              should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_list_foreach_scc`.
    pub fn foreach_scc<follows, fn_>(&self, follows: follows, follows_user: *mut c_void, fn_: fn_,
                                     fn_user: *mut c_void)
                                     -> Stat
        where follows: FnMut(&QPolynomial, &QPolynomial) -> bool,
              fn_: FnMut(&QPolynomialList) -> Stat
    {
        let context_for_error_message = self.get_ctx();
        let list = self;
        let list = list.ptr;
        extern "C" fn follows_wrapper<follows>(arg_0: uintptr_t, arg_1: uintptr_t,
                                               arg_2: *mut c_void)
                                               -> i32
            where follows: FnMut(&QPolynomial, &QPolynomial) -> bool
        {
            if arg_0 == 0 {
                panic!("ISL error");
            }
            let arg_0 = &QPolynomial { ptr: arg_0,
                                       should_free_on_drop: true };
            if arg_1 == 0 {
                panic!("ISL error");
            }
            let arg_1 = &QPolynomial { ptr: arg_1,
                                       should_free_on_drop: true };
            let follows: *mut follows = unsafe { core::mem::transmute(arg_2) };
            let follows: &mut follows = unsafe { &mut *follows };
            let res = follows(arg_0, arg_1);
            let res = if res { 1 } else { 0 };
            res
        }

        let mut follows = follows;
        let follows_user: *mut follows = &mut follows;
        let follows_user: *mut c_void = unsafe { core::mem::transmute(follows_user) };
        let follows = follows_wrapper::<follows>;
        extern "C" fn fn__wrapper<fn_>(arg_0: uintptr_t, arg_1: *mut c_void) -> Stat
            where fn_: FnMut(&QPolynomialList) -> Stat
        {
            if arg_0 == 0 {
                panic!("ISL error");
            }
            let arg_0 = &QPolynomialList { ptr: arg_0,
                                           should_free_on_drop: true };
            let fn_: *mut fn_ = unsafe { core::mem::transmute(arg_1) };
            let fn_: &mut fn_ = unsafe { &mut *fn_ };
            let res = fn_(arg_0);
            res
        }

        let mut fn_ = fn_;
        let user: *mut fn_ = &mut fn_;
        let user: *mut c_void = unsafe { core::mem::transmute(user) };
        let fn_ = fn__wrapper::<fn_>;
        let isl_rs_result =
            unsafe { isl_qpolynomial_list_foreach_scc(list, follows, follows_user, fn_, fn_user) };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_list_dump`.
    pub fn dump(&self) {
        let list = self;
        let list = list.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_list_dump(list) };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_list_alloc`.
    pub fn alloc(ctx: &Context, n: i32) -> QPolynomialList {
        let ctx = ctx.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_list_alloc(ctx, n) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = QPolynomialList { ptr: isl_rs_result,
                                              should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_list_foreach`.
    pub fn foreach<fn_>(&self, fn_: fn_, user: *mut c_void) -> Stat
        where fn_: FnMut(&QPolynomial) -> Stat
    {
        let context_for_error_message = self.get_ctx();
        let list = self;
        let list = list.ptr;
        extern "C" fn fn__wrapper<fn_>(arg_0: uintptr_t, arg_1: *mut c_void) -> Stat
            where fn_: FnMut(&QPolynomial) -> Stat
        {
            if arg_0 == 0 {
                panic!("ISL error");
            }
            let arg_0 = &QPolynomial { ptr: arg_0,
                                       should_free_on_drop: true };
            let fn_: *mut fn_ = unsafe { core::mem::transmute(arg_1) };
            let fn_: &mut fn_ = unsafe { &mut *fn_ };
            let res = fn_(arg_0);
            res
        }

        let mut fn_ = fn_;
        let user: *mut fn_ = &mut fn_;
        let user: *mut c_void = unsafe { core::mem::transmute(user) };
        let fn_ = fn__wrapper::<fn_>;
        let isl_rs_result = unsafe { isl_qpolynomial_list_foreach(list, fn_, user) };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_list_from_qpolynomial`.
    pub fn from_qpolynomial(el: QPolynomial) -> QPolynomialList {
        let mut el = el;
        el.do_not_free_on_drop();
        let el = el.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_list_from_qpolynomial(el) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = QPolynomialList { ptr: isl_rs_result,
                                              should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_list_map`.
    pub fn map<fn_>(self, fn_: fn_, user: *mut c_void) -> QPolynomialList
        where fn_: FnMut(&QPolynomial) -> &QPolynomial
    {
        let context_for_error_message = self.get_ctx();
        let list = self;
        let mut list = list;
        list.do_not_free_on_drop();
        let list = list.ptr;
        extern "C" fn fn__wrapper<fn_>(arg_0: uintptr_t, arg_1: *mut c_void) -> uintptr_t
            where fn_: FnMut(&QPolynomial) -> &QPolynomial
        {
            if arg_0 == 0 {
                panic!("ISL error");
            }
            let arg_0 = &QPolynomial { ptr: arg_0,
                                       should_free_on_drop: true };
            let fn_: *mut fn_ = unsafe { core::mem::transmute(arg_1) };
            let fn_: &mut fn_ = unsafe { &mut *fn_ };
            let res = fn_(arg_0);
            let res = res.ptr;
            res
        }

        let mut fn_ = fn_;
        let user: *mut fn_ = &mut fn_;
        let user: *mut c_void = unsafe { core::mem::transmute(user) };
        let fn_ = fn__wrapper::<fn_>;
        let isl_rs_result = unsafe { isl_qpolynomial_list_map(list, fn_, user) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = QPolynomialList { ptr: isl_rs_result,
                                              should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_list_sort`.
    pub fn sort<cmp>(self, cmp: cmp, user: *mut c_void) -> QPolynomialList
        where cmp: FnMut(&QPolynomial, &QPolynomial) -> i32
    {
        let context_for_error_message = self.get_ctx();
        let list = self;
        let mut list = list;
        list.do_not_free_on_drop();
        let list = list.ptr;
        extern "C" fn cmp_wrapper<cmp>(arg_0: uintptr_t, arg_1: uintptr_t, arg_2: *mut c_void)
                                       -> i32
            where cmp: FnMut(&QPolynomial, &QPolynomial) -> i32
        {
            if arg_0 == 0 {
                panic!("ISL error");
            }
            let arg_0 = &QPolynomial { ptr: arg_0,
                                       should_free_on_drop: true };
            if arg_1 == 0 {
                panic!("ISL error");
            }
            let arg_1 = &QPolynomial { ptr: arg_1,
                                       should_free_on_drop: true };
            let cmp: *mut cmp = unsafe { core::mem::transmute(arg_2) };
            let cmp: &mut cmp = unsafe { &mut *cmp };
            let res = cmp(arg_0, arg_1);
            res
        }

        let mut cmp = cmp;
        let cmp_user: *mut cmp = &mut cmp;
        let cmp_user: *mut c_void = unsafe { core::mem::transmute(cmp_user) };
        let cmp = cmp_wrapper::<cmp>;
        let isl_rs_result = unsafe { isl_qpolynomial_list_sort(list, cmp, user) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = QPolynomialList { ptr: isl_rs_result,
                                              should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_list_size`.
    pub fn size(&self) -> i32 {
        let list = self;
        let list = list.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_list_size(list) };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_list_get_at`.
    pub fn get_at(&self, index: i32) -> QPolynomial {
        let context_for_error_message = self.get_ctx();
        let list = self;
        let list = list.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_list_get_at(list, index) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = QPolynomial { ptr: isl_rs_result,
                                          should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_list_clear`.
    pub fn clear(self) -> QPolynomialList {
        let context_for_error_message = self.get_ctx();
        let list = self;
        let mut list = list;
        list.do_not_free_on_drop();
        let list = list.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_list_clear(list) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = QPolynomialList { ptr: isl_rs_result,
                                              should_free_on_drop: true };
        isl_rs_result
    }

    /// Does not call isl_xxx_free() on being dropped. (For internal use only.)
    pub fn do_not_free_on_drop(&mut self) {
        self.should_free_on_drop = false;
    }
}

impl Drop for QPolynomialList {
    fn drop(&mut self) {
        if self.should_free_on_drop {
            unsafe {
                isl_qpolynomial_list_free(self.ptr);
            }
        }
    }
}
