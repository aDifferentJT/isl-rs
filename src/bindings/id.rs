// Automatically generated by isl_bindings_generator.
// LICENSE: MIT

use crate::bindings::Context;
use libc::uintptr_t;
use std::ffi::{CStr, CString};
use std::os::raw::c_char;

/// Wraps `isl_id`.
pub struct Id {
    pub ptr: uintptr_t,
}

extern "C" {

    fn isl_id_get_ctx(id: uintptr_t) -> uintptr_t;

    fn isl_id_get_hash(id: uintptr_t) -> u32;

    fn isl_id_copy(id: uintptr_t) -> uintptr_t;

    fn isl_id_free(id: uintptr_t) -> uintptr_t;

    fn isl_id_get_name(id: uintptr_t) -> *const c_char;

    fn isl_id_read_from_str(ctx: uintptr_t, str_: *const c_char) -> uintptr_t;

    fn isl_id_to_str(id: uintptr_t) -> *const c_char;

    fn isl_id_dump(id: uintptr_t);

}

impl Id {
    /// Wraps `isl_id_get_ctx`.
    pub fn get_ctx(&self) -> Context {
        let id = self;
        let id = id.ptr;
        let isl_rs_result = unsafe { isl_id_get_ctx(id) };
        let isl_rs_result = Context { ptr: isl_rs_result };
        isl_rs_result
    }

    /// Wraps `isl_id_get_hash`.
    pub fn get_hash(&self) -> u32 {
        let id = self;
        let id = id.ptr;
        let isl_rs_result = unsafe { isl_id_get_hash(id) };
        isl_rs_result
    }

    /// Wraps `isl_id_copy`.
    pub fn copy(&self) -> Id {
        let id = self;
        let id = id.ptr;
        let isl_rs_result = unsafe { isl_id_copy(id) };
        let isl_rs_result = Id { ptr: isl_rs_result };
        isl_rs_result
    }

    /// Wraps `isl_id_free`.
    pub fn free(self) -> Id {
        let id = self;
        let id = id.ptr;
        let isl_rs_result = unsafe { isl_id_free(id) };
        let isl_rs_result = Id { ptr: isl_rs_result };
        isl_rs_result
    }

    /// Wraps `isl_id_get_name`.
    pub fn get_name(&self) -> &str {
        let id = self;
        let id = id.ptr;
        let isl_rs_result = unsafe { isl_id_get_name(id) };
        let isl_rs_result = unsafe { CStr::from_ptr(isl_rs_result) };
        let isl_rs_result = isl_rs_result.to_str().unwrap();
        isl_rs_result
    }

    /// Wraps `isl_id_read_from_str`.
    pub fn read_from_str(ctx: &Context, str_: &str) -> Id {
        let ctx = ctx.ptr;
        let str_ = CString::new(str_).unwrap();
        let str_ = str_.as_ptr();
        let isl_rs_result = unsafe { isl_id_read_from_str(ctx, str_) };
        let isl_rs_result = Id { ptr: isl_rs_result };
        isl_rs_result
    }

    /// Wraps `isl_id_to_str`.
    pub fn to_str(&self) -> &str {
        let id = self;
        let id = id.ptr;
        let isl_rs_result = unsafe { isl_id_to_str(id) };
        let isl_rs_result = unsafe { CStr::from_ptr(isl_rs_result) };
        let isl_rs_result = isl_rs_result.to_str().unwrap();
        isl_rs_result
    }

    /// Wraps `isl_id_dump`.
    pub fn dump(&self) {
        let id = self;
        let id = id.ptr;
        let isl_rs_result = unsafe { isl_id_dump(id) };
        isl_rs_result
    }
}

impl Drop for Id {
    fn drop(&mut self) {
        unsafe {
            isl_id_free(self.ptr);
        }
    }
}
