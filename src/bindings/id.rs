// Automatically generated by isl_bindings_generator.
// LICENSE: MIT

use crate::bindings::{Context, IdList};
use libc::uintptr_t;
use std::ffi::{CStr, CString};
use std::os::raw::{c_char, c_void};

/// Wraps `isl_id`.
pub struct Id {
    pub ptr: uintptr_t,
    pub should_free_on_drop: bool,
}

extern "C" {

    fn isl_id_free(id: uintptr_t) -> uintptr_t;

    fn isl_id_copy(id: uintptr_t) -> uintptr_t;

    fn isl_id_get_name(id: uintptr_t) -> *const c_char;

    fn isl_id_get_user(id: uintptr_t) -> *mut c_void;

    fn isl_id_to_list(el: uintptr_t) -> uintptr_t;

    fn isl_id_alloc(ctx: uintptr_t, name: *const c_char, user: *mut c_void) -> uintptr_t;

    fn isl_id_dump(id: uintptr_t);

    fn isl_id_get_ctx(id: uintptr_t) -> uintptr_t;

    fn isl_id_get_hash(id: uintptr_t) -> u32;

    fn isl_id_set_free_user(id: uintptr_t, free_user: unsafe extern "C" fn(*mut c_void))
                            -> uintptr_t;

    fn isl_id_read_from_str(ctx: uintptr_t, str_: *const c_char) -> uintptr_t;

    fn isl_id_to_str(id: uintptr_t) -> *const c_char;

}

impl Clone for Id {
    fn clone(&self) -> Id {
        self.copy()
    }
}

impl Id {
    /// Wraps `isl_id_free`.
    pub fn free(self) -> Id {
        let context_for_error_message = self.get_ctx();
        let id = self;
        let mut id = id;
        id.do_not_free_on_drop();
        let id = id.ptr;
        let isl_rs_result = unsafe { isl_id_free(id) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Id { ptr: isl_rs_result,
                                 should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_id_copy`.
    pub fn copy(&self) -> Id {
        let context_for_error_message = self.get_ctx();
        let id = self;
        let id = id.ptr;
        let isl_rs_result = unsafe { isl_id_copy(id) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Id { ptr: isl_rs_result,
                                 should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_id_get_name`.
    pub fn get_name(&self) -> &str {
        let id = self;
        let id = id.ptr;
        let isl_rs_result = unsafe { isl_id_get_name(id) };
        let isl_rs_result = unsafe { CStr::from_ptr(isl_rs_result) };
        let isl_rs_result = isl_rs_result.to_str().unwrap();
        isl_rs_result
    }

    /// Wraps `isl_id_get_user`.
    pub fn get_user(&self) -> *mut c_void {
        let id = self;
        let id = id.ptr;
        let isl_rs_result = unsafe { isl_id_get_user(id) };
        isl_rs_result
    }

    /// Wraps `isl_id_to_list`.
    pub fn to_list(self) -> IdList {
        let context_for_error_message = self.get_ctx();
        let el = self;
        let mut el = el;
        el.do_not_free_on_drop();
        let el = el.ptr;
        let isl_rs_result = unsafe { isl_id_to_list(el) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = IdList { ptr: isl_rs_result,
                                     should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_id_alloc`.
    pub fn alloc(ctx: &Context, name: &str, user: *mut c_void) -> Id {
        let ctx = ctx.ptr;
        let name = CString::new(name).unwrap();
        let name = name.as_ptr();
        let isl_rs_result = unsafe { isl_id_alloc(ctx, name, user) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = Id { ptr: isl_rs_result,
                                 should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_id_dump`.
    pub fn dump(&self) {
        let id = self;
        let id = id.ptr;
        let isl_rs_result = unsafe { isl_id_dump(id) };
        isl_rs_result
    }

    /// Wraps `isl_id_get_ctx`.
    pub fn get_ctx(&self) -> Context {
        let id = self;
        let id = id.ptr;
        let isl_rs_result = unsafe { isl_id_get_ctx(id) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = Context { ptr: isl_rs_result,
                                      should_free_on_drop: true };
        let mut isl_rs_result = isl_rs_result;
        isl_rs_result.do_not_free_on_drop();
        isl_rs_result
    }

    /// Wraps `isl_id_get_hash`.
    pub fn get_hash(&self) -> u32 {
        let id = self;
        let id = id.ptr;
        let isl_rs_result = unsafe { isl_id_get_hash(id) };
        isl_rs_result
    }

    /// Wraps `isl_id_set_free_user`.
    pub fn set_free_user<free_user>(self, free_user: free_user) -> Id
        where free_user: FnMut()
    {
        let context_for_error_message = self.get_ctx();
        let id = self;
        let mut id = id;
        id.do_not_free_on_drop();
        let id = id.ptr;
        extern "C" fn free_user_wrapper<free_user>(arg_0: *mut c_void)
            where free_user: FnMut()
        {
            let free_user: *mut free_user = unsafe { core::mem::transmute(arg_0) };
            let free_user: &mut free_user = unsafe { &mut *free_user };
            let res = free_user();
        }

        let mut free_user = free_user;
        let free_user_user: *mut free_user = &mut free_user;
        let free_user_user: *mut c_void = unsafe { core::mem::transmute(free_user_user) };
        let free_user = free_user_wrapper::<free_user>;
        let isl_rs_result = unsafe { isl_id_set_free_user(id, free_user) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Id { ptr: isl_rs_result,
                                 should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_id_read_from_str`.
    pub fn read_from_str(ctx: &Context, str_: &str) -> Id {
        let ctx = ctx.ptr;
        let str_ = CString::new(str_).unwrap();
        let str_ = str_.as_ptr();
        let isl_rs_result = unsafe { isl_id_read_from_str(ctx, str_) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = Id { ptr: isl_rs_result,
                                 should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_id_to_str`.
    pub fn to_str(&self) -> &str {
        let id = self;
        let id = id.ptr;
        let isl_rs_result = unsafe { isl_id_to_str(id) };
        let isl_rs_result = unsafe { CStr::from_ptr(isl_rs_result) };
        let isl_rs_result = isl_rs_result.to_str().unwrap();
        isl_rs_result
    }

    /// Does not call isl_xxx_free() on being dropped. (For internal use only.)
    pub fn do_not_free_on_drop(&mut self) {
        self.should_free_on_drop = false;
    }
}

impl Drop for Id {
    fn drop(&mut self) {
        if self.should_free_on_drop {
            unsafe {
                isl_id_free(self.ptr);
            }
        }
    }
}
