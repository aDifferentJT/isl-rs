// Automatically generated by isl_bindings_generator.
// LICENSE: MIT

use libc::uintptr_t;
use crate::bindings::{DimType, Stat, BasicSet, MultiAff, BasicMapList, Constraint, Space, Mat, Map, AffList, ConstraintList, Val, Context, Aff, LocalSpace, Id, PwMultiAff};
use std::os::raw::{c_char, c_void};
use std::ffi::{CString, CStr};

/// Wraps `isl_basic_map`.
pub struct BasicMap {
    pub ptr: uintptr_t,
    pub should_free_on_drop: bool,
}

extern "C" {

    fn isl_basic_map_deltas_map(bmap: uintptr_t) -> uintptr_t;

    fn isl_basic_map_domain_product(bmap1: uintptr_t, bmap2: uintptr_t) -> uintptr_t;

    fn isl_basic_map_set_tuple_name(bmap: uintptr_t, type_: DimType, s: *const c_char) -> uintptr_t;

    fn isl_basic_map_intersect_range(bmap: uintptr_t, bset: uintptr_t) -> uintptr_t;

    fn isl_basic_map_is_empty(bmap: uintptr_t) -> i32;

    fn isl_basic_map_intersect_domain(bmap: uintptr_t, bset: uintptr_t) -> uintptr_t;

    fn isl_basic_map_from_multi_aff(maff: uintptr_t) -> uintptr_t;

    fn isl_basic_map_can_curry(bmap: uintptr_t) -> i32;

    fn isl_basic_map_is_equal(bmap1: uintptr_t, bmap2: uintptr_t) -> i32;

    fn isl_basic_map_gist(bmap: uintptr_t, context: uintptr_t) -> uintptr_t;

    fn isl_basic_map_to_list(el: uintptr_t) -> uintptr_t;

    fn isl_basic_map_is_disjoint(bmap1: uintptr_t, bmap2: uintptr_t) -> i32;

    fn isl_basic_map_free(bmap: uintptr_t) -> uintptr_t;

    fn isl_basic_map_order_gt(bmap: uintptr_t, type1: DimType, pos1: i32, type2: DimType, pos2: i32) -> uintptr_t;

    fn isl_basic_map_is_rational(bmap: uintptr_t) -> i32;

    fn isl_basic_map_from_constraint(constraint: uintptr_t) -> uintptr_t;

    fn isl_basic_map_identity(space: uintptr_t) -> uintptr_t;

    fn isl_basic_map_from_domain_and_range(domain: uintptr_t, range: uintptr_t) -> uintptr_t;

    fn isl_basic_map_reverse(bmap: uintptr_t) -> uintptr_t;

    fn isl_basic_map_product(bmap1: uintptr_t, bmap2: uintptr_t) -> uintptr_t;

    fn isl_basic_map_fix_si(bmap: uintptr_t, type_: DimType, pos: u32, value: i32) -> uintptr_t;

    fn isl_basic_map_set_dim_name(bmap: uintptr_t, type_: DimType, pos: u32, s: *const c_char) -> uintptr_t;

    fn isl_basic_map_is_strict_subset(bmap1: uintptr_t, bmap2: uintptr_t) -> i32;

    fn isl_basic_map_find_dim_by_name(bmap: uintptr_t, type_: DimType, name: *const c_char) -> i32;

    fn isl_basic_map_copy(bmap: uintptr_t) -> uintptr_t;

    fn isl_basic_map_more_at(space: uintptr_t, pos: u32) -> uintptr_t;

    fn isl_basic_map_inequalities_matrix(bmap: uintptr_t, c1: DimType, c2: DimType, c3: DimType, c4: DimType, c5: DimType) -> uintptr_t;

    fn isl_basic_map_intersect(bmap1: uintptr_t, bmap2: uintptr_t) -> uintptr_t;

    fn isl_basic_map_image_is_bounded(bmap: uintptr_t) -> i32;

    fn isl_basic_map_order_ge(bmap: uintptr_t, type1: DimType, pos1: i32, type2: DimType, pos2: i32) -> uintptr_t;

    fn isl_basic_map_foreach_constraint(bmap: uintptr_t, fn_: unsafe extern "C" fn(uintptr_t, *mut c_void) -> Stat, user: *mut c_void) -> Stat;

    fn isl_basic_map_range_map(bmap: uintptr_t) -> uintptr_t;

    fn isl_basic_map_lexmin(bmap: uintptr_t) -> uintptr_t;

    fn isl_basic_map_from_aff_list(domain_space: uintptr_t, list: uintptr_t) -> uintptr_t;

    fn isl_basic_map_uncurry(bmap: uintptr_t) -> uintptr_t;

    fn isl_basic_map_flatten(bmap: uintptr_t) -> uintptr_t;

    fn isl_basic_map_project_out(bmap: uintptr_t, type_: DimType, first: u32, n: u32) -> uintptr_t;

    fn isl_basic_map_preimage_domain_multi_aff(bmap: uintptr_t, ma: uintptr_t) -> uintptr_t;

    fn isl_basic_map_universe(space: uintptr_t) -> uintptr_t;

    fn isl_basic_map_upper_bound_si(bmap: uintptr_t, type_: DimType, pos: u32, value: i32) -> uintptr_t;

    fn isl_basic_map_remove_divs(bmap: uintptr_t) -> uintptr_t;

    fn isl_basic_map_is_universe(bmap: uintptr_t) -> i32;

    fn isl_basic_map_apply_domain(bmap1: uintptr_t, bmap2: uintptr_t) -> uintptr_t;

    fn isl_basic_map_get_constraint_list(bmap: uintptr_t) -> uintptr_t;

    fn isl_basic_map_from_range(bset: uintptr_t) -> uintptr_t;

    fn isl_basic_map_can_zip(bmap: uintptr_t) -> i32;

    fn isl_basic_map_affine_hull(bmap: uintptr_t) -> uintptr_t;

    fn isl_basic_map_flatten_domain(bmap: uintptr_t) -> uintptr_t;

    fn isl_basic_map_remove_dims(bmap: uintptr_t, type_: DimType, first: u32, n: u32) -> uintptr_t;

    fn isl_basic_map_from_domain(bset: uintptr_t) -> uintptr_t;

    fn isl_basic_map_get_space(bmap: uintptr_t) -> uintptr_t;

    fn isl_basic_map_empty(space: uintptr_t) -> uintptr_t;

    fn isl_basic_map_from_constraint_matrices(space: uintptr_t, eq: uintptr_t, ineq: uintptr_t, c1: DimType, c2: DimType, c3: DimType, c4: DimType, c5: DimType) -> uintptr_t;

    fn isl_basic_map_is_subset(bmap1: uintptr_t, bmap2: uintptr_t) -> i32;

    fn isl_basic_map_zip(bmap: uintptr_t) -> uintptr_t;

    fn isl_basic_map_flat_product(bmap1: uintptr_t, bmap2: uintptr_t) -> uintptr_t;

    fn isl_basic_map_plain_get_val_if_fixed(bmap: uintptr_t, type_: DimType, pos: u32) -> uintptr_t;

    fn isl_basic_map_to_str(bmap: uintptr_t) -> *const c_char;

    fn isl_basic_map_add_constraint(bmap: uintptr_t, constraint: uintptr_t) -> uintptr_t;

    fn isl_basic_map_n_constraint(bmap: uintptr_t) -> i32;

    fn isl_basic_map_read_from_str(ctx: uintptr_t, str_: *const c_char) -> uintptr_t;

    fn isl_basic_map_eliminate(bmap: uintptr_t, type_: DimType, first: u32, n: u32) -> uintptr_t;

    fn isl_basic_map_get_div(bmap: uintptr_t, pos: i32) -> uintptr_t;

    fn isl_basic_map_apply_range(bmap1: uintptr_t, bmap2: uintptr_t) -> uintptr_t;

    fn isl_basic_map_sum(bmap1: uintptr_t, bmap2: uintptr_t) -> uintptr_t;

    fn isl_basic_map_remove_divs_involving_dims(bmap: uintptr_t, type_: DimType, first: u32, n: u32) -> uintptr_t;

    fn isl_basic_map_plain_is_universe(bmap: uintptr_t) -> i32;

    fn isl_basic_map_domain_map(bmap: uintptr_t) -> uintptr_t;

    fn isl_basic_map_flat_range_product(bmap1: uintptr_t, bmap2: uintptr_t) -> uintptr_t;

    fn isl_basic_map_compute_divs(bmap: uintptr_t) -> uintptr_t;

    fn isl_basic_map_equal(space: uintptr_t, n_equal: u32) -> uintptr_t;

    fn isl_basic_map_move_dims(bmap: uintptr_t, dst_type: DimType, dst_pos: u32, src_type: DimType, src_pos: u32, n: u32) -> uintptr_t;

    fn isl_basic_map_neg(bmap: uintptr_t) -> uintptr_t;

    fn isl_basic_map_wrap(bmap: uintptr_t) -> uintptr_t;

    fn isl_basic_map_preimage_range_multi_aff(bmap: uintptr_t, ma: uintptr_t) -> uintptr_t;

    fn isl_basic_map_range(bmap: uintptr_t) -> uintptr_t;

    fn isl_basic_map_curry(bmap: uintptr_t) -> uintptr_t;

    fn isl_basic_map_less_at(space: uintptr_t, pos: u32) -> uintptr_t;

    fn isl_basic_map_gist_domain(bmap: uintptr_t, context: uintptr_t) -> uintptr_t;

    fn isl_basic_map_deltas(bmap: uintptr_t) -> uintptr_t;

    fn isl_basic_map_union(bmap1: uintptr_t, bmap2: uintptr_t) -> uintptr_t;

    fn isl_basic_map_nat_universe(space: uintptr_t) -> uintptr_t;

    fn isl_basic_map_add_dims(bmap: uintptr_t, type_: DimType, n: u32) -> uintptr_t;

    fn isl_basic_map_flatten_range(bmap: uintptr_t) -> uintptr_t;

    fn isl_basic_map_equalities_matrix(bmap: uintptr_t, c1: DimType, c2: DimType, c3: DimType, c4: DimType, c5: DimType) -> uintptr_t;

    fn isl_basic_map_remove_redundancies(bmap: uintptr_t) -> uintptr_t;

    fn isl_basic_map_fix_val(bmap: uintptr_t, type_: DimType, pos: u32, v: uintptr_t) -> uintptr_t;

    fn isl_basic_map_involves_dims(bmap: uintptr_t, type_: DimType, first: u32, n: u32) -> i32;

    fn isl_basic_map_get_local_space(bmap: uintptr_t) -> uintptr_t;

    fn isl_basic_map_domain(bmap: uintptr_t) -> uintptr_t;

    fn isl_basic_map_get_ctx(bmap: uintptr_t) -> uintptr_t;

    fn isl_basic_map_range_product(bmap1: uintptr_t, bmap2: uintptr_t) -> uintptr_t;

    fn isl_basic_map_from_aff(aff: uintptr_t) -> uintptr_t;

    fn isl_basic_map_get_tuple_name(bmap: uintptr_t, type_: DimType) -> *const c_char;

    fn isl_basic_map_plain_is_empty(bmap: uintptr_t) -> i32;

    fn isl_basic_map_get_dim_name(bmap: uintptr_t, type_: DimType, pos: u32) -> *const c_char;

    fn isl_basic_map_drop_unused_params(bmap: uintptr_t) -> uintptr_t;

    fn isl_basic_map_lower_bound_si(bmap: uintptr_t, type_: DimType, pos: u32, value: i32) -> uintptr_t;

    fn isl_basic_map_drop_constraints_involving_dims(bmap: uintptr_t, type_: DimType, first: u32, n: u32) -> uintptr_t;

    fn isl_basic_map_detect_equalities(bmap: uintptr_t) -> uintptr_t;

    fn isl_basic_map_equate(bmap: uintptr_t, type1: DimType, pos1: i32, type2: DimType, pos2: i32) -> uintptr_t;

    fn isl_basic_map_drop_constraints_not_involving_dims(bmap: uintptr_t, type_: DimType, first: u32, n: u32) -> uintptr_t;

    fn isl_basic_map_insert_dims(bmap: uintptr_t, type_: DimType, pos: u32, n: u32) -> uintptr_t;

    fn isl_basic_map_lexmax(bmap: uintptr_t) -> uintptr_t;

    fn isl_basic_map_set_tuple_id(bmap: uintptr_t, type_: DimType, id: uintptr_t) -> uintptr_t;

    fn isl_basic_map_is_single_valued(bmap: uintptr_t) -> i32;

    fn isl_basic_map_dump(bmap: uintptr_t);

    fn isl_basic_map_dim(bmap: uintptr_t, type_: DimType) -> i32;

    fn isl_basic_map_lexmin_pw_multi_aff(bmap: uintptr_t) -> uintptr_t;

    fn isl_basic_map_total_dim(bmap: uintptr_t) -> i32;

    fn isl_basic_map_can_uncurry(bmap: uintptr_t) -> i32;

    fn isl_basic_map_sample(bmap: uintptr_t) -> uintptr_t;

    fn isl_basic_map_align_params(bmap: uintptr_t, model: uintptr_t) -> uintptr_t;

    fn isl_basic_map_has_dim_id(bmap: uintptr_t, type_: DimType, pos: u32) -> i32;

}

impl Clone for BasicMap {
    fn clone(&self) -> BasicMap {
        self.copy()
    }
}

impl PartialEq for BasicMap {
    fn eq(&self, other: &Self) -> bool {
        self.is_equal(other)
    }
}

impl Eq for BasicMap {
}

impl BasicMap {
    /// Wraps `isl_basic_map_deltas_map`.
    pub fn deltas_map(self) -> BasicMap {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let mut bmap = bmap;
        bmap.do_not_free_on_drop();
        let bmap = bmap.ptr;
        let isl_rs_result = unsafe { isl_basic_map_deltas_map(bmap) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = BasicMap { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_domain_product`.
    pub fn domain_product(self, bmap2: BasicMap) -> BasicMap {
        let context_for_error_message = self.get_ctx();
        let bmap1 = self;
        let mut bmap1 = bmap1;
        bmap1.do_not_free_on_drop();
        let bmap1 = bmap1.ptr;
        let mut bmap2 = bmap2;
        bmap2.do_not_free_on_drop();
        let bmap2 = bmap2.ptr;
        let isl_rs_result = unsafe { isl_basic_map_domain_product(bmap1, bmap2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = BasicMap { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_set_tuple_name`.
    pub fn set_tuple_name(self, type_: DimType, s: &str) -> BasicMap {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let mut bmap = bmap;
        bmap.do_not_free_on_drop();
        let bmap = bmap.ptr;
        let s = CString::new(s).unwrap();
        let s = s.as_ptr();
        let isl_rs_result = unsafe { isl_basic_map_set_tuple_name(bmap, type_, s) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = BasicMap { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_intersect_range`.
    pub fn intersect_range(self, bset: BasicSet) -> BasicMap {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let mut bmap = bmap;
        bmap.do_not_free_on_drop();
        let bmap = bmap.ptr;
        let mut bset = bset;
        bset.do_not_free_on_drop();
        let bset = bset.ptr;
        let isl_rs_result = unsafe { isl_basic_map_intersect_range(bmap, bset) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = BasicMap { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_is_empty`.
    pub fn is_empty(&self) -> bool {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let bmap = bmap.ptr;
        let isl_rs_result = unsafe { isl_basic_map_is_empty(bmap) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error: {}", context_for_error_message.last_error_msg()),
        };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_intersect_domain`.
    pub fn intersect_domain(self, bset: BasicSet) -> BasicMap {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let mut bmap = bmap;
        bmap.do_not_free_on_drop();
        let bmap = bmap.ptr;
        let mut bset = bset;
        bset.do_not_free_on_drop();
        let bset = bset.ptr;
        let isl_rs_result = unsafe { isl_basic_map_intersect_domain(bmap, bset) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = BasicMap { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_from_multi_aff`.
    pub fn from_multi_aff(maff: MultiAff) -> BasicMap {
        let mut maff = maff;
        maff.do_not_free_on_drop();
        let maff = maff.ptr;
        let isl_rs_result = unsafe { isl_basic_map_from_multi_aff(maff) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = BasicMap { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_can_curry`.
    pub fn can_curry(&self) -> bool {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let bmap = bmap.ptr;
        let isl_rs_result = unsafe { isl_basic_map_can_curry(bmap) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error: {}", context_for_error_message.last_error_msg()),
        };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_is_equal`.
    pub fn is_equal(&self, bmap2: &BasicMap) -> bool {
        let context_for_error_message = self.get_ctx();
        let bmap1 = self;
        let bmap1 = bmap1.ptr;
        let bmap2 = bmap2.ptr;
        let isl_rs_result = unsafe { isl_basic_map_is_equal(bmap1, bmap2) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error: {}", context_for_error_message.last_error_msg()),
        };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_gist`.
    pub fn gist(self, context: BasicMap) -> BasicMap {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let mut bmap = bmap;
        bmap.do_not_free_on_drop();
        let bmap = bmap.ptr;
        let mut context = context;
        context.do_not_free_on_drop();
        let context = context.ptr;
        let isl_rs_result = unsafe { isl_basic_map_gist(bmap, context) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = BasicMap { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_to_list`.
    pub fn to_list(self) -> BasicMapList {
        let context_for_error_message = self.get_ctx();
        let el = self;
        let mut el = el;
        el.do_not_free_on_drop();
        let el = el.ptr;
        let isl_rs_result = unsafe { isl_basic_map_to_list(el) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = BasicMapList { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_is_disjoint`.
    pub fn is_disjoint(&self, bmap2: &BasicMap) -> bool {
        let context_for_error_message = self.get_ctx();
        let bmap1 = self;
        let bmap1 = bmap1.ptr;
        let bmap2 = bmap2.ptr;
        let isl_rs_result = unsafe { isl_basic_map_is_disjoint(bmap1, bmap2) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error: {}", context_for_error_message.last_error_msg()),
        };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_free`.
    pub fn free(self) -> BasicMap {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let mut bmap = bmap;
        bmap.do_not_free_on_drop();
        let bmap = bmap.ptr;
        let isl_rs_result = unsafe { isl_basic_map_free(bmap) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = BasicMap { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_order_gt`.
    pub fn order_gt(self, type1: DimType, pos1: i32, type2: DimType, pos2: i32) -> BasicMap {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let mut bmap = bmap;
        bmap.do_not_free_on_drop();
        let bmap = bmap.ptr;
        let isl_rs_result = unsafe { isl_basic_map_order_gt(bmap, type1, pos1, type2, pos2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = BasicMap { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_is_rational`.
    pub fn is_rational(&self) -> bool {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let bmap = bmap.ptr;
        let isl_rs_result = unsafe { isl_basic_map_is_rational(bmap) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error: {}", context_for_error_message.last_error_msg()),
        };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_from_constraint`.
    pub fn from_constraint(constraint: Constraint) -> BasicMap {
        let mut constraint = constraint;
        constraint.do_not_free_on_drop();
        let constraint = constraint.ptr;
        let isl_rs_result = unsafe { isl_basic_map_from_constraint(constraint) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = BasicMap { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_identity`.
    pub fn identity(space: Space) -> BasicMap {
        let mut space = space;
        space.do_not_free_on_drop();
        let space = space.ptr;
        let isl_rs_result = unsafe { isl_basic_map_identity(space) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = BasicMap { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_from_domain_and_range`.
    pub fn from_domain_and_range(domain: BasicSet, range: BasicSet) -> BasicMap {
        let mut domain = domain;
        domain.do_not_free_on_drop();
        let domain = domain.ptr;
        let mut range = range;
        range.do_not_free_on_drop();
        let range = range.ptr;
        let isl_rs_result = unsafe { isl_basic_map_from_domain_and_range(domain, range) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = BasicMap { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_reverse`.
    pub fn reverse(self) -> BasicMap {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let mut bmap = bmap;
        bmap.do_not_free_on_drop();
        let bmap = bmap.ptr;
        let isl_rs_result = unsafe { isl_basic_map_reverse(bmap) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = BasicMap { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_product`.
    pub fn product(self, bmap2: BasicMap) -> BasicMap {
        let context_for_error_message = self.get_ctx();
        let bmap1 = self;
        let mut bmap1 = bmap1;
        bmap1.do_not_free_on_drop();
        let bmap1 = bmap1.ptr;
        let mut bmap2 = bmap2;
        bmap2.do_not_free_on_drop();
        let bmap2 = bmap2.ptr;
        let isl_rs_result = unsafe { isl_basic_map_product(bmap1, bmap2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = BasicMap { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_fix_si`.
    pub fn fix_si(self, type_: DimType, pos: u32, value: i32) -> BasicMap {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let mut bmap = bmap;
        bmap.do_not_free_on_drop();
        let bmap = bmap.ptr;
        let isl_rs_result = unsafe { isl_basic_map_fix_si(bmap, type_, pos, value) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = BasicMap { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_set_dim_name`.
    pub fn set_dim_name(self, type_: DimType, pos: u32, s: &str) -> BasicMap {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let mut bmap = bmap;
        bmap.do_not_free_on_drop();
        let bmap = bmap.ptr;
        let s = CString::new(s).unwrap();
        let s = s.as_ptr();
        let isl_rs_result = unsafe { isl_basic_map_set_dim_name(bmap, type_, pos, s) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = BasicMap { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_is_strict_subset`.
    pub fn is_strict_subset(&self, bmap2: &BasicMap) -> bool {
        let context_for_error_message = self.get_ctx();
        let bmap1 = self;
        let bmap1 = bmap1.ptr;
        let bmap2 = bmap2.ptr;
        let isl_rs_result = unsafe { isl_basic_map_is_strict_subset(bmap1, bmap2) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error: {}", context_for_error_message.last_error_msg()),
        };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_find_dim_by_name`.
    pub fn find_dim_by_name(&self, type_: DimType, name: &str) -> i32 {
        let bmap = self;
        let bmap = bmap.ptr;
        let name = CString::new(name).unwrap();
        let name = name.as_ptr();
        let isl_rs_result = unsafe { isl_basic_map_find_dim_by_name(bmap, type_, name) };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_copy`.
    pub fn copy(&self) -> BasicMap {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let bmap = bmap.ptr;
        let isl_rs_result = unsafe { isl_basic_map_copy(bmap) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = BasicMap { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_more_at`.
    pub fn more_at(space: Space, pos: u32) -> BasicMap {
        let mut space = space;
        space.do_not_free_on_drop();
        let space = space.ptr;
        let isl_rs_result = unsafe { isl_basic_map_more_at(space, pos) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = BasicMap { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_inequalities_matrix`.
    pub fn inequalities_matrix(&self, c1: DimType, c2: DimType, c3: DimType, c4: DimType, c5: DimType) -> Mat {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let bmap = bmap.ptr;
        let isl_rs_result = unsafe { isl_basic_map_inequalities_matrix(bmap, c1, c2, c3, c4, c5) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Mat { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_intersect`.
    pub fn intersect(self, bmap2: BasicMap) -> BasicMap {
        let context_for_error_message = self.get_ctx();
        let bmap1 = self;
        let mut bmap1 = bmap1;
        bmap1.do_not_free_on_drop();
        let bmap1 = bmap1.ptr;
        let mut bmap2 = bmap2;
        bmap2.do_not_free_on_drop();
        let bmap2 = bmap2.ptr;
        let isl_rs_result = unsafe { isl_basic_map_intersect(bmap1, bmap2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = BasicMap { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_image_is_bounded`.
    pub fn image_is_bounded(&self) -> bool {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let bmap = bmap.ptr;
        let isl_rs_result = unsafe { isl_basic_map_image_is_bounded(bmap) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error: {}", context_for_error_message.last_error_msg()),
        };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_order_ge`.
    pub fn order_ge(self, type1: DimType, pos1: i32, type2: DimType, pos2: i32) -> BasicMap {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let mut bmap = bmap;
        bmap.do_not_free_on_drop();
        let bmap = bmap.ptr;
        let isl_rs_result = unsafe { isl_basic_map_order_ge(bmap, type1, pos1, type2, pos2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = BasicMap { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_foreach_constraint`.
    pub fn foreach_constraint<fn_>(&self, mut fn_: fn_, user: *mut c_void) -> Stat
    where fn_: FnMut(&Constraint) -> Stat,
    {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let bmap = bmap.ptr;
        extern "C" fn fn__wrapper<fn_>(arg_0: uintptr_t, arg_1: *mut c_void) -> Stat {
            let fn_: *mut fn_ = unsafe { core::mem::transmute(arg_1) };
            let fn_: &mut fn_ = unsafe { &mut *fn_ };
            todo!()
        }

        let user: *mut fn_ = &mut fn_;
        let user: *mut c_void = unsafe { core::mem::transmute(user) };
        let fn_ = fn__wrapper::<fn_>;
        let isl_rs_result = unsafe { isl_basic_map_foreach_constraint(bmap, fn_, user) };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_range_map`.
    pub fn range_map(self) -> BasicMap {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let mut bmap = bmap;
        bmap.do_not_free_on_drop();
        let bmap = bmap.ptr;
        let isl_rs_result = unsafe { isl_basic_map_range_map(bmap) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = BasicMap { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_lexmin`.
    pub fn lexmin(self) -> Map {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let mut bmap = bmap;
        bmap.do_not_free_on_drop();
        let bmap = bmap.ptr;
        let isl_rs_result = unsafe { isl_basic_map_lexmin(bmap) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Map { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_from_aff_list`.
    pub fn from_aff_list(domain_space: Space, list: AffList) -> BasicMap {
        let mut domain_space = domain_space;
        domain_space.do_not_free_on_drop();
        let domain_space = domain_space.ptr;
        let mut list = list;
        list.do_not_free_on_drop();
        let list = list.ptr;
        let isl_rs_result = unsafe { isl_basic_map_from_aff_list(domain_space, list) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = BasicMap { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_uncurry`.
    pub fn uncurry(self) -> BasicMap {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let mut bmap = bmap;
        bmap.do_not_free_on_drop();
        let bmap = bmap.ptr;
        let isl_rs_result = unsafe { isl_basic_map_uncurry(bmap) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = BasicMap { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_flatten`.
    pub fn flatten(self) -> BasicMap {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let mut bmap = bmap;
        bmap.do_not_free_on_drop();
        let bmap = bmap.ptr;
        let isl_rs_result = unsafe { isl_basic_map_flatten(bmap) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = BasicMap { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_project_out`.
    pub fn project_out(self, type_: DimType, first: u32, n: u32) -> BasicMap {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let mut bmap = bmap;
        bmap.do_not_free_on_drop();
        let bmap = bmap.ptr;
        let isl_rs_result = unsafe { isl_basic_map_project_out(bmap, type_, first, n) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = BasicMap { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_preimage_domain_multi_aff`.
    pub fn preimage_domain_multi_aff(self, ma: MultiAff) -> BasicMap {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let mut bmap = bmap;
        bmap.do_not_free_on_drop();
        let bmap = bmap.ptr;
        let mut ma = ma;
        ma.do_not_free_on_drop();
        let ma = ma.ptr;
        let isl_rs_result = unsafe { isl_basic_map_preimage_domain_multi_aff(bmap, ma) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = BasicMap { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_universe`.
    pub fn universe(space: Space) -> BasicMap {
        let mut space = space;
        space.do_not_free_on_drop();
        let space = space.ptr;
        let isl_rs_result = unsafe { isl_basic_map_universe(space) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = BasicMap { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_upper_bound_si`.
    pub fn upper_bound_si(self, type_: DimType, pos: u32, value: i32) -> BasicMap {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let mut bmap = bmap;
        bmap.do_not_free_on_drop();
        let bmap = bmap.ptr;
        let isl_rs_result = unsafe { isl_basic_map_upper_bound_si(bmap, type_, pos, value) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = BasicMap { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_remove_divs`.
    pub fn remove_divs(self) -> BasicMap {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let mut bmap = bmap;
        bmap.do_not_free_on_drop();
        let bmap = bmap.ptr;
        let isl_rs_result = unsafe { isl_basic_map_remove_divs(bmap) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = BasicMap { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_is_universe`.
    pub fn is_universe(&self) -> bool {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let bmap = bmap.ptr;
        let isl_rs_result = unsafe { isl_basic_map_is_universe(bmap) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error: {}", context_for_error_message.last_error_msg()),
        };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_apply_domain`.
    pub fn apply_domain(self, bmap2: BasicMap) -> BasicMap {
        let context_for_error_message = self.get_ctx();
        let bmap1 = self;
        let mut bmap1 = bmap1;
        bmap1.do_not_free_on_drop();
        let bmap1 = bmap1.ptr;
        let mut bmap2 = bmap2;
        bmap2.do_not_free_on_drop();
        let bmap2 = bmap2.ptr;
        let isl_rs_result = unsafe { isl_basic_map_apply_domain(bmap1, bmap2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = BasicMap { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_get_constraint_list`.
    pub fn get_constraint_list(&self) -> ConstraintList {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let bmap = bmap.ptr;
        let isl_rs_result = unsafe { isl_basic_map_get_constraint_list(bmap) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = ConstraintList { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_from_range`.
    pub fn from_range(bset: BasicSet) -> BasicMap {
        let mut bset = bset;
        bset.do_not_free_on_drop();
        let bset = bset.ptr;
        let isl_rs_result = unsafe { isl_basic_map_from_range(bset) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = BasicMap { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_can_zip`.
    pub fn can_zip(&self) -> bool {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let bmap = bmap.ptr;
        let isl_rs_result = unsafe { isl_basic_map_can_zip(bmap) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error: {}", context_for_error_message.last_error_msg()),
        };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_affine_hull`.
    pub fn affine_hull(self) -> BasicMap {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let mut bmap = bmap;
        bmap.do_not_free_on_drop();
        let bmap = bmap.ptr;
        let isl_rs_result = unsafe { isl_basic_map_affine_hull(bmap) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = BasicMap { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_flatten_domain`.
    pub fn flatten_domain(self) -> BasicMap {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let mut bmap = bmap;
        bmap.do_not_free_on_drop();
        let bmap = bmap.ptr;
        let isl_rs_result = unsafe { isl_basic_map_flatten_domain(bmap) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = BasicMap { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_remove_dims`.
    pub fn remove_dims(self, type_: DimType, first: u32, n: u32) -> BasicMap {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let mut bmap = bmap;
        bmap.do_not_free_on_drop();
        let bmap = bmap.ptr;
        let isl_rs_result = unsafe { isl_basic_map_remove_dims(bmap, type_, first, n) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = BasicMap { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_from_domain`.
    pub fn from_domain(bset: BasicSet) -> BasicMap {
        let mut bset = bset;
        bset.do_not_free_on_drop();
        let bset = bset.ptr;
        let isl_rs_result = unsafe { isl_basic_map_from_domain(bset) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = BasicMap { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_get_space`.
    pub fn get_space(&self) -> Space {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let bmap = bmap.ptr;
        let isl_rs_result = unsafe { isl_basic_map_get_space(bmap) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Space { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_empty`.
    pub fn empty(space: Space) -> BasicMap {
        let mut space = space;
        space.do_not_free_on_drop();
        let space = space.ptr;
        let isl_rs_result = unsafe { isl_basic_map_empty(space) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = BasicMap { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_from_constraint_matrices`.
    pub fn from_constraint_matrices(space: Space, eq: Mat, ineq: Mat, c1: DimType, c2: DimType, c3: DimType, c4: DimType, c5: DimType) -> BasicMap {
        let mut space = space;
        space.do_not_free_on_drop();
        let space = space.ptr;
        let mut eq = eq;
        eq.do_not_free_on_drop();
        let eq = eq.ptr;
        let mut ineq = ineq;
        ineq.do_not_free_on_drop();
        let ineq = ineq.ptr;
        let isl_rs_result = unsafe { isl_basic_map_from_constraint_matrices(space, eq, ineq, c1, c2, c3, c4, c5) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = BasicMap { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_is_subset`.
    pub fn is_subset(&self, bmap2: &BasicMap) -> bool {
        let context_for_error_message = self.get_ctx();
        let bmap1 = self;
        let bmap1 = bmap1.ptr;
        let bmap2 = bmap2.ptr;
        let isl_rs_result = unsafe { isl_basic_map_is_subset(bmap1, bmap2) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error: {}", context_for_error_message.last_error_msg()),
        };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_zip`.
    pub fn zip(self) -> BasicMap {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let mut bmap = bmap;
        bmap.do_not_free_on_drop();
        let bmap = bmap.ptr;
        let isl_rs_result = unsafe { isl_basic_map_zip(bmap) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = BasicMap { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_flat_product`.
    pub fn flat_product(self, bmap2: BasicMap) -> BasicMap {
        let context_for_error_message = self.get_ctx();
        let bmap1 = self;
        let mut bmap1 = bmap1;
        bmap1.do_not_free_on_drop();
        let bmap1 = bmap1.ptr;
        let mut bmap2 = bmap2;
        bmap2.do_not_free_on_drop();
        let bmap2 = bmap2.ptr;
        let isl_rs_result = unsafe { isl_basic_map_flat_product(bmap1, bmap2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = BasicMap { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_plain_get_val_if_fixed`.
    pub fn plain_get_val_if_fixed(&self, type_: DimType, pos: u32) -> Val {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let bmap = bmap.ptr;
        let isl_rs_result = unsafe { isl_basic_map_plain_get_val_if_fixed(bmap, type_, pos) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Val { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_to_str`.
    pub fn to_str(&self) -> &str {
        let bmap = self;
        let bmap = bmap.ptr;
        let isl_rs_result = unsafe { isl_basic_map_to_str(bmap) };
        let isl_rs_result = unsafe { CStr::from_ptr(isl_rs_result) };
        let isl_rs_result = isl_rs_result.to_str().unwrap();
        isl_rs_result
    }

    /// Wraps `isl_basic_map_add_constraint`.
    pub fn add_constraint(self, constraint: Constraint) -> BasicMap {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let mut bmap = bmap;
        bmap.do_not_free_on_drop();
        let bmap = bmap.ptr;
        let mut constraint = constraint;
        constraint.do_not_free_on_drop();
        let constraint = constraint.ptr;
        let isl_rs_result = unsafe { isl_basic_map_add_constraint(bmap, constraint) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = BasicMap { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_n_constraint`.
    pub fn n_constraint(&self) -> i32 {
        let bmap = self;
        let bmap = bmap.ptr;
        let isl_rs_result = unsafe { isl_basic_map_n_constraint(bmap) };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_read_from_str`.
    pub fn read_from_str(ctx: &Context, str_: &str) -> BasicMap {
        let ctx = ctx.ptr;
        let str_ = CString::new(str_).unwrap();
        let str_ = str_.as_ptr();
        let isl_rs_result = unsafe { isl_basic_map_read_from_str(ctx, str_) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = BasicMap { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_eliminate`.
    pub fn eliminate(self, type_: DimType, first: u32, n: u32) -> BasicMap {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let mut bmap = bmap;
        bmap.do_not_free_on_drop();
        let bmap = bmap.ptr;
        let isl_rs_result = unsafe { isl_basic_map_eliminate(bmap, type_, first, n) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = BasicMap { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_get_div`.
    pub fn get_div(&self, pos: i32) -> Aff {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let bmap = bmap.ptr;
        let isl_rs_result = unsafe { isl_basic_map_get_div(bmap, pos) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Aff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_apply_range`.
    pub fn apply_range(self, bmap2: BasicMap) -> BasicMap {
        let context_for_error_message = self.get_ctx();
        let bmap1 = self;
        let mut bmap1 = bmap1;
        bmap1.do_not_free_on_drop();
        let bmap1 = bmap1.ptr;
        let mut bmap2 = bmap2;
        bmap2.do_not_free_on_drop();
        let bmap2 = bmap2.ptr;
        let isl_rs_result = unsafe { isl_basic_map_apply_range(bmap1, bmap2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = BasicMap { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_sum`.
    pub fn sum(self, bmap2: BasicMap) -> BasicMap {
        let context_for_error_message = self.get_ctx();
        let bmap1 = self;
        let mut bmap1 = bmap1;
        bmap1.do_not_free_on_drop();
        let bmap1 = bmap1.ptr;
        let mut bmap2 = bmap2;
        bmap2.do_not_free_on_drop();
        let bmap2 = bmap2.ptr;
        let isl_rs_result = unsafe { isl_basic_map_sum(bmap1, bmap2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = BasicMap { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_remove_divs_involving_dims`.
    pub fn remove_divs_involving_dims(self, type_: DimType, first: u32, n: u32) -> BasicMap {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let mut bmap = bmap;
        bmap.do_not_free_on_drop();
        let bmap = bmap.ptr;
        let isl_rs_result = unsafe { isl_basic_map_remove_divs_involving_dims(bmap, type_, first, n) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = BasicMap { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_plain_is_universe`.
    pub fn plain_is_universe(&self) -> bool {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let bmap = bmap.ptr;
        let isl_rs_result = unsafe { isl_basic_map_plain_is_universe(bmap) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error: {}", context_for_error_message.last_error_msg()),
        };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_domain_map`.
    pub fn domain_map(self) -> BasicMap {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let mut bmap = bmap;
        bmap.do_not_free_on_drop();
        let bmap = bmap.ptr;
        let isl_rs_result = unsafe { isl_basic_map_domain_map(bmap) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = BasicMap { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_flat_range_product`.
    pub fn flat_range_product(self, bmap2: BasicMap) -> BasicMap {
        let context_for_error_message = self.get_ctx();
        let bmap1 = self;
        let mut bmap1 = bmap1;
        bmap1.do_not_free_on_drop();
        let bmap1 = bmap1.ptr;
        let mut bmap2 = bmap2;
        bmap2.do_not_free_on_drop();
        let bmap2 = bmap2.ptr;
        let isl_rs_result = unsafe { isl_basic_map_flat_range_product(bmap1, bmap2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = BasicMap { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_compute_divs`.
    pub fn compute_divs(self) -> Map {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let mut bmap = bmap;
        bmap.do_not_free_on_drop();
        let bmap = bmap.ptr;
        let isl_rs_result = unsafe { isl_basic_map_compute_divs(bmap) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Map { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_equal`.
    pub fn equal(space: Space, n_equal: u32) -> BasicMap {
        let mut space = space;
        space.do_not_free_on_drop();
        let space = space.ptr;
        let isl_rs_result = unsafe { isl_basic_map_equal(space, n_equal) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = BasicMap { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_move_dims`.
    pub fn move_dims(self, dst_type: DimType, dst_pos: u32, src_type: DimType, src_pos: u32, n: u32) -> BasicMap {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let mut bmap = bmap;
        bmap.do_not_free_on_drop();
        let bmap = bmap.ptr;
        let isl_rs_result = unsafe { isl_basic_map_move_dims(bmap, dst_type, dst_pos, src_type, src_pos, n) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = BasicMap { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_neg`.
    pub fn neg(self) -> BasicMap {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let mut bmap = bmap;
        bmap.do_not_free_on_drop();
        let bmap = bmap.ptr;
        let isl_rs_result = unsafe { isl_basic_map_neg(bmap) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = BasicMap { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_wrap`.
    pub fn wrap(self) -> BasicSet {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let mut bmap = bmap;
        bmap.do_not_free_on_drop();
        let bmap = bmap.ptr;
        let isl_rs_result = unsafe { isl_basic_map_wrap(bmap) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = BasicSet { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_preimage_range_multi_aff`.
    pub fn preimage_range_multi_aff(self, ma: MultiAff) -> BasicMap {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let mut bmap = bmap;
        bmap.do_not_free_on_drop();
        let bmap = bmap.ptr;
        let mut ma = ma;
        ma.do_not_free_on_drop();
        let ma = ma.ptr;
        let isl_rs_result = unsafe { isl_basic_map_preimage_range_multi_aff(bmap, ma) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = BasicMap { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_range`.
    pub fn range(self) -> BasicSet {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let mut bmap = bmap;
        bmap.do_not_free_on_drop();
        let bmap = bmap.ptr;
        let isl_rs_result = unsafe { isl_basic_map_range(bmap) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = BasicSet { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_curry`.
    pub fn curry(self) -> BasicMap {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let mut bmap = bmap;
        bmap.do_not_free_on_drop();
        let bmap = bmap.ptr;
        let isl_rs_result = unsafe { isl_basic_map_curry(bmap) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = BasicMap { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_less_at`.
    pub fn less_at(space: Space, pos: u32) -> BasicMap {
        let mut space = space;
        space.do_not_free_on_drop();
        let space = space.ptr;
        let isl_rs_result = unsafe { isl_basic_map_less_at(space, pos) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = BasicMap { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_gist_domain`.
    pub fn gist_domain(self, context: BasicSet) -> BasicMap {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let mut bmap = bmap;
        bmap.do_not_free_on_drop();
        let bmap = bmap.ptr;
        let mut context = context;
        context.do_not_free_on_drop();
        let context = context.ptr;
        let isl_rs_result = unsafe { isl_basic_map_gist_domain(bmap, context) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = BasicMap { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_deltas`.
    pub fn deltas(self) -> BasicSet {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let mut bmap = bmap;
        bmap.do_not_free_on_drop();
        let bmap = bmap.ptr;
        let isl_rs_result = unsafe { isl_basic_map_deltas(bmap) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = BasicSet { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_union`.
    pub fn union(self, bmap2: BasicMap) -> Map {
        let context_for_error_message = self.get_ctx();
        let bmap1 = self;
        let mut bmap1 = bmap1;
        bmap1.do_not_free_on_drop();
        let bmap1 = bmap1.ptr;
        let mut bmap2 = bmap2;
        bmap2.do_not_free_on_drop();
        let bmap2 = bmap2.ptr;
        let isl_rs_result = unsafe { isl_basic_map_union(bmap1, bmap2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Map { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_nat_universe`.
    pub fn nat_universe(space: Space) -> BasicMap {
        let mut space = space;
        space.do_not_free_on_drop();
        let space = space.ptr;
        let isl_rs_result = unsafe { isl_basic_map_nat_universe(space) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = BasicMap { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_add_dims`.
    pub fn add_dims(self, type_: DimType, n: u32) -> BasicMap {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let mut bmap = bmap;
        bmap.do_not_free_on_drop();
        let bmap = bmap.ptr;
        let isl_rs_result = unsafe { isl_basic_map_add_dims(bmap, type_, n) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = BasicMap { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_flatten_range`.
    pub fn flatten_range(self) -> BasicMap {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let mut bmap = bmap;
        bmap.do_not_free_on_drop();
        let bmap = bmap.ptr;
        let isl_rs_result = unsafe { isl_basic_map_flatten_range(bmap) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = BasicMap { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_equalities_matrix`.
    pub fn equalities_matrix(&self, c1: DimType, c2: DimType, c3: DimType, c4: DimType, c5: DimType) -> Mat {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let bmap = bmap.ptr;
        let isl_rs_result = unsafe { isl_basic_map_equalities_matrix(bmap, c1, c2, c3, c4, c5) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Mat { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_remove_redundancies`.
    pub fn remove_redundancies(self) -> BasicMap {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let mut bmap = bmap;
        bmap.do_not_free_on_drop();
        let bmap = bmap.ptr;
        let isl_rs_result = unsafe { isl_basic_map_remove_redundancies(bmap) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = BasicMap { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_fix_val`.
    pub fn fix_val(self, type_: DimType, pos: u32, v: Val) -> BasicMap {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let mut bmap = bmap;
        bmap.do_not_free_on_drop();
        let bmap = bmap.ptr;
        let mut v = v;
        v.do_not_free_on_drop();
        let v = v.ptr;
        let isl_rs_result = unsafe { isl_basic_map_fix_val(bmap, type_, pos, v) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = BasicMap { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_involves_dims`.
    pub fn involves_dims(&self, type_: DimType, first: u32, n: u32) -> bool {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let bmap = bmap.ptr;
        let isl_rs_result = unsafe { isl_basic_map_involves_dims(bmap, type_, first, n) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error: {}", context_for_error_message.last_error_msg()),
        };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_get_local_space`.
    pub fn get_local_space(&self) -> LocalSpace {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let bmap = bmap.ptr;
        let isl_rs_result = unsafe { isl_basic_map_get_local_space(bmap) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = LocalSpace { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_domain`.
    pub fn domain(self) -> BasicSet {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let mut bmap = bmap;
        bmap.do_not_free_on_drop();
        let bmap = bmap.ptr;
        let isl_rs_result = unsafe { isl_basic_map_domain(bmap) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = BasicSet { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_get_ctx`.
    pub fn get_ctx(&self) -> Context {
        let bmap = self;
        let bmap = bmap.ptr;
        let isl_rs_result = unsafe { isl_basic_map_get_ctx(bmap) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = Context { ptr: isl_rs_result, should_free_on_drop: true };
        let mut isl_rs_result = isl_rs_result;
        isl_rs_result.do_not_free_on_drop();
        isl_rs_result
    }

    /// Wraps `isl_basic_map_range_product`.
    pub fn range_product(self, bmap2: BasicMap) -> BasicMap {
        let context_for_error_message = self.get_ctx();
        let bmap1 = self;
        let mut bmap1 = bmap1;
        bmap1.do_not_free_on_drop();
        let bmap1 = bmap1.ptr;
        let mut bmap2 = bmap2;
        bmap2.do_not_free_on_drop();
        let bmap2 = bmap2.ptr;
        let isl_rs_result = unsafe { isl_basic_map_range_product(bmap1, bmap2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = BasicMap { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_from_aff`.
    pub fn from_aff(aff: Aff) -> BasicMap {
        let mut aff = aff;
        aff.do_not_free_on_drop();
        let aff = aff.ptr;
        let isl_rs_result = unsafe { isl_basic_map_from_aff(aff) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = BasicMap { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_get_tuple_name`.
    pub fn get_tuple_name(&self, type_: DimType) -> &str {
        let bmap = self;
        let bmap = bmap.ptr;
        let isl_rs_result = unsafe { isl_basic_map_get_tuple_name(bmap, type_) };
        let isl_rs_result = unsafe { CStr::from_ptr(isl_rs_result) };
        let isl_rs_result = isl_rs_result.to_str().unwrap();
        isl_rs_result
    }

    /// Wraps `isl_basic_map_plain_is_empty`.
    pub fn plain_is_empty(&self) -> bool {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let bmap = bmap.ptr;
        let isl_rs_result = unsafe { isl_basic_map_plain_is_empty(bmap) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error: {}", context_for_error_message.last_error_msg()),
        };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_get_dim_name`.
    pub fn get_dim_name(&self, type_: DimType, pos: u32) -> &str {
        let bmap = self;
        let bmap = bmap.ptr;
        let isl_rs_result = unsafe { isl_basic_map_get_dim_name(bmap, type_, pos) };
        let isl_rs_result = unsafe { CStr::from_ptr(isl_rs_result) };
        let isl_rs_result = isl_rs_result.to_str().unwrap();
        isl_rs_result
    }

    /// Wraps `isl_basic_map_drop_unused_params`.
    pub fn drop_unused_params(self) -> BasicMap {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let mut bmap = bmap;
        bmap.do_not_free_on_drop();
        let bmap = bmap.ptr;
        let isl_rs_result = unsafe { isl_basic_map_drop_unused_params(bmap) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = BasicMap { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_lower_bound_si`.
    pub fn lower_bound_si(self, type_: DimType, pos: u32, value: i32) -> BasicMap {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let mut bmap = bmap;
        bmap.do_not_free_on_drop();
        let bmap = bmap.ptr;
        let isl_rs_result = unsafe { isl_basic_map_lower_bound_si(bmap, type_, pos, value) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = BasicMap { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_drop_constraints_involving_dims`.
    pub fn drop_constraints_involving_dims(self, type_: DimType, first: u32, n: u32) -> BasicMap {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let mut bmap = bmap;
        bmap.do_not_free_on_drop();
        let bmap = bmap.ptr;
        let isl_rs_result = unsafe { isl_basic_map_drop_constraints_involving_dims(bmap, type_, first, n) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = BasicMap { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_detect_equalities`.
    pub fn detect_equalities(self) -> BasicMap {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let mut bmap = bmap;
        bmap.do_not_free_on_drop();
        let bmap = bmap.ptr;
        let isl_rs_result = unsafe { isl_basic_map_detect_equalities(bmap) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = BasicMap { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_equate`.
    pub fn equate(self, type1: DimType, pos1: i32, type2: DimType, pos2: i32) -> BasicMap {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let mut bmap = bmap;
        bmap.do_not_free_on_drop();
        let bmap = bmap.ptr;
        let isl_rs_result = unsafe { isl_basic_map_equate(bmap, type1, pos1, type2, pos2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = BasicMap { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_drop_constraints_not_involving_dims`.
    pub fn drop_constraints_not_involving_dims(self, type_: DimType, first: u32, n: u32) -> BasicMap {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let mut bmap = bmap;
        bmap.do_not_free_on_drop();
        let bmap = bmap.ptr;
        let isl_rs_result = unsafe { isl_basic_map_drop_constraints_not_involving_dims(bmap, type_, first, n) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = BasicMap { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_insert_dims`.
    pub fn insert_dims(self, type_: DimType, pos: u32, n: u32) -> BasicMap {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let mut bmap = bmap;
        bmap.do_not_free_on_drop();
        let bmap = bmap.ptr;
        let isl_rs_result = unsafe { isl_basic_map_insert_dims(bmap, type_, pos, n) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = BasicMap { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_lexmax`.
    pub fn lexmax(self) -> Map {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let mut bmap = bmap;
        bmap.do_not_free_on_drop();
        let bmap = bmap.ptr;
        let isl_rs_result = unsafe { isl_basic_map_lexmax(bmap) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Map { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_set_tuple_id`.
    pub fn set_tuple_id(self, type_: DimType, id: Id) -> BasicMap {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let mut bmap = bmap;
        bmap.do_not_free_on_drop();
        let bmap = bmap.ptr;
        let mut id = id;
        id.do_not_free_on_drop();
        let id = id.ptr;
        let isl_rs_result = unsafe { isl_basic_map_set_tuple_id(bmap, type_, id) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = BasicMap { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_is_single_valued`.
    pub fn is_single_valued(&self) -> bool {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let bmap = bmap.ptr;
        let isl_rs_result = unsafe { isl_basic_map_is_single_valued(bmap) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error: {}", context_for_error_message.last_error_msg()),
        };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_dump`.
    pub fn dump(&self) {
        let bmap = self;
        let bmap = bmap.ptr;
        let isl_rs_result = unsafe { isl_basic_map_dump(bmap) };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_dim`.
    pub fn dim(&self, type_: DimType) -> i32 {
        let bmap = self;
        let bmap = bmap.ptr;
        let isl_rs_result = unsafe { isl_basic_map_dim(bmap, type_) };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_lexmin_pw_multi_aff`.
    pub fn lexmin_pw_multi_aff(self) -> PwMultiAff {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let mut bmap = bmap;
        bmap.do_not_free_on_drop();
        let bmap = bmap.ptr;
        let isl_rs_result = unsafe { isl_basic_map_lexmin_pw_multi_aff(bmap) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwMultiAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_total_dim`.
    pub fn total_dim(&self) -> i32 {
        let bmap = self;
        let bmap = bmap.ptr;
        let isl_rs_result = unsafe { isl_basic_map_total_dim(bmap) };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_can_uncurry`.
    pub fn can_uncurry(&self) -> bool {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let bmap = bmap.ptr;
        let isl_rs_result = unsafe { isl_basic_map_can_uncurry(bmap) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error: {}", context_for_error_message.last_error_msg()),
        };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_sample`.
    pub fn sample(self) -> BasicMap {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let mut bmap = bmap;
        bmap.do_not_free_on_drop();
        let bmap = bmap.ptr;
        let isl_rs_result = unsafe { isl_basic_map_sample(bmap) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = BasicMap { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_align_params`.
    pub fn align_params(self, model: Space) -> BasicMap {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let mut bmap = bmap;
        bmap.do_not_free_on_drop();
        let bmap = bmap.ptr;
        let mut model = model;
        model.do_not_free_on_drop();
        let model = model.ptr;
        let isl_rs_result = unsafe { isl_basic_map_align_params(bmap, model) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = BasicMap { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_map_has_dim_id`.
    pub fn has_dim_id(&self, type_: DimType, pos: u32) -> bool {
        let context_for_error_message = self.get_ctx();
        let bmap = self;
        let bmap = bmap.ptr;
        let isl_rs_result = unsafe { isl_basic_map_has_dim_id(bmap, type_, pos) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error: {}", context_for_error_message.last_error_msg()),
        };
        isl_rs_result
    }

    /// Does not call isl_xxx_free() on being dropped. (For internal use only.)
    pub fn do_not_free_on_drop(&mut self) {
        self.should_free_on_drop = false;
    }
}

impl Drop for BasicMap {
    fn drop(&mut self) {
        if self.should_free_on_drop {
            unsafe { isl_basic_map_free(self.ptr); }
        }
    }
}