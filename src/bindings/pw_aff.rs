// Automatically generated by isl_bindings_generator.
// LICENSE: MIT

use libc::uintptr_t;
use std::os::raw::{c_char, c_void};
use crate::bindings::{Stat, DimType, Space, Val, Map, Set, Aff, MultiId, Id, UnionPwAff, LocalSpace, MultiAff, PwMultiAff, Context, MultiPwAff, Point, PwAffList};
use std::ffi::{CString, CStr};

/// Wraps `isl_pw_aff`.
pub struct PwAff {
    pub ptr: uintptr_t,
    pub should_free_on_drop: bool,
}

extern "C" {

    fn isl_pw_aff_plain_is_equal(pwaff1: uintptr_t, pwaff2: uintptr_t) -> i32;

    fn isl_pw_aff_get_space(pwaff: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_sub(pwaff1: uintptr_t, pwaff2: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_is_cst(pwaff: uintptr_t) -> i32;

    fn isl_pw_aff_scale_down_val(pa: uintptr_t, f: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_as_map(pa: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_nonneg_set(pwaff: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_to_str(pa: uintptr_t) -> *const c_char;

    fn isl_pw_aff_le_set(pwaff1: uintptr_t, pwaff2: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_ge_map(pa1: uintptr_t, pa2: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_alloc(set: uintptr_t, aff: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_free(pwaff: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_mul(pwaff1: uintptr_t, pwaff2: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_mod_val(pa: uintptr_t, mod_: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_ne_set(pwaff1: uintptr_t, pwaff2: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_lt_map(pa1: uintptr_t, pa2: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_val_on_domain(domain: uintptr_t, v: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_ceil(pwaff: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_bind_domain(pa: uintptr_t, tuple: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_bind_id(pa: uintptr_t, id: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_to_union_pw_aff(pa: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_gt_set(pwaff1: uintptr_t, pwaff2: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_intersect_domain(pa: uintptr_t, set: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_foreach_piece(pwaff: uintptr_t, fn_: unsafe extern "C" fn(uintptr_t, uintptr_t, *mut c_void) -> Stat, user: *mut c_void) -> Stat;

    fn isl_pw_aff_plain_cmp(pa1: uintptr_t, pa2: uintptr_t) -> i32;

    fn isl_pw_aff_union_min(pwaff1: uintptr_t, pwaff2: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_isa_aff(pa: uintptr_t) -> i32;

    fn isl_pw_aff_le_map(pa1: uintptr_t, pa2: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_nan_on_domain(ls: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_max(pwaff1: uintptr_t, pwaff2: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_find_dim_by_name(pa: uintptr_t, type_: DimType, name: *const c_char) -> i32;

    fn isl_pw_aff_intersect_domain_wrapped_range(pa: uintptr_t, set: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_from_aff(aff: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_pullback_multi_aff(pa: uintptr_t, ma: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_as_aff(pa: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_add(pwaff1: uintptr_t, pwaff2: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_non_zero_set(pwaff: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_dump(pwaff: uintptr_t);

    fn isl_pw_aff_dim(pwaff: uintptr_t, type_: DimType) -> i32;

    fn isl_pw_aff_var_on_domain(ls: uintptr_t, type_: DimType, pos: u32) -> uintptr_t;

    fn isl_pw_aff_intersect_domain_wrapped_domain(pa: uintptr_t, set: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_move_dims(pa: uintptr_t, dst_type: DimType, dst_pos: u32, src_type: DimType, src_pos: u32, n: u32) -> uintptr_t;

    fn isl_pw_aff_pullback_pw_multi_aff(pa: uintptr_t, pma: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_drop_unused_params(pa: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_tdiv_q(pa1: uintptr_t, pa2: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_floor(pwaff: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_add_dims(pwaff: uintptr_t, type_: DimType, n: u32) -> uintptr_t;

    fn isl_pw_aff_min(pwaff1: uintptr_t, pwaff2: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_gist(pwaff: uintptr_t, context: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_gt_map(pa1: uintptr_t, pa2: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_bind_domain_wrapped_domain(pa: uintptr_t, tuple: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_zero_on_domain(ls: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_set_tuple_id(pwaff: uintptr_t, type_: DimType, id: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_involves_param_id(pa: uintptr_t, id: uintptr_t) -> i32;

    fn isl_pw_aff_lt_set(pwaff1: uintptr_t, pwaff2: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_read_from_str(ctx: uintptr_t, str_: *const c_char) -> uintptr_t;

    fn isl_pw_aff_intersect_params(pa: uintptr_t, set: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_add_constant_val(pa: uintptr_t, v: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_ge_set(pwaff1: uintptr_t, pwaff2: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_gist_params(pwaff: uintptr_t, context: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_get_ctx(pwaff: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_get_hash(pa: uintptr_t) -> u32;

    fn isl_pw_aff_from_range(pwa: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_involves_nan(pa: uintptr_t) -> i32;

    fn isl_pw_aff_has_tuple_id(pa: uintptr_t, type_: DimType) -> i32;

    fn isl_pw_aff_cond(cond: uintptr_t, pwaff_true: uintptr_t, pwaff_false: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_neg(pwaff: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_pullback_multi_pw_aff(pa: uintptr_t, mpa: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_empty(space: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_every_piece(pa: uintptr_t, test: unsafe extern "C" fn(uintptr_t, uintptr_t, *mut c_void) -> i32, user: *mut c_void) -> i32;

    fn isl_pw_aff_is_equal(pa1: uintptr_t, pa2: uintptr_t) -> i32;

    fn isl_pw_aff_params(pwa: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_param_on_domain_id(domain: uintptr_t, id: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_nan_on_domain_space(space: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_insert_domain(pa: uintptr_t, domain: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_tdiv_r(pa1: uintptr_t, pa2: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_insert_dims(pwaff: uintptr_t, type_: DimType, first: u32, n: u32) -> uintptr_t;

    fn isl_pw_aff_drop_dims(pwaff: uintptr_t, type_: DimType, first: u32, n: u32) -> uintptr_t;

    fn isl_pw_aff_get_dim_name(pa: uintptr_t, type_: DimType, pos: u32) -> *const c_char;

    fn isl_pw_aff_has_dim_id(pa: uintptr_t, type_: DimType, pos: u32) -> i32;

    fn isl_pw_aff_union_add(pwaff1: uintptr_t, pwaff2: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_get_dim_id(pa: uintptr_t, type_: DimType, pos: u32) -> uintptr_t;

    fn isl_pw_aff_set_dim_id(pma: uintptr_t, type_: DimType, pos: u32, id: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_copy(pwaff: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_is_empty(pwaff: uintptr_t) -> i32;

    fn isl_pw_aff_involves_dims(pwaff: uintptr_t, type_: DimType, first: u32, n: u32) -> i32;

    fn isl_pw_aff_project_domain_on_params(pa: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_reset_user(pa: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_subtract_domain(pa: uintptr_t, set: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_coalesce(pa: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_eval(pa: uintptr_t, pnt: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_n_piece(pwaff: uintptr_t) -> i32;

    fn isl_pw_aff_reset_tuple_id(pa: uintptr_t, type_: DimType) -> uintptr_t;

    fn isl_pw_aff_get_domain_space(pwaff: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_zero_set(pwaff: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_pos_set(pa: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_to_list(el: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_domain(pwaff: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_div(pa1: uintptr_t, pa2: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_scale_val(pa: uintptr_t, v: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_eq_set(pwaff1: uintptr_t, pwaff2: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_eq_map(pa1: uintptr_t, pa2: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_union_max(pwaff1: uintptr_t, pwaff2: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_align_params(pwaff: uintptr_t, model: uintptr_t) -> uintptr_t;

    fn isl_pw_aff_get_tuple_id(pa: uintptr_t, type_: DimType) -> uintptr_t;

}

impl Clone for PwAff {
    fn clone(&self) -> PwAff {
        self.copy()
    }
}

impl PartialEq for PwAff {
    fn eq(&self, other: &Self) -> bool {
        self.is_equal(other)
    }
}

impl Eq for PwAff {
}

impl core::ops::Add for PwAff {
    type Output = PwAff;

    fn add(self, rhs: PwAff) -> PwAff {
        self.add(rhs)
    }
}

impl core::ops::Sub for PwAff {
    type Output = PwAff;

    fn sub(self, rhs: PwAff) -> PwAff {
        self.sub(rhs)
    }
}

impl core::ops::Mul for PwAff {
    type Output = PwAff;

    fn mul(self, rhs: PwAff) -> PwAff {
        self.mul(rhs)
    }
}

impl core::ops::Div for PwAff {
    type Output = PwAff;

    fn div(self, rhs: PwAff) -> PwAff {
        self.div(rhs)
    }
}

impl PwAff {
    /// Wraps `isl_pw_aff_plain_is_equal`.
    pub fn plain_is_equal(&self, pwaff2: &PwAff) -> bool {
        let context_for_error_message = self.get_ctx();
        let pwaff1 = self;
        let pwaff1 = pwaff1.ptr;
        let pwaff2 = pwaff2.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_plain_is_equal(pwaff1, pwaff2) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error: {}", context_for_error_message.last_error_msg()),
        };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_get_space`.
    pub fn get_space(&self) -> Space {
        let context_for_error_message = self.get_ctx();
        let pwaff = self;
        let pwaff = pwaff.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_get_space(pwaff) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Space { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_sub`.
    pub fn sub(self, pwaff2: PwAff) -> PwAff {
        let context_for_error_message = self.get_ctx();
        let pwaff1 = self;
        let mut pwaff1 = pwaff1;
        pwaff1.do_not_free_on_drop();
        let pwaff1 = pwaff1.ptr;
        let mut pwaff2 = pwaff2;
        pwaff2.do_not_free_on_drop();
        let pwaff2 = pwaff2.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_sub(pwaff1, pwaff2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_is_cst`.
    pub fn is_cst(&self) -> bool {
        let context_for_error_message = self.get_ctx();
        let pwaff = self;
        let pwaff = pwaff.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_is_cst(pwaff) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error: {}", context_for_error_message.last_error_msg()),
        };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_scale_down_val`.
    pub fn scale_down_val(self, f: Val) -> PwAff {
        let context_for_error_message = self.get_ctx();
        let pa = self;
        let mut pa = pa;
        pa.do_not_free_on_drop();
        let pa = pa.ptr;
        let mut f = f;
        f.do_not_free_on_drop();
        let f = f.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_scale_down_val(pa, f) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_as_map`.
    pub fn as_map(self) -> Map {
        let context_for_error_message = self.get_ctx();
        let pa = self;
        let mut pa = pa;
        pa.do_not_free_on_drop();
        let pa = pa.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_as_map(pa) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Map { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_nonneg_set`.
    pub fn nonneg_set(self) -> Set {
        let context_for_error_message = self.get_ctx();
        let pwaff = self;
        let mut pwaff = pwaff;
        pwaff.do_not_free_on_drop();
        let pwaff = pwaff.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_nonneg_set(pwaff) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Set { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_to_str`.
    pub fn to_str(&self) -> &str {
        let pa = self;
        let pa = pa.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_to_str(pa) };
        let isl_rs_result = unsafe { CStr::from_ptr(isl_rs_result) };
        let isl_rs_result = isl_rs_result.to_str().unwrap();
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_le_set`.
    pub fn le_set(self, pwaff2: PwAff) -> Set {
        let context_for_error_message = self.get_ctx();
        let pwaff1 = self;
        let mut pwaff1 = pwaff1;
        pwaff1.do_not_free_on_drop();
        let pwaff1 = pwaff1.ptr;
        let mut pwaff2 = pwaff2;
        pwaff2.do_not_free_on_drop();
        let pwaff2 = pwaff2.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_le_set(pwaff1, pwaff2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Set { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_ge_map`.
    pub fn ge_map(self, pa2: PwAff) -> Map {
        let context_for_error_message = self.get_ctx();
        let pa1 = self;
        let mut pa1 = pa1;
        pa1.do_not_free_on_drop();
        let pa1 = pa1.ptr;
        let mut pa2 = pa2;
        pa2.do_not_free_on_drop();
        let pa2 = pa2.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_ge_map(pa1, pa2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Map { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_alloc`.
    pub fn alloc(set: Set, aff: Aff) -> PwAff {
        let mut set = set;
        set.do_not_free_on_drop();
        let set = set.ptr;
        let mut aff = aff;
        aff.do_not_free_on_drop();
        let aff = aff.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_alloc(set, aff) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = PwAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_free`.
    pub fn free(self) -> PwAff {
        let context_for_error_message = self.get_ctx();
        let pwaff = self;
        let mut pwaff = pwaff;
        pwaff.do_not_free_on_drop();
        let pwaff = pwaff.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_free(pwaff) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_mul`.
    pub fn mul(self, pwaff2: PwAff) -> PwAff {
        let context_for_error_message = self.get_ctx();
        let pwaff1 = self;
        let mut pwaff1 = pwaff1;
        pwaff1.do_not_free_on_drop();
        let pwaff1 = pwaff1.ptr;
        let mut pwaff2 = pwaff2;
        pwaff2.do_not_free_on_drop();
        let pwaff2 = pwaff2.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_mul(pwaff1, pwaff2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_mod_val`.
    pub fn mod_val(self, mod_: Val) -> PwAff {
        let context_for_error_message = self.get_ctx();
        let pa = self;
        let mut pa = pa;
        pa.do_not_free_on_drop();
        let pa = pa.ptr;
        let mut mod_ = mod_;
        mod_.do_not_free_on_drop();
        let mod_ = mod_.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_mod_val(pa, mod_) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_ne_set`.
    pub fn ne_set(self, pwaff2: PwAff) -> Set {
        let context_for_error_message = self.get_ctx();
        let pwaff1 = self;
        let mut pwaff1 = pwaff1;
        pwaff1.do_not_free_on_drop();
        let pwaff1 = pwaff1.ptr;
        let mut pwaff2 = pwaff2;
        pwaff2.do_not_free_on_drop();
        let pwaff2 = pwaff2.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_ne_set(pwaff1, pwaff2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Set { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_lt_map`.
    pub fn lt_map(self, pa2: PwAff) -> Map {
        let context_for_error_message = self.get_ctx();
        let pa1 = self;
        let mut pa1 = pa1;
        pa1.do_not_free_on_drop();
        let pa1 = pa1.ptr;
        let mut pa2 = pa2;
        pa2.do_not_free_on_drop();
        let pa2 = pa2.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_lt_map(pa1, pa2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Map { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_val_on_domain`.
    pub fn val_on_domain(domain: Set, v: Val) -> PwAff {
        let mut domain = domain;
        domain.do_not_free_on_drop();
        let domain = domain.ptr;
        let mut v = v;
        v.do_not_free_on_drop();
        let v = v.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_val_on_domain(domain, v) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = PwAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_ceil`.
    pub fn ceil(self) -> PwAff {
        let context_for_error_message = self.get_ctx();
        let pwaff = self;
        let mut pwaff = pwaff;
        pwaff.do_not_free_on_drop();
        let pwaff = pwaff.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_ceil(pwaff) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_bind_domain`.
    pub fn bind_domain(self, tuple: MultiId) -> PwAff {
        let context_for_error_message = self.get_ctx();
        let pa = self;
        let mut pa = pa;
        pa.do_not_free_on_drop();
        let pa = pa.ptr;
        let mut tuple = tuple;
        tuple.do_not_free_on_drop();
        let tuple = tuple.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_bind_domain(pa, tuple) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_bind_id`.
    pub fn bind_id(self, id: Id) -> Set {
        let context_for_error_message = self.get_ctx();
        let pa = self;
        let mut pa = pa;
        pa.do_not_free_on_drop();
        let pa = pa.ptr;
        let mut id = id;
        id.do_not_free_on_drop();
        let id = id.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_bind_id(pa, id) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Set { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_to_union_pw_aff`.
    pub fn to_union_pw_aff(self) -> UnionPwAff {
        let context_for_error_message = self.get_ctx();
        let pa = self;
        let mut pa = pa;
        pa.do_not_free_on_drop();
        let pa = pa.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_to_union_pw_aff(pa) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionPwAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_gt_set`.
    pub fn gt_set(self, pwaff2: PwAff) -> Set {
        let context_for_error_message = self.get_ctx();
        let pwaff1 = self;
        let mut pwaff1 = pwaff1;
        pwaff1.do_not_free_on_drop();
        let pwaff1 = pwaff1.ptr;
        let mut pwaff2 = pwaff2;
        pwaff2.do_not_free_on_drop();
        let pwaff2 = pwaff2.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_gt_set(pwaff1, pwaff2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Set { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_intersect_domain`.
    pub fn intersect_domain(self, set: Set) -> PwAff {
        let context_for_error_message = self.get_ctx();
        let pa = self;
        let mut pa = pa;
        pa.do_not_free_on_drop();
        let pa = pa.ptr;
        let mut set = set;
        set.do_not_free_on_drop();
        let set = set.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_intersect_domain(pa, set) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_foreach_piece`.
    pub fn foreach_piece<fn_>(&self, mut fn_: fn_, user: *mut c_void) -> Stat
    where fn_: FnMut(&Set, &Aff) -> Stat,
    {
        let context_for_error_message = self.get_ctx();
        let pwaff = self;
        let pwaff = pwaff.ptr;
        extern "C" fn fn__wrapper<fn_>(arg_0: uintptr_t, arg_1: uintptr_t, arg_2: *mut c_void) -> Stat {
            let fn_: *mut fn_ = unsafe { core::mem::transmute(arg_2) };
            let fn_: &mut fn_ = unsafe { &mut *fn_ };
            todo!()
        }

        let user: *mut fn_ = &mut fn_;
        let user: *mut c_void = unsafe { core::mem::transmute(user) };
        let fn_ = fn__wrapper::<fn_>;
        let isl_rs_result = unsafe { isl_pw_aff_foreach_piece(pwaff, fn_, user) };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_plain_cmp`.
    pub fn plain_cmp(&self, pa2: &PwAff) -> i32 {
        let pa1 = self;
        let pa1 = pa1.ptr;
        let pa2 = pa2.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_plain_cmp(pa1, pa2) };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_union_min`.
    pub fn union_min(self, pwaff2: PwAff) -> PwAff {
        let context_for_error_message = self.get_ctx();
        let pwaff1 = self;
        let mut pwaff1 = pwaff1;
        pwaff1.do_not_free_on_drop();
        let pwaff1 = pwaff1.ptr;
        let mut pwaff2 = pwaff2;
        pwaff2.do_not_free_on_drop();
        let pwaff2 = pwaff2.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_union_min(pwaff1, pwaff2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_isa_aff`.
    pub fn isa_aff(&self) -> bool {
        let context_for_error_message = self.get_ctx();
        let pa = self;
        let pa = pa.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_isa_aff(pa) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error: {}", context_for_error_message.last_error_msg()),
        };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_le_map`.
    pub fn le_map(self, pa2: PwAff) -> Map {
        let context_for_error_message = self.get_ctx();
        let pa1 = self;
        let mut pa1 = pa1;
        pa1.do_not_free_on_drop();
        let pa1 = pa1.ptr;
        let mut pa2 = pa2;
        pa2.do_not_free_on_drop();
        let pa2 = pa2.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_le_map(pa1, pa2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Map { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_nan_on_domain`.
    pub fn nan_on_domain(ls: LocalSpace) -> PwAff {
        let mut ls = ls;
        ls.do_not_free_on_drop();
        let ls = ls.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_nan_on_domain(ls) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = PwAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_max`.
    pub fn max(self, pwaff2: PwAff) -> PwAff {
        let context_for_error_message = self.get_ctx();
        let pwaff1 = self;
        let mut pwaff1 = pwaff1;
        pwaff1.do_not_free_on_drop();
        let pwaff1 = pwaff1.ptr;
        let mut pwaff2 = pwaff2;
        pwaff2.do_not_free_on_drop();
        let pwaff2 = pwaff2.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_max(pwaff1, pwaff2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_find_dim_by_name`.
    pub fn find_dim_by_name(&self, type_: DimType, name: &str) -> i32 {
        let pa = self;
        let pa = pa.ptr;
        let name = CString::new(name).unwrap();
        let name = name.as_ptr();
        let isl_rs_result = unsafe { isl_pw_aff_find_dim_by_name(pa, type_, name) };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_intersect_domain_wrapped_range`.
    pub fn intersect_domain_wrapped_range(self, set: Set) -> PwAff {
        let context_for_error_message = self.get_ctx();
        let pa = self;
        let mut pa = pa;
        pa.do_not_free_on_drop();
        let pa = pa.ptr;
        let mut set = set;
        set.do_not_free_on_drop();
        let set = set.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_intersect_domain_wrapped_range(pa, set) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_from_aff`.
    pub fn from_aff(aff: Aff) -> PwAff {
        let mut aff = aff;
        aff.do_not_free_on_drop();
        let aff = aff.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_from_aff(aff) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = PwAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_pullback_multi_aff`.
    pub fn pullback_multi_aff(self, ma: MultiAff) -> PwAff {
        let context_for_error_message = self.get_ctx();
        let pa = self;
        let mut pa = pa;
        pa.do_not_free_on_drop();
        let pa = pa.ptr;
        let mut ma = ma;
        ma.do_not_free_on_drop();
        let ma = ma.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_pullback_multi_aff(pa, ma) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_as_aff`.
    pub fn as_aff(self) -> Aff {
        let context_for_error_message = self.get_ctx();
        let pa = self;
        let mut pa = pa;
        pa.do_not_free_on_drop();
        let pa = pa.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_as_aff(pa) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Aff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_add`.
    pub fn add(self, pwaff2: PwAff) -> PwAff {
        let context_for_error_message = self.get_ctx();
        let pwaff1 = self;
        let mut pwaff1 = pwaff1;
        pwaff1.do_not_free_on_drop();
        let pwaff1 = pwaff1.ptr;
        let mut pwaff2 = pwaff2;
        pwaff2.do_not_free_on_drop();
        let pwaff2 = pwaff2.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_add(pwaff1, pwaff2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_non_zero_set`.
    pub fn non_zero_set(self) -> Set {
        let context_for_error_message = self.get_ctx();
        let pwaff = self;
        let mut pwaff = pwaff;
        pwaff.do_not_free_on_drop();
        let pwaff = pwaff.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_non_zero_set(pwaff) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Set { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_dump`.
    pub fn dump(&self) {
        let pwaff = self;
        let pwaff = pwaff.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_dump(pwaff) };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_dim`.
    pub fn dim(&self, type_: DimType) -> i32 {
        let pwaff = self;
        let pwaff = pwaff.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_dim(pwaff, type_) };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_var_on_domain`.
    pub fn var_on_domain(ls: LocalSpace, type_: DimType, pos: u32) -> PwAff {
        let mut ls = ls;
        ls.do_not_free_on_drop();
        let ls = ls.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_var_on_domain(ls, type_, pos) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = PwAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_intersect_domain_wrapped_domain`.
    pub fn intersect_domain_wrapped_domain(self, set: Set) -> PwAff {
        let context_for_error_message = self.get_ctx();
        let pa = self;
        let mut pa = pa;
        pa.do_not_free_on_drop();
        let pa = pa.ptr;
        let mut set = set;
        set.do_not_free_on_drop();
        let set = set.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_intersect_domain_wrapped_domain(pa, set) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_move_dims`.
    pub fn move_dims(self, dst_type: DimType, dst_pos: u32, src_type: DimType, src_pos: u32, n: u32) -> PwAff {
        let context_for_error_message = self.get_ctx();
        let pa = self;
        let mut pa = pa;
        pa.do_not_free_on_drop();
        let pa = pa.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_move_dims(pa, dst_type, dst_pos, src_type, src_pos, n) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_pullback_pw_multi_aff`.
    pub fn pullback_pw_multi_aff(self, pma: PwMultiAff) -> PwAff {
        let context_for_error_message = self.get_ctx();
        let pa = self;
        let mut pa = pa;
        pa.do_not_free_on_drop();
        let pa = pa.ptr;
        let mut pma = pma;
        pma.do_not_free_on_drop();
        let pma = pma.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_pullback_pw_multi_aff(pa, pma) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_drop_unused_params`.
    pub fn drop_unused_params(self) -> PwAff {
        let context_for_error_message = self.get_ctx();
        let pa = self;
        let mut pa = pa;
        pa.do_not_free_on_drop();
        let pa = pa.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_drop_unused_params(pa) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_tdiv_q`.
    pub fn tdiv_q(self, pa2: PwAff) -> PwAff {
        let context_for_error_message = self.get_ctx();
        let pa1 = self;
        let mut pa1 = pa1;
        pa1.do_not_free_on_drop();
        let pa1 = pa1.ptr;
        let mut pa2 = pa2;
        pa2.do_not_free_on_drop();
        let pa2 = pa2.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_tdiv_q(pa1, pa2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_floor`.
    pub fn floor(self) -> PwAff {
        let context_for_error_message = self.get_ctx();
        let pwaff = self;
        let mut pwaff = pwaff;
        pwaff.do_not_free_on_drop();
        let pwaff = pwaff.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_floor(pwaff) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_add_dims`.
    pub fn add_dims(self, type_: DimType, n: u32) -> PwAff {
        let context_for_error_message = self.get_ctx();
        let pwaff = self;
        let mut pwaff = pwaff;
        pwaff.do_not_free_on_drop();
        let pwaff = pwaff.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_add_dims(pwaff, type_, n) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_min`.
    pub fn min(self, pwaff2: PwAff) -> PwAff {
        let context_for_error_message = self.get_ctx();
        let pwaff1 = self;
        let mut pwaff1 = pwaff1;
        pwaff1.do_not_free_on_drop();
        let pwaff1 = pwaff1.ptr;
        let mut pwaff2 = pwaff2;
        pwaff2.do_not_free_on_drop();
        let pwaff2 = pwaff2.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_min(pwaff1, pwaff2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_gist`.
    pub fn gist(self, context: Set) -> PwAff {
        let context_for_error_message = self.get_ctx();
        let pwaff = self;
        let mut pwaff = pwaff;
        pwaff.do_not_free_on_drop();
        let pwaff = pwaff.ptr;
        let mut context = context;
        context.do_not_free_on_drop();
        let context = context.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_gist(pwaff, context) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_gt_map`.
    pub fn gt_map(self, pa2: PwAff) -> Map {
        let context_for_error_message = self.get_ctx();
        let pa1 = self;
        let mut pa1 = pa1;
        pa1.do_not_free_on_drop();
        let pa1 = pa1.ptr;
        let mut pa2 = pa2;
        pa2.do_not_free_on_drop();
        let pa2 = pa2.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_gt_map(pa1, pa2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Map { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_bind_domain_wrapped_domain`.
    pub fn bind_domain_wrapped_domain(self, tuple: MultiId) -> PwAff {
        let context_for_error_message = self.get_ctx();
        let pa = self;
        let mut pa = pa;
        pa.do_not_free_on_drop();
        let pa = pa.ptr;
        let mut tuple = tuple;
        tuple.do_not_free_on_drop();
        let tuple = tuple.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_bind_domain_wrapped_domain(pa, tuple) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_zero_on_domain`.
    pub fn zero_on_domain(ls: LocalSpace) -> PwAff {
        let mut ls = ls;
        ls.do_not_free_on_drop();
        let ls = ls.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_zero_on_domain(ls) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = PwAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_set_tuple_id`.
    pub fn set_tuple_id(self, type_: DimType, id: Id) -> PwAff {
        let context_for_error_message = self.get_ctx();
        let pwaff = self;
        let mut pwaff = pwaff;
        pwaff.do_not_free_on_drop();
        let pwaff = pwaff.ptr;
        let mut id = id;
        id.do_not_free_on_drop();
        let id = id.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_set_tuple_id(pwaff, type_, id) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_involves_param_id`.
    pub fn involves_param_id(&self, id: &Id) -> bool {
        let context_for_error_message = self.get_ctx();
        let pa = self;
        let pa = pa.ptr;
        let id = id.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_involves_param_id(pa, id) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error: {}", context_for_error_message.last_error_msg()),
        };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_lt_set`.
    pub fn lt_set(self, pwaff2: PwAff) -> Set {
        let context_for_error_message = self.get_ctx();
        let pwaff1 = self;
        let mut pwaff1 = pwaff1;
        pwaff1.do_not_free_on_drop();
        let pwaff1 = pwaff1.ptr;
        let mut pwaff2 = pwaff2;
        pwaff2.do_not_free_on_drop();
        let pwaff2 = pwaff2.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_lt_set(pwaff1, pwaff2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Set { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_read_from_str`.
    pub fn read_from_str(ctx: &Context, str_: &str) -> PwAff {
        let ctx = ctx.ptr;
        let str_ = CString::new(str_).unwrap();
        let str_ = str_.as_ptr();
        let isl_rs_result = unsafe { isl_pw_aff_read_from_str(ctx, str_) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = PwAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_intersect_params`.
    pub fn intersect_params(self, set: Set) -> PwAff {
        let context_for_error_message = self.get_ctx();
        let pa = self;
        let mut pa = pa;
        pa.do_not_free_on_drop();
        let pa = pa.ptr;
        let mut set = set;
        set.do_not_free_on_drop();
        let set = set.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_intersect_params(pa, set) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_add_constant_val`.
    pub fn add_constant_val(self, v: Val) -> PwAff {
        let context_for_error_message = self.get_ctx();
        let pa = self;
        let mut pa = pa;
        pa.do_not_free_on_drop();
        let pa = pa.ptr;
        let mut v = v;
        v.do_not_free_on_drop();
        let v = v.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_add_constant_val(pa, v) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_ge_set`.
    pub fn ge_set(self, pwaff2: PwAff) -> Set {
        let context_for_error_message = self.get_ctx();
        let pwaff1 = self;
        let mut pwaff1 = pwaff1;
        pwaff1.do_not_free_on_drop();
        let pwaff1 = pwaff1.ptr;
        let mut pwaff2 = pwaff2;
        pwaff2.do_not_free_on_drop();
        let pwaff2 = pwaff2.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_ge_set(pwaff1, pwaff2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Set { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_gist_params`.
    pub fn gist_params(self, context: Set) -> PwAff {
        let context_for_error_message = self.get_ctx();
        let pwaff = self;
        let mut pwaff = pwaff;
        pwaff.do_not_free_on_drop();
        let pwaff = pwaff.ptr;
        let mut context = context;
        context.do_not_free_on_drop();
        let context = context.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_gist_params(pwaff, context) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_get_ctx`.
    pub fn get_ctx(&self) -> Context {
        let pwaff = self;
        let pwaff = pwaff.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_get_ctx(pwaff) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = Context { ptr: isl_rs_result, should_free_on_drop: true };
        let mut isl_rs_result = isl_rs_result;
        isl_rs_result.do_not_free_on_drop();
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_get_hash`.
    pub fn get_hash(&self) -> u32 {
        let pa = self;
        let pa = pa.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_get_hash(pa) };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_from_range`.
    pub fn from_range(self) -> PwAff {
        let context_for_error_message = self.get_ctx();
        let pwa = self;
        let mut pwa = pwa;
        pwa.do_not_free_on_drop();
        let pwa = pwa.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_from_range(pwa) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_involves_nan`.
    pub fn involves_nan(&self) -> bool {
        let context_for_error_message = self.get_ctx();
        let pa = self;
        let pa = pa.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_involves_nan(pa) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error: {}", context_for_error_message.last_error_msg()),
        };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_has_tuple_id`.
    pub fn has_tuple_id(&self, type_: DimType) -> bool {
        let context_for_error_message = self.get_ctx();
        let pa = self;
        let pa = pa.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_has_tuple_id(pa, type_) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error: {}", context_for_error_message.last_error_msg()),
        };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_cond`.
    pub fn cond(self, pwaff_true: PwAff, pwaff_false: PwAff) -> PwAff {
        let context_for_error_message = self.get_ctx();
        let cond = self;
        let mut cond = cond;
        cond.do_not_free_on_drop();
        let cond = cond.ptr;
        let mut pwaff_true = pwaff_true;
        pwaff_true.do_not_free_on_drop();
        let pwaff_true = pwaff_true.ptr;
        let mut pwaff_false = pwaff_false;
        pwaff_false.do_not_free_on_drop();
        let pwaff_false = pwaff_false.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_cond(cond, pwaff_true, pwaff_false) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_neg`.
    pub fn neg(self) -> PwAff {
        let context_for_error_message = self.get_ctx();
        let pwaff = self;
        let mut pwaff = pwaff;
        pwaff.do_not_free_on_drop();
        let pwaff = pwaff.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_neg(pwaff) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_pullback_multi_pw_aff`.
    pub fn pullback_multi_pw_aff(self, mpa: MultiPwAff) -> PwAff {
        let context_for_error_message = self.get_ctx();
        let pa = self;
        let mut pa = pa;
        pa.do_not_free_on_drop();
        let pa = pa.ptr;
        let mut mpa = mpa;
        mpa.do_not_free_on_drop();
        let mpa = mpa.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_pullback_multi_pw_aff(pa, mpa) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_empty`.
    pub fn empty(space: Space) -> PwAff {
        let mut space = space;
        space.do_not_free_on_drop();
        let space = space.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_empty(space) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = PwAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_every_piece`.
    pub fn every_piece<test>(&self, mut test: test, user: *mut c_void) -> bool
    where test: FnMut(&Set, &Aff) -> bool,
    {
        let context_for_error_message = self.get_ctx();
        let pa = self;
        let pa = pa.ptr;
        extern "C" fn test_wrapper<test>(arg_0: uintptr_t, arg_1: uintptr_t, arg_2: *mut c_void) -> i32 {
            let test: *mut test = unsafe { core::mem::transmute(arg_2) };
            let test: &mut test = unsafe { &mut *test };
            todo!()
        }

        let test_user: *mut test = &mut test;
        let test_user: *mut c_void = unsafe { core::mem::transmute(test_user) };
        let test = test_wrapper::<test>;
        let isl_rs_result = unsafe { isl_pw_aff_every_piece(pa, test, user) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error: {}", context_for_error_message.last_error_msg()),
        };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_is_equal`.
    pub fn is_equal(&self, pa2: &PwAff) -> bool {
        let context_for_error_message = self.get_ctx();
        let pa1 = self;
        let pa1 = pa1.ptr;
        let pa2 = pa2.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_is_equal(pa1, pa2) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error: {}", context_for_error_message.last_error_msg()),
        };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_params`.
    pub fn params(self) -> Set {
        let context_for_error_message = self.get_ctx();
        let pwa = self;
        let mut pwa = pwa;
        pwa.do_not_free_on_drop();
        let pwa = pwa.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_params(pwa) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Set { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_param_on_domain_id`.
    pub fn param_on_domain_id(domain: Set, id: Id) -> PwAff {
        let mut domain = domain;
        domain.do_not_free_on_drop();
        let domain = domain.ptr;
        let mut id = id;
        id.do_not_free_on_drop();
        let id = id.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_param_on_domain_id(domain, id) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = PwAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_nan_on_domain_space`.
    pub fn nan_on_domain_space(space: Space) -> PwAff {
        let mut space = space;
        space.do_not_free_on_drop();
        let space = space.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_nan_on_domain_space(space) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = PwAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_insert_domain`.
    pub fn insert_domain(self, domain: Space) -> PwAff {
        let context_for_error_message = self.get_ctx();
        let pa = self;
        let mut pa = pa;
        pa.do_not_free_on_drop();
        let pa = pa.ptr;
        let mut domain = domain;
        domain.do_not_free_on_drop();
        let domain = domain.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_insert_domain(pa, domain) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_tdiv_r`.
    pub fn tdiv_r(self, pa2: PwAff) -> PwAff {
        let context_for_error_message = self.get_ctx();
        let pa1 = self;
        let mut pa1 = pa1;
        pa1.do_not_free_on_drop();
        let pa1 = pa1.ptr;
        let mut pa2 = pa2;
        pa2.do_not_free_on_drop();
        let pa2 = pa2.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_tdiv_r(pa1, pa2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_insert_dims`.
    pub fn insert_dims(self, type_: DimType, first: u32, n: u32) -> PwAff {
        let context_for_error_message = self.get_ctx();
        let pwaff = self;
        let mut pwaff = pwaff;
        pwaff.do_not_free_on_drop();
        let pwaff = pwaff.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_insert_dims(pwaff, type_, first, n) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_drop_dims`.
    pub fn drop_dims(self, type_: DimType, first: u32, n: u32) -> PwAff {
        let context_for_error_message = self.get_ctx();
        let pwaff = self;
        let mut pwaff = pwaff;
        pwaff.do_not_free_on_drop();
        let pwaff = pwaff.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_drop_dims(pwaff, type_, first, n) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_get_dim_name`.
    pub fn get_dim_name(&self, type_: DimType, pos: u32) -> &str {
        let pa = self;
        let pa = pa.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_get_dim_name(pa, type_, pos) };
        let isl_rs_result = unsafe { CStr::from_ptr(isl_rs_result) };
        let isl_rs_result = isl_rs_result.to_str().unwrap();
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_has_dim_id`.
    pub fn has_dim_id(&self, type_: DimType, pos: u32) -> bool {
        let context_for_error_message = self.get_ctx();
        let pa = self;
        let pa = pa.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_has_dim_id(pa, type_, pos) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error: {}", context_for_error_message.last_error_msg()),
        };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_union_add`.
    pub fn union_add(self, pwaff2: PwAff) -> PwAff {
        let context_for_error_message = self.get_ctx();
        let pwaff1 = self;
        let mut pwaff1 = pwaff1;
        pwaff1.do_not_free_on_drop();
        let pwaff1 = pwaff1.ptr;
        let mut pwaff2 = pwaff2;
        pwaff2.do_not_free_on_drop();
        let pwaff2 = pwaff2.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_union_add(pwaff1, pwaff2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_get_dim_id`.
    pub fn get_dim_id(&self, type_: DimType, pos: u32) -> Id {
        let context_for_error_message = self.get_ctx();
        let pa = self;
        let pa = pa.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_get_dim_id(pa, type_, pos) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Id { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_set_dim_id`.
    pub fn set_dim_id(self, type_: DimType, pos: u32, id: Id) -> PwAff {
        let context_for_error_message = self.get_ctx();
        let pma = self;
        let mut pma = pma;
        pma.do_not_free_on_drop();
        let pma = pma.ptr;
        let mut id = id;
        id.do_not_free_on_drop();
        let id = id.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_set_dim_id(pma, type_, pos, id) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_copy`.
    pub fn copy(&self) -> PwAff {
        let context_for_error_message = self.get_ctx();
        let pwaff = self;
        let pwaff = pwaff.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_copy(pwaff) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_is_empty`.
    pub fn is_empty(&self) -> bool {
        let context_for_error_message = self.get_ctx();
        let pwaff = self;
        let pwaff = pwaff.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_is_empty(pwaff) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error: {}", context_for_error_message.last_error_msg()),
        };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_involves_dims`.
    pub fn involves_dims(&self, type_: DimType, first: u32, n: u32) -> bool {
        let context_for_error_message = self.get_ctx();
        let pwaff = self;
        let pwaff = pwaff.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_involves_dims(pwaff, type_, first, n) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error: {}", context_for_error_message.last_error_msg()),
        };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_project_domain_on_params`.
    pub fn project_domain_on_params(self) -> PwAff {
        let context_for_error_message = self.get_ctx();
        let pa = self;
        let mut pa = pa;
        pa.do_not_free_on_drop();
        let pa = pa.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_project_domain_on_params(pa) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_reset_user`.
    pub fn reset_user(self) -> PwAff {
        let context_for_error_message = self.get_ctx();
        let pa = self;
        let mut pa = pa;
        pa.do_not_free_on_drop();
        let pa = pa.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_reset_user(pa) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_subtract_domain`.
    pub fn subtract_domain(self, set: Set) -> PwAff {
        let context_for_error_message = self.get_ctx();
        let pa = self;
        let mut pa = pa;
        pa.do_not_free_on_drop();
        let pa = pa.ptr;
        let mut set = set;
        set.do_not_free_on_drop();
        let set = set.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_subtract_domain(pa, set) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_coalesce`.
    pub fn coalesce(self) -> PwAff {
        let context_for_error_message = self.get_ctx();
        let pa = self;
        let mut pa = pa;
        pa.do_not_free_on_drop();
        let pa = pa.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_coalesce(pa) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_eval`.
    pub fn eval(self, pnt: Point) -> Val {
        let context_for_error_message = self.get_ctx();
        let pa = self;
        let mut pa = pa;
        pa.do_not_free_on_drop();
        let pa = pa.ptr;
        let mut pnt = pnt;
        pnt.do_not_free_on_drop();
        let pnt = pnt.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_eval(pa, pnt) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Val { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_n_piece`.
    pub fn n_piece(&self) -> i32 {
        let pwaff = self;
        let pwaff = pwaff.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_n_piece(pwaff) };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_reset_tuple_id`.
    pub fn reset_tuple_id(self, type_: DimType) -> PwAff {
        let context_for_error_message = self.get_ctx();
        let pa = self;
        let mut pa = pa;
        pa.do_not_free_on_drop();
        let pa = pa.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_reset_tuple_id(pa, type_) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_get_domain_space`.
    pub fn get_domain_space(&self) -> Space {
        let context_for_error_message = self.get_ctx();
        let pwaff = self;
        let pwaff = pwaff.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_get_domain_space(pwaff) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Space { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_zero_set`.
    pub fn zero_set(self) -> Set {
        let context_for_error_message = self.get_ctx();
        let pwaff = self;
        let mut pwaff = pwaff;
        pwaff.do_not_free_on_drop();
        let pwaff = pwaff.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_zero_set(pwaff) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Set { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_pos_set`.
    pub fn pos_set(self) -> Set {
        let context_for_error_message = self.get_ctx();
        let pa = self;
        let mut pa = pa;
        pa.do_not_free_on_drop();
        let pa = pa.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_pos_set(pa) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Set { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_to_list`.
    pub fn to_list(self) -> PwAffList {
        let context_for_error_message = self.get_ctx();
        let el = self;
        let mut el = el;
        el.do_not_free_on_drop();
        let el = el.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_to_list(el) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwAffList { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_domain`.
    pub fn domain(self) -> Set {
        let context_for_error_message = self.get_ctx();
        let pwaff = self;
        let mut pwaff = pwaff;
        pwaff.do_not_free_on_drop();
        let pwaff = pwaff.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_domain(pwaff) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Set { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_div`.
    pub fn div(self, pa2: PwAff) -> PwAff {
        let context_for_error_message = self.get_ctx();
        let pa1 = self;
        let mut pa1 = pa1;
        pa1.do_not_free_on_drop();
        let pa1 = pa1.ptr;
        let mut pa2 = pa2;
        pa2.do_not_free_on_drop();
        let pa2 = pa2.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_div(pa1, pa2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_scale_val`.
    pub fn scale_val(self, v: Val) -> PwAff {
        let context_for_error_message = self.get_ctx();
        let pa = self;
        let mut pa = pa;
        pa.do_not_free_on_drop();
        let pa = pa.ptr;
        let mut v = v;
        v.do_not_free_on_drop();
        let v = v.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_scale_val(pa, v) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_eq_set`.
    pub fn eq_set(self, pwaff2: PwAff) -> Set {
        let context_for_error_message = self.get_ctx();
        let pwaff1 = self;
        let mut pwaff1 = pwaff1;
        pwaff1.do_not_free_on_drop();
        let pwaff1 = pwaff1.ptr;
        let mut pwaff2 = pwaff2;
        pwaff2.do_not_free_on_drop();
        let pwaff2 = pwaff2.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_eq_set(pwaff1, pwaff2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Set { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_eq_map`.
    pub fn eq_map(self, pa2: PwAff) -> Map {
        let context_for_error_message = self.get_ctx();
        let pa1 = self;
        let mut pa1 = pa1;
        pa1.do_not_free_on_drop();
        let pa1 = pa1.ptr;
        let mut pa2 = pa2;
        pa2.do_not_free_on_drop();
        let pa2 = pa2.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_eq_map(pa1, pa2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Map { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_union_max`.
    pub fn union_max(self, pwaff2: PwAff) -> PwAff {
        let context_for_error_message = self.get_ctx();
        let pwaff1 = self;
        let mut pwaff1 = pwaff1;
        pwaff1.do_not_free_on_drop();
        let pwaff1 = pwaff1.ptr;
        let mut pwaff2 = pwaff2;
        pwaff2.do_not_free_on_drop();
        let pwaff2 = pwaff2.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_union_max(pwaff1, pwaff2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_align_params`.
    pub fn align_params(self, model: Space) -> PwAff {
        let context_for_error_message = self.get_ctx();
        let pwaff = self;
        let mut pwaff = pwaff;
        pwaff.do_not_free_on_drop();
        let pwaff = pwaff.ptr;
        let mut model = model;
        model.do_not_free_on_drop();
        let model = model.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_align_params(pwaff, model) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_aff_get_tuple_id`.
    pub fn get_tuple_id(&self, type_: DimType) -> Id {
        let context_for_error_message = self.get_ctx();
        let pa = self;
        let pa = pa.ptr;
        let isl_rs_result = unsafe { isl_pw_aff_get_tuple_id(pa, type_) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Id { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Does not call isl_xxx_free() on being dropped. (For internal use only.)
    pub fn do_not_free_on_drop(&mut self) {
        self.should_free_on_drop = false;
    }
}

impl Drop for PwAff {
    fn drop(&mut self) {
        if self.should_free_on_drop {
            unsafe { isl_pw_aff_free(self.ptr); }
        }
    }
}