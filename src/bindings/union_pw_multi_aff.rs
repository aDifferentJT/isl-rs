// Automatically generated by isl_bindings_generator.
// LICENSE: MIT

use libc::uintptr_t;
use crate::bindings::{Stat, DimType, PwMultiAff, Space, PwMultiAffList, Val, UnionSet, UnionPwAff, MultiAff, MultiVal, Context, Aff, Set, MultiUnionPwAff, UnionMap, UnionPwMultiAffList};
use std::os::raw::{c_void, c_char};
use std::ffi::{CString, CStr};

/// Wraps `isl_union_pw_multi_aff`.
pub struct UnionPwMultiAff {
    pub ptr: uintptr_t,
    pub should_free_on_drop: bool,
}

extern "C" {

    fn isl_union_pw_multi_aff_foreach_pw_multi_aff(upma: uintptr_t, fn_: unsafe extern "C" fn(uintptr_t, *mut c_void) -> Stat, user: *mut c_void) -> Stat;

    fn isl_union_pw_multi_aff_empty(space: uintptr_t) -> uintptr_t;

    fn isl_union_pw_multi_aff_get_pw_multi_aff_list(upma: uintptr_t) -> uintptr_t;

    fn isl_union_pw_multi_aff_coalesce(upma: uintptr_t) -> uintptr_t;

    fn isl_union_pw_multi_aff_as_pw_multi_aff(upma: uintptr_t) -> uintptr_t;

    fn isl_union_pw_multi_aff_scale_down_val(upma: uintptr_t, val: uintptr_t) -> uintptr_t;

    fn isl_union_pw_multi_aff_intersect_domain_wrapped_range(upma: uintptr_t, uset: uintptr_t) -> uintptr_t;

    fn isl_union_pw_multi_aff_get_space(upma: uintptr_t) -> uintptr_t;

    fn isl_union_pw_multi_aff_set_dim_name(upma: uintptr_t, type_: DimType, pos: u32, s: *const c_char) -> uintptr_t;

    fn isl_union_pw_multi_aff_intersect_domain(upma: uintptr_t, uset: uintptr_t) -> uintptr_t;

    fn isl_union_pw_multi_aff_scale_val(upma: uintptr_t, val: uintptr_t) -> uintptr_t;

    fn isl_union_pw_multi_aff_from_domain(uset: uintptr_t) -> uintptr_t;

    fn isl_union_pw_multi_aff_intersect_domain_wrapped_domain(upma: uintptr_t, uset: uintptr_t) -> uintptr_t;

    fn isl_union_pw_multi_aff_range_product(upma1: uintptr_t, upma2: uintptr_t) -> uintptr_t;

    fn isl_union_pw_multi_aff_from_union_pw_aff(upa: uintptr_t) -> uintptr_t;

    fn isl_union_pw_multi_aff_extract_pw_multi_aff(upma: uintptr_t, space: uintptr_t) -> uintptr_t;

    fn isl_union_pw_multi_aff_apply_union_pw_multi_aff(upma1: uintptr_t, upma2: uintptr_t) -> uintptr_t;

    fn isl_union_pw_multi_aff_add(upma1: uintptr_t, upma2: uintptr_t) -> uintptr_t;

    fn isl_union_pw_multi_aff_from_multi_aff(ma: uintptr_t) -> uintptr_t;

    fn isl_union_pw_multi_aff_empty_space(space: uintptr_t) -> uintptr_t;

    fn isl_union_pw_multi_aff_range_factor_range(upma: uintptr_t) -> uintptr_t;

    fn isl_union_pw_multi_aff_flat_range_product(upma1: uintptr_t, upma2: uintptr_t) -> uintptr_t;

    fn isl_union_pw_multi_aff_drop_dims(upma: uintptr_t, type_: DimType, first: u32, n: u32) -> uintptr_t;

    fn isl_union_pw_multi_aff_n_pw_multi_aff(upma: uintptr_t) -> i32;

    fn isl_union_pw_multi_aff_scale_multi_val(upma: uintptr_t, mv: uintptr_t) -> uintptr_t;

    fn isl_union_pw_multi_aff_from_pw_multi_aff(pma: uintptr_t) -> uintptr_t;

    fn isl_union_pw_multi_aff_add_pw_multi_aff(upma: uintptr_t, pma: uintptr_t) -> uintptr_t;

    fn isl_union_pw_multi_aff_align_params(upma: uintptr_t, model: uintptr_t) -> uintptr_t;

    fn isl_union_pw_multi_aff_involves_nan(upma: uintptr_t) -> i32;

    fn isl_union_pw_multi_aff_plain_is_equal(upma1: uintptr_t, upma2: uintptr_t) -> i32;

    fn isl_union_pw_multi_aff_union_add(upma1: uintptr_t, upma2: uintptr_t) -> uintptr_t;

    fn isl_union_pw_multi_aff_read_from_str(ctx: uintptr_t, str_: *const c_char) -> uintptr_t;

    fn isl_union_pw_multi_aff_dim(upma: uintptr_t, type_: DimType) -> i32;

    fn isl_union_pw_multi_aff_empty_ctx(ctx: uintptr_t) -> uintptr_t;

    fn isl_union_pw_multi_aff_neg(upma: uintptr_t) -> uintptr_t;

    fn isl_union_pw_multi_aff_subtract_domain_space(upma: uintptr_t, space: uintptr_t) -> uintptr_t;

    fn isl_union_pw_multi_aff_from_aff(aff: uintptr_t) -> uintptr_t;

    fn isl_union_pw_multi_aff_multi_val_on_domain(domain: uintptr_t, mv: uintptr_t) -> uintptr_t;

    fn isl_union_pw_multi_aff_isa_pw_multi_aff(upma: uintptr_t) -> i32;

    fn isl_union_pw_multi_aff_gist_params(upma: uintptr_t, context: uintptr_t) -> uintptr_t;

    fn isl_union_pw_multi_aff_subtract_domain(upma: uintptr_t, uset: uintptr_t) -> uintptr_t;

    fn isl_union_pw_multi_aff_from_multi_union_pw_aff(mupa: uintptr_t) -> uintptr_t;

    fn isl_union_pw_multi_aff_intersect_params(upma: uintptr_t, set: uintptr_t) -> uintptr_t;

    fn isl_union_pw_multi_aff_reset_user(upma: uintptr_t) -> uintptr_t;

    fn isl_union_pw_multi_aff_every_pw_multi_aff(upma: uintptr_t, test: unsafe extern "C" fn(uintptr_t, *mut c_void) -> i32, user: *mut c_void) -> i32;

    fn isl_union_pw_multi_aff_from_union_map(umap: uintptr_t) -> uintptr_t;

    fn isl_union_pw_multi_aff_dump(upma: uintptr_t);

    fn isl_union_pw_multi_aff_get_ctx(upma: uintptr_t) -> uintptr_t;

    fn isl_union_pw_multi_aff_to_list(el: uintptr_t) -> uintptr_t;

    fn isl_union_pw_multi_aff_subtract_domain_union_set(upma: uintptr_t, uset: uintptr_t) -> uintptr_t;

    fn isl_union_pw_multi_aff_find_dim_by_name(upma: uintptr_t, type_: DimType, name: *const c_char) -> i32;

    fn isl_union_pw_multi_aff_from_union_set(uset: uintptr_t) -> uintptr_t;

    fn isl_union_pw_multi_aff_pullback_union_pw_multi_aff(upma1: uintptr_t, upma2: uintptr_t) -> uintptr_t;

    fn isl_union_pw_multi_aff_as_union_map(upma: uintptr_t) -> uintptr_t;

    fn isl_union_pw_multi_aff_intersect_domain_union_set(upma: uintptr_t, uset: uintptr_t) -> uintptr_t;

    fn isl_union_pw_multi_aff_copy(upma: uintptr_t) -> uintptr_t;

    fn isl_union_pw_multi_aff_involves_locals(upma: uintptr_t) -> i32;

    fn isl_union_pw_multi_aff_get_union_pw_aff(upma: uintptr_t, pos: i32) -> uintptr_t;

    fn isl_union_pw_multi_aff_range_factor_domain(upma: uintptr_t) -> uintptr_t;

    fn isl_union_pw_multi_aff_gist(upma: uintptr_t, context: uintptr_t) -> uintptr_t;

    fn isl_union_pw_multi_aff_sub(upma1: uintptr_t, upma2: uintptr_t) -> uintptr_t;

    fn isl_union_pw_multi_aff_free(upma: uintptr_t) -> uintptr_t;

    fn isl_union_pw_multi_aff_intersect_domain_space(upma: uintptr_t, space: uintptr_t) -> uintptr_t;

    fn isl_union_pw_multi_aff_preimage_domain_wrapped_domain_union_pw_multi_aff(upma1: uintptr_t, upma2: uintptr_t) -> uintptr_t;

    fn isl_union_pw_multi_aff_plain_is_empty(upma: uintptr_t) -> i32;

    fn isl_union_pw_multi_aff_as_multi_union_pw_aff(upma: uintptr_t) -> uintptr_t;

    fn isl_union_pw_multi_aff_to_str(upma: uintptr_t) -> *const c_char;

    fn isl_union_pw_multi_aff_domain(upma: uintptr_t) -> uintptr_t;

}

impl Clone for UnionPwMultiAff {
    fn clone(&self) -> UnionPwMultiAff {
        self.copy()
    }
}

impl core::ops::Add for UnionPwMultiAff {
    type Output = UnionPwMultiAff;

    fn add(self, rhs: UnionPwMultiAff) -> UnionPwMultiAff {
        self.add(rhs)
    }
}

impl core::ops::Sub for UnionPwMultiAff {
    type Output = UnionPwMultiAff;

    fn sub(self, rhs: UnionPwMultiAff) -> UnionPwMultiAff {
        self.sub(rhs)
    }
}

impl UnionPwMultiAff {
    /// Wraps `isl_union_pw_multi_aff_foreach_pw_multi_aff`.
    pub fn foreach_pw_multi_aff<fn_>(&self, mut fn_: fn_, user: *mut c_void) -> Stat
    where fn_: FnMut(&PwMultiAff) -> Stat,
    {
        let context_for_error_message = self.get_ctx();
        let upma = self;
        let upma = upma.ptr;
        extern "C" fn fn__wrapper<fn_>(arg_0: uintptr_t, arg_1: *mut c_void) -> Stat {
            let fn_: *mut fn_ = unsafe { core::mem::transmute(arg_1) };
            let fn_: &mut fn_ = unsafe { &mut *fn_ };
            todo!()
        }

        let user: *mut fn_ = &mut fn_;
        let user: *mut c_void = unsafe { core::mem::transmute(user) };
        let fn_ = fn__wrapper::<fn_>;
        let isl_rs_result = unsafe { isl_union_pw_multi_aff_foreach_pw_multi_aff(upma, fn_, user) };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_multi_aff_empty`.
    pub fn empty(space: Space) -> UnionPwMultiAff {
        let mut space = space;
        space.do_not_free_on_drop();
        let space = space.ptr;
        let isl_rs_result = unsafe { isl_union_pw_multi_aff_empty(space) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = UnionPwMultiAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_multi_aff_get_pw_multi_aff_list`.
    pub fn get_pw_multi_aff_list(&self) -> PwMultiAffList {
        let context_for_error_message = self.get_ctx();
        let upma = self;
        let upma = upma.ptr;
        let isl_rs_result = unsafe { isl_union_pw_multi_aff_get_pw_multi_aff_list(upma) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwMultiAffList { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_multi_aff_coalesce`.
    pub fn coalesce(self) -> UnionPwMultiAff {
        let context_for_error_message = self.get_ctx();
        let upma = self;
        let mut upma = upma;
        upma.do_not_free_on_drop();
        let upma = upma.ptr;
        let isl_rs_result = unsafe { isl_union_pw_multi_aff_coalesce(upma) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionPwMultiAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_multi_aff_as_pw_multi_aff`.
    pub fn as_pw_multi_aff(self) -> PwMultiAff {
        let context_for_error_message = self.get_ctx();
        let upma = self;
        let mut upma = upma;
        upma.do_not_free_on_drop();
        let upma = upma.ptr;
        let isl_rs_result = unsafe { isl_union_pw_multi_aff_as_pw_multi_aff(upma) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwMultiAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_multi_aff_scale_down_val`.
    pub fn scale_down_val(self, val: Val) -> UnionPwMultiAff {
        let context_for_error_message = self.get_ctx();
        let upma = self;
        let mut upma = upma;
        upma.do_not_free_on_drop();
        let upma = upma.ptr;
        let mut val = val;
        val.do_not_free_on_drop();
        let val = val.ptr;
        let isl_rs_result = unsafe { isl_union_pw_multi_aff_scale_down_val(upma, val) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionPwMultiAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_multi_aff_intersect_domain_wrapped_range`.
    pub fn intersect_domain_wrapped_range(self, uset: UnionSet) -> UnionPwMultiAff {
        let context_for_error_message = self.get_ctx();
        let upma = self;
        let mut upma = upma;
        upma.do_not_free_on_drop();
        let upma = upma.ptr;
        let mut uset = uset;
        uset.do_not_free_on_drop();
        let uset = uset.ptr;
        let isl_rs_result = unsafe { isl_union_pw_multi_aff_intersect_domain_wrapped_range(upma, uset) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionPwMultiAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_multi_aff_get_space`.
    pub fn get_space(&self) -> Space {
        let context_for_error_message = self.get_ctx();
        let upma = self;
        let upma = upma.ptr;
        let isl_rs_result = unsafe { isl_union_pw_multi_aff_get_space(upma) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Space { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_multi_aff_set_dim_name`.
    pub fn set_dim_name(self, type_: DimType, pos: u32, s: &str) -> UnionPwMultiAff {
        let context_for_error_message = self.get_ctx();
        let upma = self;
        let mut upma = upma;
        upma.do_not_free_on_drop();
        let upma = upma.ptr;
        let s = CString::new(s).unwrap();
        let s = s.as_ptr();
        let isl_rs_result = unsafe { isl_union_pw_multi_aff_set_dim_name(upma, type_, pos, s) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionPwMultiAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_multi_aff_intersect_domain`.
    pub fn intersect_domain(self, uset: UnionSet) -> UnionPwMultiAff {
        let context_for_error_message = self.get_ctx();
        let upma = self;
        let mut upma = upma;
        upma.do_not_free_on_drop();
        let upma = upma.ptr;
        let mut uset = uset;
        uset.do_not_free_on_drop();
        let uset = uset.ptr;
        let isl_rs_result = unsafe { isl_union_pw_multi_aff_intersect_domain(upma, uset) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionPwMultiAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_multi_aff_scale_val`.
    pub fn scale_val(self, val: Val) -> UnionPwMultiAff {
        let context_for_error_message = self.get_ctx();
        let upma = self;
        let mut upma = upma;
        upma.do_not_free_on_drop();
        let upma = upma.ptr;
        let mut val = val;
        val.do_not_free_on_drop();
        let val = val.ptr;
        let isl_rs_result = unsafe { isl_union_pw_multi_aff_scale_val(upma, val) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionPwMultiAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_multi_aff_from_domain`.
    pub fn from_domain(uset: UnionSet) -> UnionPwMultiAff {
        let mut uset = uset;
        uset.do_not_free_on_drop();
        let uset = uset.ptr;
        let isl_rs_result = unsafe { isl_union_pw_multi_aff_from_domain(uset) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = UnionPwMultiAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_multi_aff_intersect_domain_wrapped_domain`.
    pub fn intersect_domain_wrapped_domain(self, uset: UnionSet) -> UnionPwMultiAff {
        let context_for_error_message = self.get_ctx();
        let upma = self;
        let mut upma = upma;
        upma.do_not_free_on_drop();
        let upma = upma.ptr;
        let mut uset = uset;
        uset.do_not_free_on_drop();
        let uset = uset.ptr;
        let isl_rs_result = unsafe { isl_union_pw_multi_aff_intersect_domain_wrapped_domain(upma, uset) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionPwMultiAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_multi_aff_range_product`.
    pub fn range_product(self, upma2: UnionPwMultiAff) -> UnionPwMultiAff {
        let context_for_error_message = self.get_ctx();
        let upma1 = self;
        let mut upma1 = upma1;
        upma1.do_not_free_on_drop();
        let upma1 = upma1.ptr;
        let mut upma2 = upma2;
        upma2.do_not_free_on_drop();
        let upma2 = upma2.ptr;
        let isl_rs_result = unsafe { isl_union_pw_multi_aff_range_product(upma1, upma2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionPwMultiAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_multi_aff_from_union_pw_aff`.
    pub fn from_union_pw_aff(upa: UnionPwAff) -> UnionPwMultiAff {
        let mut upa = upa;
        upa.do_not_free_on_drop();
        let upa = upa.ptr;
        let isl_rs_result = unsafe { isl_union_pw_multi_aff_from_union_pw_aff(upa) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = UnionPwMultiAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_multi_aff_extract_pw_multi_aff`.
    pub fn extract_pw_multi_aff(&self, space: Space) -> PwMultiAff {
        let context_for_error_message = self.get_ctx();
        let upma = self;
        let upma = upma.ptr;
        let mut space = space;
        space.do_not_free_on_drop();
        let space = space.ptr;
        let isl_rs_result = unsafe { isl_union_pw_multi_aff_extract_pw_multi_aff(upma, space) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwMultiAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_multi_aff_apply_union_pw_multi_aff`.
    pub fn apply_union_pw_multi_aff(self, upma2: UnionPwMultiAff) -> UnionPwMultiAff {
        let context_for_error_message = self.get_ctx();
        let upma1 = self;
        let mut upma1 = upma1;
        upma1.do_not_free_on_drop();
        let upma1 = upma1.ptr;
        let mut upma2 = upma2;
        upma2.do_not_free_on_drop();
        let upma2 = upma2.ptr;
        let isl_rs_result = unsafe { isl_union_pw_multi_aff_apply_union_pw_multi_aff(upma1, upma2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionPwMultiAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_multi_aff_add`.
    pub fn add(self, upma2: UnionPwMultiAff) -> UnionPwMultiAff {
        let context_for_error_message = self.get_ctx();
        let upma1 = self;
        let mut upma1 = upma1;
        upma1.do_not_free_on_drop();
        let upma1 = upma1.ptr;
        let mut upma2 = upma2;
        upma2.do_not_free_on_drop();
        let upma2 = upma2.ptr;
        let isl_rs_result = unsafe { isl_union_pw_multi_aff_add(upma1, upma2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionPwMultiAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_multi_aff_from_multi_aff`.
    pub fn from_multi_aff(ma: MultiAff) -> UnionPwMultiAff {
        let mut ma = ma;
        ma.do_not_free_on_drop();
        let ma = ma.ptr;
        let isl_rs_result = unsafe { isl_union_pw_multi_aff_from_multi_aff(ma) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = UnionPwMultiAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_multi_aff_empty_space`.
    pub fn empty_space(space: Space) -> UnionPwMultiAff {
        let mut space = space;
        space.do_not_free_on_drop();
        let space = space.ptr;
        let isl_rs_result = unsafe { isl_union_pw_multi_aff_empty_space(space) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = UnionPwMultiAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_multi_aff_range_factor_range`.
    pub fn range_factor_range(self) -> UnionPwMultiAff {
        let context_for_error_message = self.get_ctx();
        let upma = self;
        let mut upma = upma;
        upma.do_not_free_on_drop();
        let upma = upma.ptr;
        let isl_rs_result = unsafe { isl_union_pw_multi_aff_range_factor_range(upma) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionPwMultiAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_multi_aff_flat_range_product`.
    pub fn flat_range_product(self, upma2: UnionPwMultiAff) -> UnionPwMultiAff {
        let context_for_error_message = self.get_ctx();
        let upma1 = self;
        let mut upma1 = upma1;
        upma1.do_not_free_on_drop();
        let upma1 = upma1.ptr;
        let mut upma2 = upma2;
        upma2.do_not_free_on_drop();
        let upma2 = upma2.ptr;
        let isl_rs_result = unsafe { isl_union_pw_multi_aff_flat_range_product(upma1, upma2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionPwMultiAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_multi_aff_drop_dims`.
    pub fn drop_dims(self, type_: DimType, first: u32, n: u32) -> UnionPwMultiAff {
        let context_for_error_message = self.get_ctx();
        let upma = self;
        let mut upma = upma;
        upma.do_not_free_on_drop();
        let upma = upma.ptr;
        let isl_rs_result = unsafe { isl_union_pw_multi_aff_drop_dims(upma, type_, first, n) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionPwMultiAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_multi_aff_n_pw_multi_aff`.
    pub fn n_pw_multi_aff(&self) -> i32 {
        let upma = self;
        let upma = upma.ptr;
        let isl_rs_result = unsafe { isl_union_pw_multi_aff_n_pw_multi_aff(upma) };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_multi_aff_scale_multi_val`.
    pub fn scale_multi_val(self, mv: MultiVal) -> UnionPwMultiAff {
        let context_for_error_message = self.get_ctx();
        let upma = self;
        let mut upma = upma;
        upma.do_not_free_on_drop();
        let upma = upma.ptr;
        let mut mv = mv;
        mv.do_not_free_on_drop();
        let mv = mv.ptr;
        let isl_rs_result = unsafe { isl_union_pw_multi_aff_scale_multi_val(upma, mv) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionPwMultiAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_multi_aff_from_pw_multi_aff`.
    pub fn from_pw_multi_aff(pma: PwMultiAff) -> UnionPwMultiAff {
        let mut pma = pma;
        pma.do_not_free_on_drop();
        let pma = pma.ptr;
        let isl_rs_result = unsafe { isl_union_pw_multi_aff_from_pw_multi_aff(pma) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = UnionPwMultiAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_multi_aff_add_pw_multi_aff`.
    pub fn add_pw_multi_aff(self, pma: PwMultiAff) -> UnionPwMultiAff {
        let context_for_error_message = self.get_ctx();
        let upma = self;
        let mut upma = upma;
        upma.do_not_free_on_drop();
        let upma = upma.ptr;
        let mut pma = pma;
        pma.do_not_free_on_drop();
        let pma = pma.ptr;
        let isl_rs_result = unsafe { isl_union_pw_multi_aff_add_pw_multi_aff(upma, pma) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionPwMultiAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_multi_aff_align_params`.
    pub fn align_params(self, model: Space) -> UnionPwMultiAff {
        let context_for_error_message = self.get_ctx();
        let upma = self;
        let mut upma = upma;
        upma.do_not_free_on_drop();
        let upma = upma.ptr;
        let mut model = model;
        model.do_not_free_on_drop();
        let model = model.ptr;
        let isl_rs_result = unsafe { isl_union_pw_multi_aff_align_params(upma, model) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionPwMultiAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_multi_aff_involves_nan`.
    pub fn involves_nan(&self) -> bool {
        let context_for_error_message = self.get_ctx();
        let upma = self;
        let upma = upma.ptr;
        let isl_rs_result = unsafe { isl_union_pw_multi_aff_involves_nan(upma) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error: {}", context_for_error_message.last_error_msg()),
        };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_multi_aff_plain_is_equal`.
    pub fn plain_is_equal(&self, upma2: &UnionPwMultiAff) -> bool {
        let context_for_error_message = self.get_ctx();
        let upma1 = self;
        let upma1 = upma1.ptr;
        let upma2 = upma2.ptr;
        let isl_rs_result = unsafe { isl_union_pw_multi_aff_plain_is_equal(upma1, upma2) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error: {}", context_for_error_message.last_error_msg()),
        };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_multi_aff_union_add`.
    pub fn union_add(self, upma2: UnionPwMultiAff) -> UnionPwMultiAff {
        let context_for_error_message = self.get_ctx();
        let upma1 = self;
        let mut upma1 = upma1;
        upma1.do_not_free_on_drop();
        let upma1 = upma1.ptr;
        let mut upma2 = upma2;
        upma2.do_not_free_on_drop();
        let upma2 = upma2.ptr;
        let isl_rs_result = unsafe { isl_union_pw_multi_aff_union_add(upma1, upma2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionPwMultiAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_multi_aff_read_from_str`.
    pub fn read_from_str(ctx: &Context, str_: &str) -> UnionPwMultiAff {
        let ctx = ctx.ptr;
        let str_ = CString::new(str_).unwrap();
        let str_ = str_.as_ptr();
        let isl_rs_result = unsafe { isl_union_pw_multi_aff_read_from_str(ctx, str_) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = UnionPwMultiAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_multi_aff_dim`.
    pub fn dim(&self, type_: DimType) -> i32 {
        let upma = self;
        let upma = upma.ptr;
        let isl_rs_result = unsafe { isl_union_pw_multi_aff_dim(upma, type_) };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_multi_aff_empty_ctx`.
    pub fn empty_ctx(ctx: &Context) -> UnionPwMultiAff {
        let ctx = ctx.ptr;
        let isl_rs_result = unsafe { isl_union_pw_multi_aff_empty_ctx(ctx) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = UnionPwMultiAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_multi_aff_neg`.
    pub fn neg(self) -> UnionPwMultiAff {
        let context_for_error_message = self.get_ctx();
        let upma = self;
        let mut upma = upma;
        upma.do_not_free_on_drop();
        let upma = upma.ptr;
        let isl_rs_result = unsafe { isl_union_pw_multi_aff_neg(upma) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionPwMultiAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_multi_aff_subtract_domain_space`.
    pub fn subtract_domain_space(self, space: Space) -> UnionPwMultiAff {
        let context_for_error_message = self.get_ctx();
        let upma = self;
        let mut upma = upma;
        upma.do_not_free_on_drop();
        let upma = upma.ptr;
        let mut space = space;
        space.do_not_free_on_drop();
        let space = space.ptr;
        let isl_rs_result = unsafe { isl_union_pw_multi_aff_subtract_domain_space(upma, space) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionPwMultiAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_multi_aff_from_aff`.
    pub fn from_aff(aff: Aff) -> UnionPwMultiAff {
        let mut aff = aff;
        aff.do_not_free_on_drop();
        let aff = aff.ptr;
        let isl_rs_result = unsafe { isl_union_pw_multi_aff_from_aff(aff) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = UnionPwMultiAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_multi_aff_multi_val_on_domain`.
    pub fn multi_val_on_domain(domain: UnionSet, mv: MultiVal) -> UnionPwMultiAff {
        let mut domain = domain;
        domain.do_not_free_on_drop();
        let domain = domain.ptr;
        let mut mv = mv;
        mv.do_not_free_on_drop();
        let mv = mv.ptr;
        let isl_rs_result = unsafe { isl_union_pw_multi_aff_multi_val_on_domain(domain, mv) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = UnionPwMultiAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_multi_aff_isa_pw_multi_aff`.
    pub fn isa_pw_multi_aff(&self) -> bool {
        let context_for_error_message = self.get_ctx();
        let upma = self;
        let upma = upma.ptr;
        let isl_rs_result = unsafe { isl_union_pw_multi_aff_isa_pw_multi_aff(upma) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error: {}", context_for_error_message.last_error_msg()),
        };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_multi_aff_gist_params`.
    pub fn gist_params(self, context: Set) -> UnionPwMultiAff {
        let context_for_error_message = self.get_ctx();
        let upma = self;
        let mut upma = upma;
        upma.do_not_free_on_drop();
        let upma = upma.ptr;
        let mut context = context;
        context.do_not_free_on_drop();
        let context = context.ptr;
        let isl_rs_result = unsafe { isl_union_pw_multi_aff_gist_params(upma, context) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionPwMultiAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_multi_aff_subtract_domain`.
    pub fn subtract_domain(self, uset: UnionSet) -> UnionPwMultiAff {
        let context_for_error_message = self.get_ctx();
        let upma = self;
        let mut upma = upma;
        upma.do_not_free_on_drop();
        let upma = upma.ptr;
        let mut uset = uset;
        uset.do_not_free_on_drop();
        let uset = uset.ptr;
        let isl_rs_result = unsafe { isl_union_pw_multi_aff_subtract_domain(upma, uset) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionPwMultiAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_multi_aff_from_multi_union_pw_aff`.
    pub fn from_multi_union_pw_aff(mupa: MultiUnionPwAff) -> UnionPwMultiAff {
        let mut mupa = mupa;
        mupa.do_not_free_on_drop();
        let mupa = mupa.ptr;
        let isl_rs_result = unsafe { isl_union_pw_multi_aff_from_multi_union_pw_aff(mupa) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = UnionPwMultiAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_multi_aff_intersect_params`.
    pub fn intersect_params(self, set: Set) -> UnionPwMultiAff {
        let context_for_error_message = self.get_ctx();
        let upma = self;
        let mut upma = upma;
        upma.do_not_free_on_drop();
        let upma = upma.ptr;
        let mut set = set;
        set.do_not_free_on_drop();
        let set = set.ptr;
        let isl_rs_result = unsafe { isl_union_pw_multi_aff_intersect_params(upma, set) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionPwMultiAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_multi_aff_reset_user`.
    pub fn reset_user(self) -> UnionPwMultiAff {
        let context_for_error_message = self.get_ctx();
        let upma = self;
        let mut upma = upma;
        upma.do_not_free_on_drop();
        let upma = upma.ptr;
        let isl_rs_result = unsafe { isl_union_pw_multi_aff_reset_user(upma) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionPwMultiAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_multi_aff_every_pw_multi_aff`.
    pub fn every_pw_multi_aff<test>(&self, mut test: test, user: *mut c_void) -> bool
    where test: FnMut(&PwMultiAff) -> bool,
    {
        let context_for_error_message = self.get_ctx();
        let upma = self;
        let upma = upma.ptr;
        extern "C" fn test_wrapper<test>(arg_0: uintptr_t, arg_1: *mut c_void) -> i32 {
            let test: *mut test = unsafe { core::mem::transmute(arg_1) };
            let test: &mut test = unsafe { &mut *test };
            todo!()
        }

        let test_user: *mut test = &mut test;
        let test_user: *mut c_void = unsafe { core::mem::transmute(test_user) };
        let test = test_wrapper::<test>;
        let isl_rs_result = unsafe { isl_union_pw_multi_aff_every_pw_multi_aff(upma, test, user) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error: {}", context_for_error_message.last_error_msg()),
        };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_multi_aff_from_union_map`.
    pub fn from_union_map(umap: UnionMap) -> UnionPwMultiAff {
        let mut umap = umap;
        umap.do_not_free_on_drop();
        let umap = umap.ptr;
        let isl_rs_result = unsafe { isl_union_pw_multi_aff_from_union_map(umap) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = UnionPwMultiAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_multi_aff_dump`.
    pub fn dump(&self) {
        let upma = self;
        let upma = upma.ptr;
        let isl_rs_result = unsafe { isl_union_pw_multi_aff_dump(upma) };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_multi_aff_get_ctx`.
    pub fn get_ctx(&self) -> Context {
        let upma = self;
        let upma = upma.ptr;
        let isl_rs_result = unsafe { isl_union_pw_multi_aff_get_ctx(upma) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = Context { ptr: isl_rs_result, should_free_on_drop: true };
        let mut isl_rs_result = isl_rs_result;
        isl_rs_result.do_not_free_on_drop();
        isl_rs_result
    }

    /// Wraps `isl_union_pw_multi_aff_to_list`.
    pub fn to_list(self) -> UnionPwMultiAffList {
        let context_for_error_message = self.get_ctx();
        let el = self;
        let mut el = el;
        el.do_not_free_on_drop();
        let el = el.ptr;
        let isl_rs_result = unsafe { isl_union_pw_multi_aff_to_list(el) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionPwMultiAffList { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_multi_aff_subtract_domain_union_set`.
    pub fn subtract_domain_union_set(self, uset: UnionSet) -> UnionPwMultiAff {
        let context_for_error_message = self.get_ctx();
        let upma = self;
        let mut upma = upma;
        upma.do_not_free_on_drop();
        let upma = upma.ptr;
        let mut uset = uset;
        uset.do_not_free_on_drop();
        let uset = uset.ptr;
        let isl_rs_result = unsafe { isl_union_pw_multi_aff_subtract_domain_union_set(upma, uset) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionPwMultiAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_multi_aff_find_dim_by_name`.
    pub fn find_dim_by_name(&self, type_: DimType, name: &str) -> i32 {
        let upma = self;
        let upma = upma.ptr;
        let name = CString::new(name).unwrap();
        let name = name.as_ptr();
        let isl_rs_result = unsafe { isl_union_pw_multi_aff_find_dim_by_name(upma, type_, name) };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_multi_aff_from_union_set`.
    pub fn from_union_set(uset: UnionSet) -> UnionPwMultiAff {
        let mut uset = uset;
        uset.do_not_free_on_drop();
        let uset = uset.ptr;
        let isl_rs_result = unsafe { isl_union_pw_multi_aff_from_union_set(uset) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = UnionPwMultiAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_multi_aff_pullback_union_pw_multi_aff`.
    pub fn pullback_union_pw_multi_aff(self, upma2: UnionPwMultiAff) -> UnionPwMultiAff {
        let context_for_error_message = self.get_ctx();
        let upma1 = self;
        let mut upma1 = upma1;
        upma1.do_not_free_on_drop();
        let upma1 = upma1.ptr;
        let mut upma2 = upma2;
        upma2.do_not_free_on_drop();
        let upma2 = upma2.ptr;
        let isl_rs_result = unsafe { isl_union_pw_multi_aff_pullback_union_pw_multi_aff(upma1, upma2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionPwMultiAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_multi_aff_as_union_map`.
    pub fn as_union_map(self) -> UnionMap {
        let context_for_error_message = self.get_ctx();
        let upma = self;
        let mut upma = upma;
        upma.do_not_free_on_drop();
        let upma = upma.ptr;
        let isl_rs_result = unsafe { isl_union_pw_multi_aff_as_union_map(upma) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionMap { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_multi_aff_intersect_domain_union_set`.
    pub fn intersect_domain_union_set(self, uset: UnionSet) -> UnionPwMultiAff {
        let context_for_error_message = self.get_ctx();
        let upma = self;
        let mut upma = upma;
        upma.do_not_free_on_drop();
        let upma = upma.ptr;
        let mut uset = uset;
        uset.do_not_free_on_drop();
        let uset = uset.ptr;
        let isl_rs_result = unsafe { isl_union_pw_multi_aff_intersect_domain_union_set(upma, uset) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionPwMultiAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_multi_aff_copy`.
    pub fn copy(&self) -> UnionPwMultiAff {
        let context_for_error_message = self.get_ctx();
        let upma = self;
        let upma = upma.ptr;
        let isl_rs_result = unsafe { isl_union_pw_multi_aff_copy(upma) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionPwMultiAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_multi_aff_involves_locals`.
    pub fn involves_locals(&self) -> bool {
        let context_for_error_message = self.get_ctx();
        let upma = self;
        let upma = upma.ptr;
        let isl_rs_result = unsafe { isl_union_pw_multi_aff_involves_locals(upma) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error: {}", context_for_error_message.last_error_msg()),
        };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_multi_aff_get_union_pw_aff`.
    pub fn get_union_pw_aff(&self, pos: i32) -> UnionPwAff {
        let context_for_error_message = self.get_ctx();
        let upma = self;
        let upma = upma.ptr;
        let isl_rs_result = unsafe { isl_union_pw_multi_aff_get_union_pw_aff(upma, pos) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionPwAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_multi_aff_range_factor_domain`.
    pub fn range_factor_domain(self) -> UnionPwMultiAff {
        let context_for_error_message = self.get_ctx();
        let upma = self;
        let mut upma = upma;
        upma.do_not_free_on_drop();
        let upma = upma.ptr;
        let isl_rs_result = unsafe { isl_union_pw_multi_aff_range_factor_domain(upma) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionPwMultiAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_multi_aff_gist`.
    pub fn gist(self, context: UnionSet) -> UnionPwMultiAff {
        let context_for_error_message = self.get_ctx();
        let upma = self;
        let mut upma = upma;
        upma.do_not_free_on_drop();
        let upma = upma.ptr;
        let mut context = context;
        context.do_not_free_on_drop();
        let context = context.ptr;
        let isl_rs_result = unsafe { isl_union_pw_multi_aff_gist(upma, context) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionPwMultiAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_multi_aff_sub`.
    pub fn sub(self, upma2: UnionPwMultiAff) -> UnionPwMultiAff {
        let context_for_error_message = self.get_ctx();
        let upma1 = self;
        let mut upma1 = upma1;
        upma1.do_not_free_on_drop();
        let upma1 = upma1.ptr;
        let mut upma2 = upma2;
        upma2.do_not_free_on_drop();
        let upma2 = upma2.ptr;
        let isl_rs_result = unsafe { isl_union_pw_multi_aff_sub(upma1, upma2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionPwMultiAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_multi_aff_free`.
    pub fn free(self) -> UnionPwMultiAff {
        let context_for_error_message = self.get_ctx();
        let upma = self;
        let mut upma = upma;
        upma.do_not_free_on_drop();
        let upma = upma.ptr;
        let isl_rs_result = unsafe { isl_union_pw_multi_aff_free(upma) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionPwMultiAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_multi_aff_intersect_domain_space`.
    pub fn intersect_domain_space(self, space: Space) -> UnionPwMultiAff {
        let context_for_error_message = self.get_ctx();
        let upma = self;
        let mut upma = upma;
        upma.do_not_free_on_drop();
        let upma = upma.ptr;
        let mut space = space;
        space.do_not_free_on_drop();
        let space = space.ptr;
        let isl_rs_result = unsafe { isl_union_pw_multi_aff_intersect_domain_space(upma, space) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionPwMultiAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_multi_aff_preimage_domain_wrapped_domain_union_pw_multi_aff`.
    pub fn preimage_domain_wrapped_domain_union_pw_multi_aff(self, upma2: UnionPwMultiAff) -> UnionPwMultiAff {
        let context_for_error_message = self.get_ctx();
        let upma1 = self;
        let mut upma1 = upma1;
        upma1.do_not_free_on_drop();
        let upma1 = upma1.ptr;
        let mut upma2 = upma2;
        upma2.do_not_free_on_drop();
        let upma2 = upma2.ptr;
        let isl_rs_result = unsafe { isl_union_pw_multi_aff_preimage_domain_wrapped_domain_union_pw_multi_aff(upma1, upma2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionPwMultiAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_multi_aff_plain_is_empty`.
    pub fn plain_is_empty(&self) -> bool {
        let context_for_error_message = self.get_ctx();
        let upma = self;
        let upma = upma.ptr;
        let isl_rs_result = unsafe { isl_union_pw_multi_aff_plain_is_empty(upma) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error: {}", context_for_error_message.last_error_msg()),
        };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_multi_aff_as_multi_union_pw_aff`.
    pub fn as_multi_union_pw_aff(self) -> MultiUnionPwAff {
        let context_for_error_message = self.get_ctx();
        let upma = self;
        let mut upma = upma;
        upma.do_not_free_on_drop();
        let upma = upma.ptr;
        let isl_rs_result = unsafe { isl_union_pw_multi_aff_as_multi_union_pw_aff(upma) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = MultiUnionPwAff { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_multi_aff_to_str`.
    pub fn to_str(&self) -> &str {
        let upma = self;
        let upma = upma.ptr;
        let isl_rs_result = unsafe { isl_union_pw_multi_aff_to_str(upma) };
        let isl_rs_result = unsafe { CStr::from_ptr(isl_rs_result) };
        let isl_rs_result = isl_rs_result.to_str().unwrap();
        isl_rs_result
    }

    /// Wraps `isl_union_pw_multi_aff_domain`.
    pub fn domain(self) -> UnionSet {
        let context_for_error_message = self.get_ctx();
        let upma = self;
        let mut upma = upma;
        upma.do_not_free_on_drop();
        let upma = upma.ptr;
        let isl_rs_result = unsafe { isl_union_pw_multi_aff_domain(upma) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionSet { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Does not call isl_xxx_free() on being dropped. (For internal use only.)
    pub fn do_not_free_on_drop(&mut self) {
        self.should_free_on_drop = false;
    }
}

impl Drop for UnionPwMultiAff {
    fn drop(&mut self) {
        if self.should_free_on_drop {
            unsafe { isl_union_pw_multi_aff_free(self.ptr); }
        }
    }
}