// Automatically generated by isl_bindings_generator.
// LICENSE: MIT

use crate::bindings::{
    Aff, BasicMap, Context, DimType, Id, LocalSpace, Mat, Point, Set, Space, Val,
};
use libc::uintptr_t;
use std::ffi::{CStr, CString};
use std::os::raw::c_char;

/// Wraps `isl_basic_set`.
pub struct BasicSet {
    pub ptr: uintptr_t,
    pub should_free_on_drop: bool,
}

extern "C" {

    fn isl_basic_set_n_dim(bset: uintptr_t) -> i32;

    fn isl_basic_set_n_param(bset: uintptr_t) -> i32;

    fn isl_basic_set_total_dim(bset: uintptr_t) -> i32;

    fn isl_basic_set_dim(bset: uintptr_t, type_: DimType) -> i32;

    fn isl_basic_set_get_ctx(bset: uintptr_t) -> uintptr_t;

    fn isl_basic_set_get_space(bset: uintptr_t) -> uintptr_t;

    fn isl_basic_set_get_div(bset: uintptr_t, pos: i32) -> uintptr_t;

    fn isl_basic_set_get_local_space(bset: uintptr_t) -> uintptr_t;

    fn isl_basic_set_get_tuple_name(bset: uintptr_t) -> *const c_char;

    fn isl_basic_set_set_tuple_name(set: uintptr_t, s: *const c_char) -> uintptr_t;

    fn isl_basic_set_get_dim_name(bset: uintptr_t, type_: DimType, pos: u32) -> *const c_char;

    fn isl_basic_set_set_dim_name(bset: uintptr_t, type_: DimType, pos: u32, s: *const c_char)
                                  -> uintptr_t;

    fn isl_basic_set_get_dim_id(bset: uintptr_t, type_: DimType, pos: u32) -> uintptr_t;

    fn isl_basic_set_set_tuple_id(bset: uintptr_t, id: uintptr_t) -> uintptr_t;

    fn isl_basic_set_is_rational(bset: uintptr_t) -> i32;

    fn isl_basic_set_free(bset: uintptr_t) -> uintptr_t;

    fn isl_basic_set_copy(bset: uintptr_t) -> uintptr_t;

    fn isl_basic_set_empty(space: uintptr_t) -> uintptr_t;

    fn isl_basic_set_universe(space: uintptr_t) -> uintptr_t;

    fn isl_basic_set_nat_universe(space: uintptr_t) -> uintptr_t;

    fn isl_basic_set_positive_orthant(space: uintptr_t) -> uintptr_t;

    fn isl_basic_set_intersect(bset1: uintptr_t, bset2: uintptr_t) -> uintptr_t;

    fn isl_basic_set_intersect_params(bset1: uintptr_t, bset2: uintptr_t) -> uintptr_t;

    fn isl_basic_set_apply(bset: uintptr_t, bmap: uintptr_t) -> uintptr_t;

    fn isl_basic_set_affine_hull(bset: uintptr_t) -> uintptr_t;

    fn isl_basic_set_remove_dims(bset: uintptr_t, type_: DimType, first: u32, n: u32) -> uintptr_t;

    fn isl_basic_set_sample(bset: uintptr_t) -> uintptr_t;

    fn isl_basic_set_detect_equalities(bset: uintptr_t) -> uintptr_t;

    fn isl_basic_set_remove_redundancies(bset: uintptr_t) -> uintptr_t;

    fn isl_basic_set_read_from_str(ctx: uintptr_t, str_: *const c_char) -> uintptr_t;

    fn isl_basic_set_dump(bset: uintptr_t);

    fn isl_basic_set_fix_si(bset: uintptr_t, type_: DimType, pos: u32, value: i32) -> uintptr_t;

    fn isl_basic_set_fix_val(bset: uintptr_t, type_: DimType, pos: u32, v: uintptr_t) -> uintptr_t;

    fn isl_basic_set_lower_bound_val(bset: uintptr_t, type_: DimType, pos: u32, value: uintptr_t)
                                     -> uintptr_t;

    fn isl_basic_set_upper_bound_val(bset: uintptr_t, type_: DimType, pos: u32, value: uintptr_t)
                                     -> uintptr_t;

    fn isl_basic_set_is_equal(bset1: uintptr_t, bset2: uintptr_t) -> i32;

    fn isl_basic_set_is_disjoint(bset1: uintptr_t, bset2: uintptr_t) -> i32;

    fn isl_basic_set_lexmin(bset: uintptr_t) -> uintptr_t;

    fn isl_basic_set_lexmax(bset: uintptr_t) -> uintptr_t;

    fn isl_basic_set_union(bset1: uintptr_t, bset2: uintptr_t) -> uintptr_t;

    fn isl_basic_set_compare_at(bset1: uintptr_t, bset2: uintptr_t, pos: i32) -> i32;

    fn isl_basic_set_params(bset: uintptr_t) -> uintptr_t;

    fn isl_basic_set_from_params(bset: uintptr_t) -> uintptr_t;

    fn isl_basic_set_plain_is_universe(bset: uintptr_t) -> i32;

    fn isl_basic_set_is_universe(bset: uintptr_t) -> i32;

    fn isl_basic_set_plain_is_empty(bset: uintptr_t) -> i32;

    fn isl_basic_set_is_empty(bset: uintptr_t) -> i32;

    fn isl_basic_set_is_bounded(bset: uintptr_t) -> i32;

    fn isl_basic_set_is_subset(bset1: uintptr_t, bset2: uintptr_t) -> i32;

    fn isl_basic_set_plain_is_equal(bset1: uintptr_t, bset2: uintptr_t) -> i32;

    fn isl_basic_set_to_set(bset: uintptr_t) -> uintptr_t;

    fn isl_basic_set_sample_point(bset: uintptr_t) -> uintptr_t;

    fn isl_basic_set_flat_product(bset1: uintptr_t, bset2: uintptr_t) -> uintptr_t;

    fn isl_basic_set_insert_dims(bset: uintptr_t, type_: DimType, pos: u32, n: u32) -> uintptr_t;

    fn isl_basic_set_add_dims(bset: uintptr_t, type_: DimType, n: u32) -> uintptr_t;

    fn isl_basic_set_move_dims(bset: uintptr_t, dst_type: DimType, dst_pos: u32,
                               src_type: DimType, src_pos: u32, n: u32)
                               -> uintptr_t;

    fn isl_basic_set_project_out(bset: uintptr_t, type_: DimType, first: u32, n: u32) -> uintptr_t;

    fn isl_basic_set_remove_divs(bset: uintptr_t) -> uintptr_t;

    fn isl_basic_set_eliminate(bset: uintptr_t, type_: DimType, first: u32, n: u32) -> uintptr_t;

    fn isl_basic_set_remove_divs_involving_dims(bset: uintptr_t, type_: DimType, first: u32,
                                                n: u32)
                                                -> uintptr_t;

    fn isl_basic_set_remove_unknown_divs(bset: uintptr_t) -> uintptr_t;

    fn isl_basic_set_drop_constraints_involving_dims(bset: uintptr_t, type_: DimType, first: u32,
                                                     n: u32)
                                                     -> uintptr_t;

    fn isl_basic_set_drop_constraints_not_involving_dims(bset: uintptr_t, type_: DimType,
                                                         first: u32, n: u32)
                                                         -> uintptr_t;

    fn isl_basic_set_involves_dims(bset: uintptr_t, type_: DimType, first: u32, n: u32) -> i32;

    fn isl_basic_set_neg(bset: uintptr_t) -> uintptr_t;

    fn isl_basic_set_compute_divs(bset: uintptr_t) -> uintptr_t;

    fn isl_basic_set_gist(bset: uintptr_t, context: uintptr_t) -> uintptr_t;

    fn isl_basic_set_from_point(pnt: uintptr_t) -> uintptr_t;

    fn isl_basic_set_box_from_points(pnt1: uintptr_t, pnt2: uintptr_t) -> uintptr_t;

    fn isl_basic_set_lift(bset: uintptr_t) -> uintptr_t;

    fn isl_basic_set_align_params(bset: uintptr_t, model: uintptr_t) -> uintptr_t;

    fn isl_basic_set_drop_unused_params(bset: uintptr_t) -> uintptr_t;

    fn isl_basic_set_equalities_matrix(bset: uintptr_t, c1: DimType, c2: DimType, c3: DimType,
                                       c4: DimType)
                                       -> uintptr_t;

    fn isl_basic_set_inequalities_matrix(bset: uintptr_t, c1: DimType, c2: DimType, c3: DimType,
                                         c4: DimType)
                                         -> uintptr_t;

    fn isl_basic_set_from_constraint_matrices(space: uintptr_t, eq: uintptr_t, ineq: uintptr_t,
                                              c1: DimType, c2: DimType, c3: DimType, c4: DimType)
                                              -> uintptr_t;

    fn isl_basic_set_reduced_basis(bset: uintptr_t) -> uintptr_t;

    fn isl_basic_set_coefficients(bset: uintptr_t) -> uintptr_t;

    fn isl_basic_set_solutions(bset: uintptr_t) -> uintptr_t;

    fn isl_basic_set_to_str(bset: uintptr_t) -> *const c_char;

}

impl BasicSet {
    /// Wraps `isl_basic_set_n_dim`.
    pub fn n_dim(&self) -> i32 {
        let bset = self;
        let bset = bset.ptr;
        let isl_rs_result = unsafe { isl_basic_set_n_dim(bset) };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_n_param`.
    pub fn n_param(&self) -> i32 {
        let bset = self;
        let bset = bset.ptr;
        let isl_rs_result = unsafe { isl_basic_set_n_param(bset) };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_total_dim`.
    pub fn total_dim(&self) -> i32 {
        let bset = self;
        let bset = bset.ptr;
        let isl_rs_result = unsafe { isl_basic_set_total_dim(bset) };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_dim`.
    pub fn dim(&self, type_: DimType) -> i32 {
        let bset = self;
        let bset = bset.ptr;
        let isl_rs_result = unsafe { isl_basic_set_dim(bset, type_) };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_get_ctx`.
    pub fn get_ctx(&self) -> Context {
        let bset = self;
        let bset = bset.ptr;
        let isl_rs_result = unsafe { isl_basic_set_get_ctx(bset) };
        let isl_rs_result = Context { ptr: isl_rs_result,
                                      should_free_on_drop: true };
        let mut isl_rs_result = isl_rs_result;
        isl_rs_result.do_not_free_on_drop();
        isl_rs_result
    }

    /// Wraps `isl_basic_set_get_space`.
    pub fn get_space(&self) -> Space {
        let bset = self;
        let bset = bset.ptr;
        let isl_rs_result = unsafe { isl_basic_set_get_space(bset) };
        let isl_rs_result = Space { ptr: isl_rs_result,
                                    should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_get_div`.
    pub fn get_div(&self, pos: i32) -> Aff {
        let bset = self;
        let bset = bset.ptr;
        let isl_rs_result = unsafe { isl_basic_set_get_div(bset, pos) };
        let isl_rs_result = Aff { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_get_local_space`.
    pub fn get_local_space(&self) -> LocalSpace {
        let bset = self;
        let bset = bset.ptr;
        let isl_rs_result = unsafe { isl_basic_set_get_local_space(bset) };
        let isl_rs_result = LocalSpace { ptr: isl_rs_result,
                                         should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_get_tuple_name`.
    pub fn get_tuple_name(&self) -> &str {
        let bset = self;
        let bset = bset.ptr;
        let isl_rs_result = unsafe { isl_basic_set_get_tuple_name(bset) };
        let isl_rs_result = unsafe { CStr::from_ptr(isl_rs_result) };
        let isl_rs_result = isl_rs_result.to_str().unwrap();
        isl_rs_result
    }

    /// Wraps `isl_basic_set_set_tuple_name`.
    pub fn set_tuple_name(self, s: &str) -> BasicSet {
        let set = self;
        let mut set = set;
        set.do_not_free_on_drop();
        let set = set.ptr;
        let s = CString::new(s).unwrap();
        let s = s.as_ptr();
        let isl_rs_result = unsafe { isl_basic_set_set_tuple_name(set, s) };
        let isl_rs_result = BasicSet { ptr: isl_rs_result,
                                       should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_get_dim_name`.
    pub fn get_dim_name(&self, type_: DimType, pos: u32) -> &str {
        let bset = self;
        let bset = bset.ptr;
        let isl_rs_result = unsafe { isl_basic_set_get_dim_name(bset, type_, pos) };
        let isl_rs_result = unsafe { CStr::from_ptr(isl_rs_result) };
        let isl_rs_result = isl_rs_result.to_str().unwrap();
        isl_rs_result
    }

    /// Wraps `isl_basic_set_set_dim_name`.
    pub fn set_dim_name(self, type_: DimType, pos: u32, s: &str) -> BasicSet {
        let bset = self;
        let mut bset = bset;
        bset.do_not_free_on_drop();
        let bset = bset.ptr;
        let s = CString::new(s).unwrap();
        let s = s.as_ptr();
        let isl_rs_result = unsafe { isl_basic_set_set_dim_name(bset, type_, pos, s) };
        let isl_rs_result = BasicSet { ptr: isl_rs_result,
                                       should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_get_dim_id`.
    pub fn get_dim_id(&self, type_: DimType, pos: u32) -> Id {
        let bset = self;
        let bset = bset.ptr;
        let isl_rs_result = unsafe { isl_basic_set_get_dim_id(bset, type_, pos) };
        let isl_rs_result = Id { ptr: isl_rs_result,
                                 should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_set_tuple_id`.
    pub fn set_tuple_id(self, id: Id) -> BasicSet {
        let bset = self;
        let mut bset = bset;
        bset.do_not_free_on_drop();
        let bset = bset.ptr;
        let mut id = id;
        id.do_not_free_on_drop();
        let id = id.ptr;
        let isl_rs_result = unsafe { isl_basic_set_set_tuple_id(bset, id) };
        let isl_rs_result = BasicSet { ptr: isl_rs_result,
                                       should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_is_rational`.
    pub fn is_rational(&self) -> i32 {
        let bset = self;
        let bset = bset.ptr;
        let isl_rs_result = unsafe { isl_basic_set_is_rational(bset) };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_free`.
    pub fn free(self) -> BasicSet {
        let bset = self;
        let mut bset = bset;
        bset.do_not_free_on_drop();
        let bset = bset.ptr;
        let isl_rs_result = unsafe { isl_basic_set_free(bset) };
        let isl_rs_result = BasicSet { ptr: isl_rs_result,
                                       should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_copy`.
    pub fn copy(&self) -> BasicSet {
        let bset = self;
        let bset = bset.ptr;
        let isl_rs_result = unsafe { isl_basic_set_copy(bset) };
        let isl_rs_result = BasicSet { ptr: isl_rs_result,
                                       should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_empty`.
    pub fn empty(space: Space) -> BasicSet {
        let mut space = space;
        space.do_not_free_on_drop();
        let space = space.ptr;
        let isl_rs_result = unsafe { isl_basic_set_empty(space) };
        let isl_rs_result = BasicSet { ptr: isl_rs_result,
                                       should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_universe`.
    pub fn universe(space: Space) -> BasicSet {
        let mut space = space;
        space.do_not_free_on_drop();
        let space = space.ptr;
        let isl_rs_result = unsafe { isl_basic_set_universe(space) };
        let isl_rs_result = BasicSet { ptr: isl_rs_result,
                                       should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_nat_universe`.
    pub fn nat_universe(space: Space) -> BasicSet {
        let mut space = space;
        space.do_not_free_on_drop();
        let space = space.ptr;
        let isl_rs_result = unsafe { isl_basic_set_nat_universe(space) };
        let isl_rs_result = BasicSet { ptr: isl_rs_result,
                                       should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_positive_orthant`.
    pub fn positive_orthant(space: Space) -> BasicSet {
        let mut space = space;
        space.do_not_free_on_drop();
        let space = space.ptr;
        let isl_rs_result = unsafe { isl_basic_set_positive_orthant(space) };
        let isl_rs_result = BasicSet { ptr: isl_rs_result,
                                       should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_intersect`.
    pub fn intersect(self, bset2: BasicSet) -> BasicSet {
        let bset1 = self;
        let mut bset1 = bset1;
        bset1.do_not_free_on_drop();
        let bset1 = bset1.ptr;
        let mut bset2 = bset2;
        bset2.do_not_free_on_drop();
        let bset2 = bset2.ptr;
        let isl_rs_result = unsafe { isl_basic_set_intersect(bset1, bset2) };
        let isl_rs_result = BasicSet { ptr: isl_rs_result,
                                       should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_intersect_params`.
    pub fn intersect_params(self, bset2: BasicSet) -> BasicSet {
        let bset1 = self;
        let mut bset1 = bset1;
        bset1.do_not_free_on_drop();
        let bset1 = bset1.ptr;
        let mut bset2 = bset2;
        bset2.do_not_free_on_drop();
        let bset2 = bset2.ptr;
        let isl_rs_result = unsafe { isl_basic_set_intersect_params(bset1, bset2) };
        let isl_rs_result = BasicSet { ptr: isl_rs_result,
                                       should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_apply`.
    pub fn apply(self, bmap: BasicMap) -> BasicSet {
        let bset = self;
        let mut bset = bset;
        bset.do_not_free_on_drop();
        let bset = bset.ptr;
        let mut bmap = bmap;
        bmap.do_not_free_on_drop();
        let bmap = bmap.ptr;
        let isl_rs_result = unsafe { isl_basic_set_apply(bset, bmap) };
        let isl_rs_result = BasicSet { ptr: isl_rs_result,
                                       should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_affine_hull`.
    pub fn affine_hull(self) -> BasicSet {
        let bset = self;
        let mut bset = bset;
        bset.do_not_free_on_drop();
        let bset = bset.ptr;
        let isl_rs_result = unsafe { isl_basic_set_affine_hull(bset) };
        let isl_rs_result = BasicSet { ptr: isl_rs_result,
                                       should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_remove_dims`.
    pub fn remove_dims(self, type_: DimType, first: u32, n: u32) -> BasicSet {
        let bset = self;
        let mut bset = bset;
        bset.do_not_free_on_drop();
        let bset = bset.ptr;
        let isl_rs_result = unsafe { isl_basic_set_remove_dims(bset, type_, first, n) };
        let isl_rs_result = BasicSet { ptr: isl_rs_result,
                                       should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_sample`.
    pub fn sample(self) -> BasicSet {
        let bset = self;
        let mut bset = bset;
        bset.do_not_free_on_drop();
        let bset = bset.ptr;
        let isl_rs_result = unsafe { isl_basic_set_sample(bset) };
        let isl_rs_result = BasicSet { ptr: isl_rs_result,
                                       should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_detect_equalities`.
    pub fn detect_equalities(self) -> BasicSet {
        let bset = self;
        let mut bset = bset;
        bset.do_not_free_on_drop();
        let bset = bset.ptr;
        let isl_rs_result = unsafe { isl_basic_set_detect_equalities(bset) };
        let isl_rs_result = BasicSet { ptr: isl_rs_result,
                                       should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_remove_redundancies`.
    pub fn remove_redundancies(self) -> BasicSet {
        let bset = self;
        let mut bset = bset;
        bset.do_not_free_on_drop();
        let bset = bset.ptr;
        let isl_rs_result = unsafe { isl_basic_set_remove_redundancies(bset) };
        let isl_rs_result = BasicSet { ptr: isl_rs_result,
                                       should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_read_from_str`.
    pub fn read_from_str(ctx: &Context, str_: &str) -> BasicSet {
        let ctx = ctx.ptr;
        let str_ = CString::new(str_).unwrap();
        let str_ = str_.as_ptr();
        let isl_rs_result = unsafe { isl_basic_set_read_from_str(ctx, str_) };
        let isl_rs_result = BasicSet { ptr: isl_rs_result,
                                       should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_dump`.
    pub fn dump(&self) {
        let bset = self;
        let bset = bset.ptr;
        let isl_rs_result = unsafe { isl_basic_set_dump(bset) };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_fix_si`.
    pub fn fix_si(self, type_: DimType, pos: u32, value: i32) -> BasicSet {
        let bset = self;
        let mut bset = bset;
        bset.do_not_free_on_drop();
        let bset = bset.ptr;
        let isl_rs_result = unsafe { isl_basic_set_fix_si(bset, type_, pos, value) };
        let isl_rs_result = BasicSet { ptr: isl_rs_result,
                                       should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_fix_val`.
    pub fn fix_val(self, type_: DimType, pos: u32, v: Val) -> BasicSet {
        let bset = self;
        let mut bset = bset;
        bset.do_not_free_on_drop();
        let bset = bset.ptr;
        let mut v = v;
        v.do_not_free_on_drop();
        let v = v.ptr;
        let isl_rs_result = unsafe { isl_basic_set_fix_val(bset, type_, pos, v) };
        let isl_rs_result = BasicSet { ptr: isl_rs_result,
                                       should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_lower_bound_val`.
    pub fn lower_bound_val(self, type_: DimType, pos: u32, value: Val) -> BasicSet {
        let bset = self;
        let mut bset = bset;
        bset.do_not_free_on_drop();
        let bset = bset.ptr;
        let mut value = value;
        value.do_not_free_on_drop();
        let value = value.ptr;
        let isl_rs_result = unsafe { isl_basic_set_lower_bound_val(bset, type_, pos, value) };
        let isl_rs_result = BasicSet { ptr: isl_rs_result,
                                       should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_upper_bound_val`.
    pub fn upper_bound_val(self, type_: DimType, pos: u32, value: Val) -> BasicSet {
        let bset = self;
        let mut bset = bset;
        bset.do_not_free_on_drop();
        let bset = bset.ptr;
        let mut value = value;
        value.do_not_free_on_drop();
        let value = value.ptr;
        let isl_rs_result = unsafe { isl_basic_set_upper_bound_val(bset, type_, pos, value) };
        let isl_rs_result = BasicSet { ptr: isl_rs_result,
                                       should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_is_equal`.
    pub fn is_equal(&self, bset2: &BasicSet) -> bool {
        let bset1 = self;
        let bset1 = bset1.ptr;
        let bset2 = bset2.ptr;
        let isl_rs_result = unsafe { isl_basic_set_is_equal(bset1, bset2) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("Got isl_bool = -1"),
        };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_is_disjoint`.
    pub fn is_disjoint(&self, bset2: &BasicSet) -> bool {
        let bset1 = self;
        let bset1 = bset1.ptr;
        let bset2 = bset2.ptr;
        let isl_rs_result = unsafe { isl_basic_set_is_disjoint(bset1, bset2) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("Got isl_bool = -1"),
        };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_lexmin`.
    pub fn lexmin(self) -> Set {
        let bset = self;
        let mut bset = bset;
        bset.do_not_free_on_drop();
        let bset = bset.ptr;
        let isl_rs_result = unsafe { isl_basic_set_lexmin(bset) };
        let isl_rs_result = Set { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_lexmax`.
    pub fn lexmax(self) -> Set {
        let bset = self;
        let mut bset = bset;
        bset.do_not_free_on_drop();
        let bset = bset.ptr;
        let isl_rs_result = unsafe { isl_basic_set_lexmax(bset) };
        let isl_rs_result = Set { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_union`.
    pub fn union(self, bset2: BasicSet) -> Set {
        let bset1 = self;
        let mut bset1 = bset1;
        bset1.do_not_free_on_drop();
        let bset1 = bset1.ptr;
        let mut bset2 = bset2;
        bset2.do_not_free_on_drop();
        let bset2 = bset2.ptr;
        let isl_rs_result = unsafe { isl_basic_set_union(bset1, bset2) };
        let isl_rs_result = Set { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_compare_at`.
    pub fn compare_at(&self, bset2: &BasicSet, pos: i32) -> i32 {
        let bset1 = self;
        let bset1 = bset1.ptr;
        let bset2 = bset2.ptr;
        let isl_rs_result = unsafe { isl_basic_set_compare_at(bset1, bset2, pos) };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_params`.
    pub fn params(self) -> BasicSet {
        let bset = self;
        let mut bset = bset;
        bset.do_not_free_on_drop();
        let bset = bset.ptr;
        let isl_rs_result = unsafe { isl_basic_set_params(bset) };
        let isl_rs_result = BasicSet { ptr: isl_rs_result,
                                       should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_from_params`.
    pub fn from_params(self) -> BasicSet {
        let bset = self;
        let mut bset = bset;
        bset.do_not_free_on_drop();
        let bset = bset.ptr;
        let isl_rs_result = unsafe { isl_basic_set_from_params(bset) };
        let isl_rs_result = BasicSet { ptr: isl_rs_result,
                                       should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_plain_is_universe`.
    pub fn plain_is_universe(&self) -> bool {
        let bset = self;
        let bset = bset.ptr;
        let isl_rs_result = unsafe { isl_basic_set_plain_is_universe(bset) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("Got isl_bool = -1"),
        };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_is_universe`.
    pub fn is_universe(&self) -> bool {
        let bset = self;
        let bset = bset.ptr;
        let isl_rs_result = unsafe { isl_basic_set_is_universe(bset) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("Got isl_bool = -1"),
        };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_plain_is_empty`.
    pub fn plain_is_empty(&self) -> bool {
        let bset = self;
        let bset = bset.ptr;
        let isl_rs_result = unsafe { isl_basic_set_plain_is_empty(bset) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("Got isl_bool = -1"),
        };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_is_empty`.
    pub fn is_empty(&self) -> bool {
        let bset = self;
        let bset = bset.ptr;
        let isl_rs_result = unsafe { isl_basic_set_is_empty(bset) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("Got isl_bool = -1"),
        };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_is_bounded`.
    pub fn is_bounded(&self) -> bool {
        let bset = self;
        let bset = bset.ptr;
        let isl_rs_result = unsafe { isl_basic_set_is_bounded(bset) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("Got isl_bool = -1"),
        };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_is_subset`.
    pub fn is_subset(&self, bset2: &BasicSet) -> bool {
        let bset1 = self;
        let bset1 = bset1.ptr;
        let bset2 = bset2.ptr;
        let isl_rs_result = unsafe { isl_basic_set_is_subset(bset1, bset2) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("Got isl_bool = -1"),
        };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_plain_is_equal`.
    pub fn plain_is_equal(&self, bset2: &BasicSet) -> bool {
        let bset1 = self;
        let bset1 = bset1.ptr;
        let bset2 = bset2.ptr;
        let isl_rs_result = unsafe { isl_basic_set_plain_is_equal(bset1, bset2) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("Got isl_bool = -1"),
        };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_to_set`.
    pub fn to_set(self) -> Set {
        let bset = self;
        let mut bset = bset;
        bset.do_not_free_on_drop();
        let bset = bset.ptr;
        let isl_rs_result = unsafe { isl_basic_set_to_set(bset) };
        let isl_rs_result = Set { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_sample_point`.
    pub fn sample_point(self) -> Point {
        let bset = self;
        let mut bset = bset;
        bset.do_not_free_on_drop();
        let bset = bset.ptr;
        let isl_rs_result = unsafe { isl_basic_set_sample_point(bset) };
        let isl_rs_result = Point { ptr: isl_rs_result,
                                    should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_flat_product`.
    pub fn flat_product(self, bset2: BasicSet) -> BasicSet {
        let bset1 = self;
        let mut bset1 = bset1;
        bset1.do_not_free_on_drop();
        let bset1 = bset1.ptr;
        let mut bset2 = bset2;
        bset2.do_not_free_on_drop();
        let bset2 = bset2.ptr;
        let isl_rs_result = unsafe { isl_basic_set_flat_product(bset1, bset2) };
        let isl_rs_result = BasicSet { ptr: isl_rs_result,
                                       should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_insert_dims`.
    pub fn insert_dims(self, type_: DimType, pos: u32, n: u32) -> BasicSet {
        let bset = self;
        let mut bset = bset;
        bset.do_not_free_on_drop();
        let bset = bset.ptr;
        let isl_rs_result = unsafe { isl_basic_set_insert_dims(bset, type_, pos, n) };
        let isl_rs_result = BasicSet { ptr: isl_rs_result,
                                       should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_add_dims`.
    pub fn add_dims(self, type_: DimType, n: u32) -> BasicSet {
        let bset = self;
        let mut bset = bset;
        bset.do_not_free_on_drop();
        let bset = bset.ptr;
        let isl_rs_result = unsafe { isl_basic_set_add_dims(bset, type_, n) };
        let isl_rs_result = BasicSet { ptr: isl_rs_result,
                                       should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_move_dims`.
    pub fn move_dims(self, dst_type: DimType, dst_pos: u32, src_type: DimType, src_pos: u32,
                     n: u32)
                     -> BasicSet {
        let bset = self;
        let mut bset = bset;
        bset.do_not_free_on_drop();
        let bset = bset.ptr;
        let isl_rs_result =
            unsafe { isl_basic_set_move_dims(bset, dst_type, dst_pos, src_type, src_pos, n) };
        let isl_rs_result = BasicSet { ptr: isl_rs_result,
                                       should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_project_out`.
    pub fn project_out(self, type_: DimType, first: u32, n: u32) -> BasicSet {
        let bset = self;
        let mut bset = bset;
        bset.do_not_free_on_drop();
        let bset = bset.ptr;
        let isl_rs_result = unsafe { isl_basic_set_project_out(bset, type_, first, n) };
        let isl_rs_result = BasicSet { ptr: isl_rs_result,
                                       should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_remove_divs`.
    pub fn remove_divs(self) -> BasicSet {
        let bset = self;
        let mut bset = bset;
        bset.do_not_free_on_drop();
        let bset = bset.ptr;
        let isl_rs_result = unsafe { isl_basic_set_remove_divs(bset) };
        let isl_rs_result = BasicSet { ptr: isl_rs_result,
                                       should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_eliminate`.
    pub fn eliminate(self, type_: DimType, first: u32, n: u32) -> BasicSet {
        let bset = self;
        let mut bset = bset;
        bset.do_not_free_on_drop();
        let bset = bset.ptr;
        let isl_rs_result = unsafe { isl_basic_set_eliminate(bset, type_, first, n) };
        let isl_rs_result = BasicSet { ptr: isl_rs_result,
                                       should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_remove_divs_involving_dims`.
    pub fn remove_divs_involving_dims(self, type_: DimType, first: u32, n: u32) -> BasicSet {
        let bset = self;
        let mut bset = bset;
        bset.do_not_free_on_drop();
        let bset = bset.ptr;
        let isl_rs_result =
            unsafe { isl_basic_set_remove_divs_involving_dims(bset, type_, first, n) };
        let isl_rs_result = BasicSet { ptr: isl_rs_result,
                                       should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_remove_unknown_divs`.
    pub fn remove_unknown_divs(self) -> BasicSet {
        let bset = self;
        let mut bset = bset;
        bset.do_not_free_on_drop();
        let bset = bset.ptr;
        let isl_rs_result = unsafe { isl_basic_set_remove_unknown_divs(bset) };
        let isl_rs_result = BasicSet { ptr: isl_rs_result,
                                       should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_drop_constraints_involving_dims`.
    pub fn drop_constraints_involving_dims(self, type_: DimType, first: u32, n: u32) -> BasicSet {
        let bset = self;
        let mut bset = bset;
        bset.do_not_free_on_drop();
        let bset = bset.ptr;
        let isl_rs_result =
            unsafe { isl_basic_set_drop_constraints_involving_dims(bset, type_, first, n) };
        let isl_rs_result = BasicSet { ptr: isl_rs_result,
                                       should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_drop_constraints_not_involving_dims`.
    pub fn drop_constraints_not_involving_dims(self, type_: DimType, first: u32, n: u32)
                                               -> BasicSet {
        let bset = self;
        let mut bset = bset;
        bset.do_not_free_on_drop();
        let bset = bset.ptr;
        let isl_rs_result =
            unsafe { isl_basic_set_drop_constraints_not_involving_dims(bset, type_, first, n) };
        let isl_rs_result = BasicSet { ptr: isl_rs_result,
                                       should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_involves_dims`.
    pub fn involves_dims(&self, type_: DimType, first: u32, n: u32) -> bool {
        let bset = self;
        let bset = bset.ptr;
        let isl_rs_result = unsafe { isl_basic_set_involves_dims(bset, type_, first, n) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("Got isl_bool = -1"),
        };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_neg`.
    pub fn neg(self) -> BasicSet {
        let bset = self;
        let mut bset = bset;
        bset.do_not_free_on_drop();
        let bset = bset.ptr;
        let isl_rs_result = unsafe { isl_basic_set_neg(bset) };
        let isl_rs_result = BasicSet { ptr: isl_rs_result,
                                       should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_compute_divs`.
    pub fn compute_divs(self) -> Set {
        let bset = self;
        let mut bset = bset;
        bset.do_not_free_on_drop();
        let bset = bset.ptr;
        let isl_rs_result = unsafe { isl_basic_set_compute_divs(bset) };
        let isl_rs_result = Set { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_gist`.
    pub fn gist(self, context: BasicSet) -> BasicSet {
        let bset = self;
        let mut bset = bset;
        bset.do_not_free_on_drop();
        let bset = bset.ptr;
        let mut context = context;
        context.do_not_free_on_drop();
        let context = context.ptr;
        let isl_rs_result = unsafe { isl_basic_set_gist(bset, context) };
        let isl_rs_result = BasicSet { ptr: isl_rs_result,
                                       should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_from_point`.
    pub fn from_point(pnt: Point) -> BasicSet {
        let mut pnt = pnt;
        pnt.do_not_free_on_drop();
        let pnt = pnt.ptr;
        let isl_rs_result = unsafe { isl_basic_set_from_point(pnt) };
        let isl_rs_result = BasicSet { ptr: isl_rs_result,
                                       should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_box_from_points`.
    pub fn box_from_points(pnt1: Point, pnt2: Point) -> BasicSet {
        let mut pnt1 = pnt1;
        pnt1.do_not_free_on_drop();
        let pnt1 = pnt1.ptr;
        let mut pnt2 = pnt2;
        pnt2.do_not_free_on_drop();
        let pnt2 = pnt2.ptr;
        let isl_rs_result = unsafe { isl_basic_set_box_from_points(pnt1, pnt2) };
        let isl_rs_result = BasicSet { ptr: isl_rs_result,
                                       should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_lift`.
    pub fn lift(self) -> BasicSet {
        let bset = self;
        let mut bset = bset;
        bset.do_not_free_on_drop();
        let bset = bset.ptr;
        let isl_rs_result = unsafe { isl_basic_set_lift(bset) };
        let isl_rs_result = BasicSet { ptr: isl_rs_result,
                                       should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_align_params`.
    pub fn align_params(self, model: Space) -> BasicSet {
        let bset = self;
        let mut bset = bset;
        bset.do_not_free_on_drop();
        let bset = bset.ptr;
        let mut model = model;
        model.do_not_free_on_drop();
        let model = model.ptr;
        let isl_rs_result = unsafe { isl_basic_set_align_params(bset, model) };
        let isl_rs_result = BasicSet { ptr: isl_rs_result,
                                       should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_drop_unused_params`.
    pub fn drop_unused_params(self) -> BasicSet {
        let bset = self;
        let mut bset = bset;
        bset.do_not_free_on_drop();
        let bset = bset.ptr;
        let isl_rs_result = unsafe { isl_basic_set_drop_unused_params(bset) };
        let isl_rs_result = BasicSet { ptr: isl_rs_result,
                                       should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_equalities_matrix`.
    pub fn equalities_matrix(&self, c1: DimType, c2: DimType, c3: DimType, c4: DimType) -> Mat {
        let bset = self;
        let bset = bset.ptr;
        let isl_rs_result = unsafe { isl_basic_set_equalities_matrix(bset, c1, c2, c3, c4) };
        let isl_rs_result = Mat { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_inequalities_matrix`.
    pub fn inequalities_matrix(&self, c1: DimType, c2: DimType, c3: DimType, c4: DimType) -> Mat {
        let bset = self;
        let bset = bset.ptr;
        let isl_rs_result = unsafe { isl_basic_set_inequalities_matrix(bset, c1, c2, c3, c4) };
        let isl_rs_result = Mat { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_from_constraint_matrices`.
    pub fn from_constraint_matrices(space: Space, eq: Mat, ineq: Mat, c1: DimType, c2: DimType,
                                    c3: DimType, c4: DimType)
                                    -> BasicSet {
        let mut space = space;
        space.do_not_free_on_drop();
        let space = space.ptr;
        let mut eq = eq;
        eq.do_not_free_on_drop();
        let eq = eq.ptr;
        let mut ineq = ineq;
        ineq.do_not_free_on_drop();
        let ineq = ineq.ptr;
        let isl_rs_result =
            unsafe { isl_basic_set_from_constraint_matrices(space, eq, ineq, c1, c2, c3, c4) };
        let isl_rs_result = BasicSet { ptr: isl_rs_result,
                                       should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_reduced_basis`.
    pub fn reduced_basis(&self) -> Mat {
        let bset = self;
        let bset = bset.ptr;
        let isl_rs_result = unsafe { isl_basic_set_reduced_basis(bset) };
        let isl_rs_result = Mat { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_coefficients`.
    pub fn coefficients(self) -> BasicSet {
        let bset = self;
        let mut bset = bset;
        bset.do_not_free_on_drop();
        let bset = bset.ptr;
        let isl_rs_result = unsafe { isl_basic_set_coefficients(bset) };
        let isl_rs_result = BasicSet { ptr: isl_rs_result,
                                       should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_solutions`.
    pub fn solutions(self) -> BasicSet {
        let bset = self;
        let mut bset = bset;
        bset.do_not_free_on_drop();
        let bset = bset.ptr;
        let isl_rs_result = unsafe { isl_basic_set_solutions(bset) };
        let isl_rs_result = BasicSet { ptr: isl_rs_result,
                                       should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_basic_set_to_str`.
    pub fn to_str(&self) -> &str {
        let bset = self;
        let bset = bset.ptr;
        let isl_rs_result = unsafe { isl_basic_set_to_str(bset) };
        let isl_rs_result = unsafe { CStr::from_ptr(isl_rs_result) };
        let isl_rs_result = isl_rs_result.to_str().unwrap();
        isl_rs_result
    }

    /// Does not call isl_xxx_free() on being dropped. (For internal use only.)
    pub fn do_not_free_on_drop(&mut self) {
        self.should_free_on_drop = false;
    }
}

impl Drop for BasicSet {
    fn drop(&mut self) {
        if self.should_free_on_drop {
            unsafe {
                isl_basic_set_free(self.ptr);
            }
        }
    }
}
