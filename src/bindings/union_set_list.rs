// Automatically generated by isl_bindings_generator.
// LICENSE: MIT

use libc::uintptr_t;
use std::os::raw::{c_char, c_void};
use crate::bindings::{Stat, UnionSet, Context};
use std::ffi::{CString, CStr};

/// Wraps `isl_union_set_list`.
pub struct UnionSetList {
    pub ptr: uintptr_t,
    pub should_free_on_drop: bool,
}

extern "C" {

    fn isl_union_set_list_get_at(list: uintptr_t, index: i32) -> uintptr_t;

    fn isl_union_set_list_dump(list: uintptr_t);

    fn isl_union_set_list_read_from_str(ctx: uintptr_t, str_: *const c_char) -> uintptr_t;

    fn isl_union_set_list_free(list: uintptr_t) -> uintptr_t;

    fn isl_union_set_list_to_str(list: uintptr_t) -> *const c_char;

    fn isl_union_set_list_swap(list: uintptr_t, pos1: u32, pos2: u32) -> uintptr_t;

    fn isl_union_set_list_reverse(list: uintptr_t) -> uintptr_t;

    fn isl_union_set_list_concat(list1: uintptr_t, list2: uintptr_t) -> uintptr_t;

    fn isl_union_set_list_union(list: uintptr_t) -> uintptr_t;

    fn isl_union_set_list_clear(list: uintptr_t) -> uintptr_t;

    fn isl_union_set_list_add(list: uintptr_t, el: uintptr_t) -> uintptr_t;

    fn isl_union_set_list_from_union_set(el: uintptr_t) -> uintptr_t;

    fn isl_union_set_list_drop(list: uintptr_t, first: u32, n: u32) -> uintptr_t;

    fn isl_union_set_list_n_union_set(list: uintptr_t) -> i32;

    fn isl_union_set_list_copy(list: uintptr_t) -> uintptr_t;

    fn isl_union_set_list_get_union_set(list: uintptr_t, index: i32) -> uintptr_t;

    fn isl_union_set_list_every(list: uintptr_t, test: unsafe extern "C" fn(uintptr_t, *mut c_void) -> i32, user: *mut c_void) -> i32;

    fn isl_union_set_list_insert(list: uintptr_t, pos: u32, el: uintptr_t) -> uintptr_t;

    fn isl_union_set_list_map(list: uintptr_t, fn_: unsafe extern "C" fn(uintptr_t, *mut c_void) -> uintptr_t, user: *mut c_void) -> uintptr_t;

    fn isl_union_set_list_set_union_set(list: uintptr_t, index: i32, el: uintptr_t) -> uintptr_t;

    fn isl_union_set_list_sort(list: uintptr_t, cmp: unsafe extern "C" fn(uintptr_t, uintptr_t, *mut c_void) -> i32, user: *mut c_void) -> uintptr_t;

    fn isl_union_set_list_alloc(ctx: uintptr_t, n: i32) -> uintptr_t;

    fn isl_union_set_list_foreach_scc(list: uintptr_t, follows: unsafe extern "C" fn(uintptr_t, uintptr_t, *mut c_void) -> i32, follows_user: *mut c_void, fn_: unsafe extern "C" fn(uintptr_t, *mut c_void) -> Stat, fn_user: *mut c_void) -> Stat;

    fn isl_union_set_list_size(list: uintptr_t) -> i32;

    fn isl_union_set_list_get_ctx(list: uintptr_t) -> uintptr_t;

    fn isl_union_set_list_foreach(list: uintptr_t, fn_: unsafe extern "C" fn(uintptr_t, *mut c_void) -> Stat, user: *mut c_void) -> Stat;

}

impl Clone for UnionSetList {
    fn clone(&self) -> UnionSetList {
        self.copy()
    }
}

impl FromIterator<UnionSet> for UnionSetList {
    fn from_iter<T>(iter: T) -> Self
    where T: IntoIterator<Item = UnionSet>,
    {
        let mut iter = iter.into_iter().peekable();
        let ctx = iter.peek().unwrap().get_ctx();
        let (size, _) = iter.size_hint();
        let mut res = Self::alloc(&ctx, size as _);
        for x in iter {
        res = res.add(x);
        }
        res
    }
}

impl UnionSetList {
    /// Wraps `isl_union_set_list_get_at`.
    pub fn get_at(&self, index: i32) -> UnionSet {
        let context_for_error_message = self.get_ctx();
        let list = self;
        let list = list.ptr;
        let isl_rs_result = unsafe { isl_union_set_list_get_at(list, index) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionSet { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_set_list_dump`.
    pub fn dump(&self) {
        let list = self;
        let list = list.ptr;
        let isl_rs_result = unsafe { isl_union_set_list_dump(list) };
        isl_rs_result
    }

    /// Wraps `isl_union_set_list_read_from_str`.
    pub fn read_from_str(ctx: &Context, str_: &str) -> UnionSetList {
        let ctx = ctx.ptr;
        let str_ = CString::new(str_).unwrap();
        let str_ = str_.as_ptr();
        let isl_rs_result = unsafe { isl_union_set_list_read_from_str(ctx, str_) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = UnionSetList { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_set_list_free`.
    pub fn free(self) -> UnionSetList {
        let context_for_error_message = self.get_ctx();
        let list = self;
        let mut list = list;
        list.do_not_free_on_drop();
        let list = list.ptr;
        let isl_rs_result = unsafe { isl_union_set_list_free(list) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionSetList { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_set_list_to_str`.
    pub fn to_str(&self) -> &str {
        let list = self;
        let list = list.ptr;
        let isl_rs_result = unsafe { isl_union_set_list_to_str(list) };
        let isl_rs_result = unsafe { CStr::from_ptr(isl_rs_result) };
        let isl_rs_result = isl_rs_result.to_str().unwrap();
        isl_rs_result
    }

    /// Wraps `isl_union_set_list_swap`.
    pub fn swap(self, pos1: u32, pos2: u32) -> UnionSetList {
        let context_for_error_message = self.get_ctx();
        let list = self;
        let mut list = list;
        list.do_not_free_on_drop();
        let list = list.ptr;
        let isl_rs_result = unsafe { isl_union_set_list_swap(list, pos1, pos2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionSetList { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_set_list_reverse`.
    pub fn reverse(self) -> UnionSetList {
        let context_for_error_message = self.get_ctx();
        let list = self;
        let mut list = list;
        list.do_not_free_on_drop();
        let list = list.ptr;
        let isl_rs_result = unsafe { isl_union_set_list_reverse(list) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionSetList { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_set_list_concat`.
    pub fn concat(self, list2: UnionSetList) -> UnionSetList {
        let context_for_error_message = self.get_ctx();
        let list1 = self;
        let mut list1 = list1;
        list1.do_not_free_on_drop();
        let list1 = list1.ptr;
        let mut list2 = list2;
        list2.do_not_free_on_drop();
        let list2 = list2.ptr;
        let isl_rs_result = unsafe { isl_union_set_list_concat(list1, list2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionSetList { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_set_list_union`.
    pub fn union(self) -> UnionSet {
        let context_for_error_message = self.get_ctx();
        let list = self;
        let mut list = list;
        list.do_not_free_on_drop();
        let list = list.ptr;
        let isl_rs_result = unsafe { isl_union_set_list_union(list) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionSet { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_set_list_clear`.
    pub fn clear(self) -> UnionSetList {
        let context_for_error_message = self.get_ctx();
        let list = self;
        let mut list = list;
        list.do_not_free_on_drop();
        let list = list.ptr;
        let isl_rs_result = unsafe { isl_union_set_list_clear(list) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionSetList { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_set_list_add`.
    pub fn add(self, el: UnionSet) -> UnionSetList {
        let context_for_error_message = self.get_ctx();
        let list = self;
        let mut list = list;
        list.do_not_free_on_drop();
        let list = list.ptr;
        let mut el = el;
        el.do_not_free_on_drop();
        let el = el.ptr;
        let isl_rs_result = unsafe { isl_union_set_list_add(list, el) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionSetList { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_set_list_from_union_set`.
    pub fn from_union_set(el: UnionSet) -> UnionSetList {
        let mut el = el;
        el.do_not_free_on_drop();
        let el = el.ptr;
        let isl_rs_result = unsafe { isl_union_set_list_from_union_set(el) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = UnionSetList { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_set_list_drop`.
    pub fn drop(self, first: u32, n: u32) -> UnionSetList {
        let context_for_error_message = self.get_ctx();
        let list = self;
        let mut list = list;
        list.do_not_free_on_drop();
        let list = list.ptr;
        let isl_rs_result = unsafe { isl_union_set_list_drop(list, first, n) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionSetList { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_set_list_n_union_set`.
    pub fn n_union_set(&self) -> i32 {
        let list = self;
        let list = list.ptr;
        let isl_rs_result = unsafe { isl_union_set_list_n_union_set(list) };
        isl_rs_result
    }

    /// Wraps `isl_union_set_list_copy`.
    pub fn copy(&self) -> UnionSetList {
        let context_for_error_message = self.get_ctx();
        let list = self;
        let list = list.ptr;
        let isl_rs_result = unsafe { isl_union_set_list_copy(list) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionSetList { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_set_list_get_union_set`.
    pub fn get_union_set(&self, index: i32) -> UnionSet {
        let context_for_error_message = self.get_ctx();
        let list = self;
        let list = list.ptr;
        let isl_rs_result = unsafe { isl_union_set_list_get_union_set(list, index) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionSet { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_set_list_every`.
    pub fn every<test>(&self, mut test: test, user: *mut c_void) -> bool
    where test: FnMut(&UnionSet) -> bool,
    {
        let context_for_error_message = self.get_ctx();
        let list = self;
        let list = list.ptr;
        extern "C" fn test_wrapper<test>(arg_0: uintptr_t, arg_1: *mut c_void) -> i32 {
            let test: *mut test = unsafe { core::mem::transmute(arg_1) };
            let test: &mut test = unsafe { &mut *test };
            todo!()
        }

        let test_user: *mut test = &mut test;
        let test_user: *mut c_void = unsafe { core::mem::transmute(test_user) };
        let test = test_wrapper::<test>;
        let isl_rs_result = unsafe { isl_union_set_list_every(list, test, user) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error: {}", context_for_error_message.last_error_msg()),
        };
        isl_rs_result
    }

    /// Wraps `isl_union_set_list_insert`.
    pub fn insert(self, pos: u32, el: UnionSet) -> UnionSetList {
        let context_for_error_message = self.get_ctx();
        let list = self;
        let mut list = list;
        list.do_not_free_on_drop();
        let list = list.ptr;
        let mut el = el;
        el.do_not_free_on_drop();
        let el = el.ptr;
        let isl_rs_result = unsafe { isl_union_set_list_insert(list, pos, el) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionSetList { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_set_list_map`.
    pub fn map<fn_>(self, mut fn_: fn_, user: *mut c_void) -> UnionSetList
    where fn_: FnMut(&UnionSet) -> &UnionSet,
    {
        let context_for_error_message = self.get_ctx();
        let list = self;
        let mut list = list;
        list.do_not_free_on_drop();
        let list = list.ptr;
        extern "C" fn fn__wrapper<fn_>(arg_0: uintptr_t, arg_1: *mut c_void) -> uintptr_t {
            let fn_: *mut fn_ = unsafe { core::mem::transmute(arg_1) };
            let fn_: &mut fn_ = unsafe { &mut *fn_ };
            todo!()
        }

        let user: *mut fn_ = &mut fn_;
        let user: *mut c_void = unsafe { core::mem::transmute(user) };
        let fn_ = fn__wrapper::<fn_>;
        let isl_rs_result = unsafe { isl_union_set_list_map(list, fn_, user) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionSetList { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_set_list_set_union_set`.
    pub fn set_union_set(self, index: i32, el: UnionSet) -> UnionSetList {
        let context_for_error_message = self.get_ctx();
        let list = self;
        let mut list = list;
        list.do_not_free_on_drop();
        let list = list.ptr;
        let mut el = el;
        el.do_not_free_on_drop();
        let el = el.ptr;
        let isl_rs_result = unsafe { isl_union_set_list_set_union_set(list, index, el) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionSetList { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_set_list_sort`.
    pub fn sort<cmp>(self, mut cmp: cmp, user: *mut c_void) -> UnionSetList
    where cmp: FnMut(&UnionSet, &UnionSet) -> i32,
    {
        let context_for_error_message = self.get_ctx();
        let list = self;
        let mut list = list;
        list.do_not_free_on_drop();
        let list = list.ptr;
        extern "C" fn cmp_wrapper<cmp>(arg_0: uintptr_t, arg_1: uintptr_t, arg_2: *mut c_void) -> i32 {
            let cmp: *mut cmp = unsafe { core::mem::transmute(arg_2) };
            let cmp: &mut cmp = unsafe { &mut *cmp };
            todo!()
        }

        let cmp_user: *mut cmp = &mut cmp;
        let cmp_user: *mut c_void = unsafe { core::mem::transmute(cmp_user) };
        let cmp = cmp_wrapper::<cmp>;
        let isl_rs_result = unsafe { isl_union_set_list_sort(list, cmp, user) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionSetList { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_set_list_alloc`.
    pub fn alloc(ctx: &Context, n: i32) -> UnionSetList {
        let ctx = ctx.ptr;
        let isl_rs_result = unsafe { isl_union_set_list_alloc(ctx, n) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = UnionSetList { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_set_list_foreach_scc`.
    pub fn foreach_scc<follows, fn_>(&self, mut follows: follows, follows_user: *mut c_void, mut fn_: fn_, fn_user: *mut c_void) -> Stat
    where follows: FnMut(&UnionSet, &UnionSet) -> bool,
          fn_: FnMut(&UnionSetList) -> Stat,
    {
        let context_for_error_message = self.get_ctx();
        let list = self;
        let list = list.ptr;
        extern "C" fn follows_wrapper<follows>(arg_0: uintptr_t, arg_1: uintptr_t, arg_2: *mut c_void) -> i32 {
            let follows: *mut follows = unsafe { core::mem::transmute(arg_2) };
            let follows: &mut follows = unsafe { &mut *follows };
            todo!()
        }

        let follows_user: *mut follows = &mut follows;
        let follows_user: *mut c_void = unsafe { core::mem::transmute(follows_user) };
        let follows = follows_wrapper::<follows>;
        extern "C" fn fn__wrapper<fn_>(arg_0: uintptr_t, arg_1: *mut c_void) -> Stat {
            let fn_: *mut fn_ = unsafe { core::mem::transmute(arg_1) };
            let fn_: &mut fn_ = unsafe { &mut *fn_ };
            todo!()
        }

        let user: *mut fn_ = &mut fn_;
        let user: *mut c_void = unsafe { core::mem::transmute(user) };
        let fn_ = fn__wrapper::<fn_>;
        let isl_rs_result = unsafe { isl_union_set_list_foreach_scc(list, follows, follows_user, fn_, fn_user) };
        isl_rs_result
    }

    /// Wraps `isl_union_set_list_size`.
    pub fn size(&self) -> i32 {
        let list = self;
        let list = list.ptr;
        let isl_rs_result = unsafe { isl_union_set_list_size(list) };
        isl_rs_result
    }

    /// Wraps `isl_union_set_list_get_ctx`.
    pub fn get_ctx(&self) -> Context {
        let list = self;
        let list = list.ptr;
        let isl_rs_result = unsafe { isl_union_set_list_get_ctx(list) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = Context { ptr: isl_rs_result, should_free_on_drop: true };
        let mut isl_rs_result = isl_rs_result;
        isl_rs_result.do_not_free_on_drop();
        isl_rs_result
    }

    /// Wraps `isl_union_set_list_foreach`.
    pub fn foreach<fn_>(&self, mut fn_: fn_, user: *mut c_void) -> Stat
    where fn_: FnMut(&UnionSet) -> Stat,
    {
        let context_for_error_message = self.get_ctx();
        let list = self;
        let list = list.ptr;
        extern "C" fn fn__wrapper<fn_>(arg_0: uintptr_t, arg_1: *mut c_void) -> Stat {
            let fn_: *mut fn_ = unsafe { core::mem::transmute(arg_1) };
            let fn_: &mut fn_ = unsafe { &mut *fn_ };
            todo!()
        }

        let user: *mut fn_ = &mut fn_;
        let user: *mut c_void = unsafe { core::mem::transmute(user) };
        let fn_ = fn__wrapper::<fn_>;
        let isl_rs_result = unsafe { isl_union_set_list_foreach(list, fn_, user) };
        isl_rs_result
    }

    /// Does not call isl_xxx_free() on being dropped. (For internal use only.)
    pub fn do_not_free_on_drop(&mut self) {
        self.should_free_on_drop = false;
    }
}

impl Drop for UnionSetList {
    fn drop(&mut self) {
        if self.should_free_on_drop {
            unsafe { isl_union_set_list_free(self.ptr); }
        }
    }
}