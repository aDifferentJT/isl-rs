// Automatically generated by isl_bindings_generator.
// LICENSE: MIT

use crate::bindings::{
    Aff, Context, DimType, Id, PwAff, PwAffList, Set, Space, Stat, UnionPwAffList, UnionPwMultiAff,
    UnionSet, Val,
};
use libc::uintptr_t;
use std::ffi::{CStr, CString};
use std::os::raw::{c_char, c_void};

/// Wraps `isl_union_pw_aff`.
pub struct UnionPwAff {
    pub ptr: uintptr_t,
    pub should_free_on_drop: bool,
}

extern "C" {

    fn isl_union_pw_aff_aff_on_domain(domain: uintptr_t, aff: uintptr_t) -> uintptr_t;

    fn isl_union_pw_aff_gist(upa: uintptr_t, context: uintptr_t) -> uintptr_t;

    fn isl_union_pw_aff_floor(upa: uintptr_t) -> uintptr_t;

    fn isl_union_pw_aff_dump(upa: uintptr_t);

    fn isl_union_pw_aff_copy(upa: uintptr_t) -> uintptr_t;

    fn isl_union_pw_aff_plain_is_equal(upa1: uintptr_t, upa2: uintptr_t) -> i32;

    fn isl_union_pw_aff_align_params(upa: uintptr_t, model: uintptr_t) -> uintptr_t;

    fn isl_union_pw_aff_find_dim_by_name(upa: uintptr_t, type_: DimType, name: *const c_char)
                                         -> i32;

    fn isl_union_pw_aff_gist_params(upa: uintptr_t, context: uintptr_t) -> uintptr_t;

    fn isl_union_pw_aff_sub(upa1: uintptr_t, upa2: uintptr_t) -> uintptr_t;

    fn isl_union_pw_aff_intersect_domain(upa: uintptr_t, uset: uintptr_t) -> uintptr_t;

    fn isl_union_pw_aff_domain(upa: uintptr_t) -> uintptr_t;

    fn isl_union_pw_aff_get_ctx(upa: uintptr_t) -> uintptr_t;

    fn isl_union_pw_aff_bind_id(upa: uintptr_t, id: uintptr_t) -> uintptr_t;

    fn isl_union_pw_aff_from_aff(aff: uintptr_t) -> uintptr_t;

    fn isl_union_pw_aff_coalesce(upa: uintptr_t) -> uintptr_t;

    fn isl_union_pw_aff_neg(upa: uintptr_t) -> uintptr_t;

    fn isl_union_pw_aff_subtract_domain_union_set(upa: uintptr_t, uset: uintptr_t) -> uintptr_t;

    fn isl_union_pw_aff_subtract_domain(upa: uintptr_t, uset: uintptr_t) -> uintptr_t;

    fn isl_union_pw_aff_pullback_union_pw_multi_aff(upa: uintptr_t, upma: uintptr_t) -> uintptr_t;

    fn isl_union_pw_aff_intersect_domain_wrapped_domain(upa: uintptr_t, uset: uintptr_t)
                                                        -> uintptr_t;

    fn isl_union_pw_aff_set_dim_name(upa: uintptr_t, type_: DimType, pos: u32, s: *const c_char)
                                     -> uintptr_t;

    fn isl_union_pw_aff_n_pw_aff(upa: uintptr_t) -> i32;

    fn isl_union_pw_aff_involves_nan(upa: uintptr_t) -> i32;

    fn isl_union_pw_aff_extract_pw_aff(upa: uintptr_t, space: uintptr_t) -> uintptr_t;

    fn isl_union_pw_aff_scale_val(upa: uintptr_t, v: uintptr_t) -> uintptr_t;

    fn isl_union_pw_aff_subtract_domain_space(upa: uintptr_t, space: uintptr_t) -> uintptr_t;

    fn isl_union_pw_aff_to_str(upa: uintptr_t) -> *const c_char;

    fn isl_union_pw_aff_union_add(upa1: uintptr_t, upa2: uintptr_t) -> uintptr_t;

    fn isl_union_pw_aff_read_from_str(ctx: uintptr_t, str_: *const c_char) -> uintptr_t;

    fn isl_union_pw_aff_intersect_params(upa: uintptr_t, set: uintptr_t) -> uintptr_t;

    fn isl_union_pw_aff_mod_val(upa: uintptr_t, f: uintptr_t) -> uintptr_t;

    fn isl_union_pw_aff_pw_aff_on_domain(domain: uintptr_t, pa: uintptr_t) -> uintptr_t;

    fn isl_union_pw_aff_from_pw_aff(pa: uintptr_t) -> uintptr_t;

    fn isl_union_pw_aff_empty_space(space: uintptr_t) -> uintptr_t;

    fn isl_union_pw_aff_get_pw_aff_list(upa: uintptr_t) -> uintptr_t;

    fn isl_union_pw_aff_reset_user(upa: uintptr_t) -> uintptr_t;

    fn isl_union_pw_aff_param_on_domain_id(domain: uintptr_t, id: uintptr_t) -> uintptr_t;

    fn isl_union_pw_aff_free(upa: uintptr_t) -> uintptr_t;

    fn isl_union_pw_aff_every_pw_aff(upa: uintptr_t,
                                     test: unsafe extern "C" fn(uintptr_t, *mut c_void) -> i32,
                                     user: *mut c_void)
                                     -> i32;

    fn isl_union_pw_aff_intersect_domain_space(upa: uintptr_t, space: uintptr_t) -> uintptr_t;

    fn isl_union_pw_aff_intersect_domain_wrapped_range(upa: uintptr_t, uset: uintptr_t)
                                                       -> uintptr_t;

    fn isl_union_pw_aff_to_list(el: uintptr_t) -> uintptr_t;

    fn isl_union_pw_aff_empty_ctx(ctx: uintptr_t) -> uintptr_t;

    fn isl_union_pw_aff_empty(space: uintptr_t) -> uintptr_t;

    fn isl_union_pw_aff_foreach_pw_aff(upa: uintptr_t,
                                       fn_: unsafe extern "C" fn(uintptr_t, *mut c_void) -> Stat,
                                       user: *mut c_void)
                                       -> Stat;

    fn isl_union_pw_aff_get_space(upa: uintptr_t) -> uintptr_t;

    fn isl_union_pw_aff_drop_dims(upa: uintptr_t, type_: DimType, first: u32, n: u32) -> uintptr_t;

    fn isl_union_pw_aff_add_pw_aff(upa: uintptr_t, pa: uintptr_t) -> uintptr_t;

    fn isl_union_pw_aff_val_on_domain(domain: uintptr_t, v: uintptr_t) -> uintptr_t;

    fn isl_union_pw_aff_add(upa1: uintptr_t, upa2: uintptr_t) -> uintptr_t;

    fn isl_union_pw_aff_scale_down_val(upa: uintptr_t, v: uintptr_t) -> uintptr_t;

    fn isl_union_pw_aff_intersect_domain_union_set(upa: uintptr_t, uset: uintptr_t) -> uintptr_t;

    fn isl_union_pw_aff_dim(upa: uintptr_t, type_: DimType) -> i32;

    fn isl_union_pw_aff_zero_union_set(upa: uintptr_t) -> uintptr_t;

}

impl Clone for UnionPwAff {
    fn clone(&self) -> UnionPwAff {
        self.copy()
    }
}

impl core::ops::Add for UnionPwAff {
    type Output = UnionPwAff;

    fn add(self, rhs: UnionPwAff) -> UnionPwAff {
        self.add(rhs)
    }
}

impl core::ops::Sub for UnionPwAff {
    type Output = UnionPwAff;

    fn sub(self, rhs: UnionPwAff) -> UnionPwAff {
        self.sub(rhs)
    }
}

impl UnionPwAff {
    /// Wraps `isl_union_pw_aff_aff_on_domain`.
    pub fn aff_on_domain(domain: UnionSet, aff: Aff) -> UnionPwAff {
        let mut domain = domain;
        domain.do_not_free_on_drop();
        let domain = domain.ptr;
        let mut aff = aff;
        aff.do_not_free_on_drop();
        let aff = aff.ptr;
        let isl_rs_result = unsafe { isl_union_pw_aff_aff_on_domain(domain, aff) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = UnionPwAff { ptr: isl_rs_result,
                                         should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_aff_gist`.
    pub fn gist(self, context: UnionSet) -> UnionPwAff {
        let context_for_error_message = self.get_ctx();
        let upa = self;
        let mut upa = upa;
        upa.do_not_free_on_drop();
        let upa = upa.ptr;
        let mut context = context;
        context.do_not_free_on_drop();
        let context = context.ptr;
        let isl_rs_result = unsafe { isl_union_pw_aff_gist(upa, context) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionPwAff { ptr: isl_rs_result,
                                         should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_aff_floor`.
    pub fn floor(self) -> UnionPwAff {
        let context_for_error_message = self.get_ctx();
        let upa = self;
        let mut upa = upa;
        upa.do_not_free_on_drop();
        let upa = upa.ptr;
        let isl_rs_result = unsafe { isl_union_pw_aff_floor(upa) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionPwAff { ptr: isl_rs_result,
                                         should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_aff_dump`.
    pub fn dump(&self) {
        let upa = self;
        let upa = upa.ptr;
        let isl_rs_result = unsafe { isl_union_pw_aff_dump(upa) };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_aff_copy`.
    pub fn copy(&self) -> UnionPwAff {
        let context_for_error_message = self.get_ctx();
        let upa = self;
        let upa = upa.ptr;
        let isl_rs_result = unsafe { isl_union_pw_aff_copy(upa) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionPwAff { ptr: isl_rs_result,
                                         should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_aff_plain_is_equal`.
    pub fn plain_is_equal(&self, upa2: &UnionPwAff) -> bool {
        let context_for_error_message = self.get_ctx();
        let upa1 = self;
        let upa1 = upa1.ptr;
        let upa2 = upa2.ptr;
        let isl_rs_result = unsafe { isl_union_pw_aff_plain_is_equal(upa1, upa2) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error: {}", context_for_error_message.last_error_msg()),
        };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_aff_align_params`.
    pub fn align_params(self, model: Space) -> UnionPwAff {
        let context_for_error_message = self.get_ctx();
        let upa = self;
        let mut upa = upa;
        upa.do_not_free_on_drop();
        let upa = upa.ptr;
        let mut model = model;
        model.do_not_free_on_drop();
        let model = model.ptr;
        let isl_rs_result = unsafe { isl_union_pw_aff_align_params(upa, model) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionPwAff { ptr: isl_rs_result,
                                         should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_aff_find_dim_by_name`.
    pub fn find_dim_by_name(&self, type_: DimType, name: &str) -> i32 {
        let upa = self;
        let upa = upa.ptr;
        let name = CString::new(name).unwrap();
        let name = name.as_ptr();
        let isl_rs_result = unsafe { isl_union_pw_aff_find_dim_by_name(upa, type_, name) };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_aff_gist_params`.
    pub fn gist_params(self, context: Set) -> UnionPwAff {
        let context_for_error_message = self.get_ctx();
        let upa = self;
        let mut upa = upa;
        upa.do_not_free_on_drop();
        let upa = upa.ptr;
        let mut context = context;
        context.do_not_free_on_drop();
        let context = context.ptr;
        let isl_rs_result = unsafe { isl_union_pw_aff_gist_params(upa, context) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionPwAff { ptr: isl_rs_result,
                                         should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_aff_sub`.
    pub fn sub(self, upa2: UnionPwAff) -> UnionPwAff {
        let context_for_error_message = self.get_ctx();
        let upa1 = self;
        let mut upa1 = upa1;
        upa1.do_not_free_on_drop();
        let upa1 = upa1.ptr;
        let mut upa2 = upa2;
        upa2.do_not_free_on_drop();
        let upa2 = upa2.ptr;
        let isl_rs_result = unsafe { isl_union_pw_aff_sub(upa1, upa2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionPwAff { ptr: isl_rs_result,
                                         should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_aff_intersect_domain`.
    pub fn intersect_domain(self, uset: UnionSet) -> UnionPwAff {
        let context_for_error_message = self.get_ctx();
        let upa = self;
        let mut upa = upa;
        upa.do_not_free_on_drop();
        let upa = upa.ptr;
        let mut uset = uset;
        uset.do_not_free_on_drop();
        let uset = uset.ptr;
        let isl_rs_result = unsafe { isl_union_pw_aff_intersect_domain(upa, uset) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionPwAff { ptr: isl_rs_result,
                                         should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_aff_domain`.
    pub fn domain(self) -> UnionSet {
        let context_for_error_message = self.get_ctx();
        let upa = self;
        let mut upa = upa;
        upa.do_not_free_on_drop();
        let upa = upa.ptr;
        let isl_rs_result = unsafe { isl_union_pw_aff_domain(upa) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionSet { ptr: isl_rs_result,
                                       should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_aff_get_ctx`.
    pub fn get_ctx(&self) -> Context {
        let upa = self;
        let upa = upa.ptr;
        let isl_rs_result = unsafe { isl_union_pw_aff_get_ctx(upa) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = Context { ptr: isl_rs_result,
                                      should_free_on_drop: true };
        let mut isl_rs_result = isl_rs_result;
        isl_rs_result.do_not_free_on_drop();
        isl_rs_result
    }

    /// Wraps `isl_union_pw_aff_bind_id`.
    pub fn bind_id(self, id: Id) -> UnionSet {
        let context_for_error_message = self.get_ctx();
        let upa = self;
        let mut upa = upa;
        upa.do_not_free_on_drop();
        let upa = upa.ptr;
        let mut id = id;
        id.do_not_free_on_drop();
        let id = id.ptr;
        let isl_rs_result = unsafe { isl_union_pw_aff_bind_id(upa, id) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionSet { ptr: isl_rs_result,
                                       should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_aff_from_aff`.
    pub fn from_aff(aff: Aff) -> UnionPwAff {
        let mut aff = aff;
        aff.do_not_free_on_drop();
        let aff = aff.ptr;
        let isl_rs_result = unsafe { isl_union_pw_aff_from_aff(aff) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = UnionPwAff { ptr: isl_rs_result,
                                         should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_aff_coalesce`.
    pub fn coalesce(self) -> UnionPwAff {
        let context_for_error_message = self.get_ctx();
        let upa = self;
        let mut upa = upa;
        upa.do_not_free_on_drop();
        let upa = upa.ptr;
        let isl_rs_result = unsafe { isl_union_pw_aff_coalesce(upa) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionPwAff { ptr: isl_rs_result,
                                         should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_aff_neg`.
    pub fn neg(self) -> UnionPwAff {
        let context_for_error_message = self.get_ctx();
        let upa = self;
        let mut upa = upa;
        upa.do_not_free_on_drop();
        let upa = upa.ptr;
        let isl_rs_result = unsafe { isl_union_pw_aff_neg(upa) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionPwAff { ptr: isl_rs_result,
                                         should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_aff_subtract_domain_union_set`.
    pub fn subtract_domain_union_set(self, uset: UnionSet) -> UnionPwAff {
        let context_for_error_message = self.get_ctx();
        let upa = self;
        let mut upa = upa;
        upa.do_not_free_on_drop();
        let upa = upa.ptr;
        let mut uset = uset;
        uset.do_not_free_on_drop();
        let uset = uset.ptr;
        let isl_rs_result = unsafe { isl_union_pw_aff_subtract_domain_union_set(upa, uset) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionPwAff { ptr: isl_rs_result,
                                         should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_aff_subtract_domain`.
    pub fn subtract_domain(self, uset: UnionSet) -> UnionPwAff {
        let context_for_error_message = self.get_ctx();
        let upa = self;
        let mut upa = upa;
        upa.do_not_free_on_drop();
        let upa = upa.ptr;
        let mut uset = uset;
        uset.do_not_free_on_drop();
        let uset = uset.ptr;
        let isl_rs_result = unsafe { isl_union_pw_aff_subtract_domain(upa, uset) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionPwAff { ptr: isl_rs_result,
                                         should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_aff_pullback_union_pw_multi_aff`.
    pub fn pullback_union_pw_multi_aff(self, upma: UnionPwMultiAff) -> UnionPwAff {
        let context_for_error_message = self.get_ctx();
        let upa = self;
        let mut upa = upa;
        upa.do_not_free_on_drop();
        let upa = upa.ptr;
        let mut upma = upma;
        upma.do_not_free_on_drop();
        let upma = upma.ptr;
        let isl_rs_result = unsafe { isl_union_pw_aff_pullback_union_pw_multi_aff(upa, upma) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionPwAff { ptr: isl_rs_result,
                                         should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_aff_intersect_domain_wrapped_domain`.
    pub fn intersect_domain_wrapped_domain(self, uset: UnionSet) -> UnionPwAff {
        let context_for_error_message = self.get_ctx();
        let upa = self;
        let mut upa = upa;
        upa.do_not_free_on_drop();
        let upa = upa.ptr;
        let mut uset = uset;
        uset.do_not_free_on_drop();
        let uset = uset.ptr;
        let isl_rs_result = unsafe { isl_union_pw_aff_intersect_domain_wrapped_domain(upa, uset) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionPwAff { ptr: isl_rs_result,
                                         should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_aff_set_dim_name`.
    pub fn set_dim_name(self, type_: DimType, pos: u32, s: &str) -> UnionPwAff {
        let context_for_error_message = self.get_ctx();
        let upa = self;
        let mut upa = upa;
        upa.do_not_free_on_drop();
        let upa = upa.ptr;
        let s = CString::new(s).unwrap();
        let s = s.as_ptr();
        let isl_rs_result = unsafe { isl_union_pw_aff_set_dim_name(upa, type_, pos, s) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionPwAff { ptr: isl_rs_result,
                                         should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_aff_n_pw_aff`.
    pub fn n_pw_aff(&self) -> i32 {
        let upa = self;
        let upa = upa.ptr;
        let isl_rs_result = unsafe { isl_union_pw_aff_n_pw_aff(upa) };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_aff_involves_nan`.
    pub fn involves_nan(&self) -> bool {
        let context_for_error_message = self.get_ctx();
        let upa = self;
        let upa = upa.ptr;
        let isl_rs_result = unsafe { isl_union_pw_aff_involves_nan(upa) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error: {}", context_for_error_message.last_error_msg()),
        };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_aff_extract_pw_aff`.
    pub fn extract_pw_aff(&self, space: Space) -> PwAff {
        let context_for_error_message = self.get_ctx();
        let upa = self;
        let upa = upa.ptr;
        let mut space = space;
        space.do_not_free_on_drop();
        let space = space.ptr;
        let isl_rs_result = unsafe { isl_union_pw_aff_extract_pw_aff(upa, space) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwAff { ptr: isl_rs_result,
                                    should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_aff_scale_val`.
    pub fn scale_val(self, v: Val) -> UnionPwAff {
        let context_for_error_message = self.get_ctx();
        let upa = self;
        let mut upa = upa;
        upa.do_not_free_on_drop();
        let upa = upa.ptr;
        let mut v = v;
        v.do_not_free_on_drop();
        let v = v.ptr;
        let isl_rs_result = unsafe { isl_union_pw_aff_scale_val(upa, v) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionPwAff { ptr: isl_rs_result,
                                         should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_aff_subtract_domain_space`.
    pub fn subtract_domain_space(self, space: Space) -> UnionPwAff {
        let context_for_error_message = self.get_ctx();
        let upa = self;
        let mut upa = upa;
        upa.do_not_free_on_drop();
        let upa = upa.ptr;
        let mut space = space;
        space.do_not_free_on_drop();
        let space = space.ptr;
        let isl_rs_result = unsafe { isl_union_pw_aff_subtract_domain_space(upa, space) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionPwAff { ptr: isl_rs_result,
                                         should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_aff_to_str`.
    pub fn to_str(&self) -> &str {
        let upa = self;
        let upa = upa.ptr;
        let isl_rs_result = unsafe { isl_union_pw_aff_to_str(upa) };
        let isl_rs_result = unsafe { CStr::from_ptr(isl_rs_result) };
        let isl_rs_result = isl_rs_result.to_str().unwrap();
        isl_rs_result
    }

    /// Wraps `isl_union_pw_aff_union_add`.
    pub fn union_add(self, upa2: UnionPwAff) -> UnionPwAff {
        let context_for_error_message = self.get_ctx();
        let upa1 = self;
        let mut upa1 = upa1;
        upa1.do_not_free_on_drop();
        let upa1 = upa1.ptr;
        let mut upa2 = upa2;
        upa2.do_not_free_on_drop();
        let upa2 = upa2.ptr;
        let isl_rs_result = unsafe { isl_union_pw_aff_union_add(upa1, upa2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionPwAff { ptr: isl_rs_result,
                                         should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_aff_read_from_str`.
    pub fn read_from_str(ctx: &Context, str_: &str) -> UnionPwAff {
        let ctx = ctx.ptr;
        let str_ = CString::new(str_).unwrap();
        let str_ = str_.as_ptr();
        let isl_rs_result = unsafe { isl_union_pw_aff_read_from_str(ctx, str_) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = UnionPwAff { ptr: isl_rs_result,
                                         should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_aff_intersect_params`.
    pub fn intersect_params(self, set: Set) -> UnionPwAff {
        let context_for_error_message = self.get_ctx();
        let upa = self;
        let mut upa = upa;
        upa.do_not_free_on_drop();
        let upa = upa.ptr;
        let mut set = set;
        set.do_not_free_on_drop();
        let set = set.ptr;
        let isl_rs_result = unsafe { isl_union_pw_aff_intersect_params(upa, set) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionPwAff { ptr: isl_rs_result,
                                         should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_aff_mod_val`.
    pub fn mod_val(self, f: Val) -> UnionPwAff {
        let context_for_error_message = self.get_ctx();
        let upa = self;
        let mut upa = upa;
        upa.do_not_free_on_drop();
        let upa = upa.ptr;
        let mut f = f;
        f.do_not_free_on_drop();
        let f = f.ptr;
        let isl_rs_result = unsafe { isl_union_pw_aff_mod_val(upa, f) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionPwAff { ptr: isl_rs_result,
                                         should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_aff_pw_aff_on_domain`.
    pub fn pw_aff_on_domain(domain: UnionSet, pa: PwAff) -> UnionPwAff {
        let mut domain = domain;
        domain.do_not_free_on_drop();
        let domain = domain.ptr;
        let mut pa = pa;
        pa.do_not_free_on_drop();
        let pa = pa.ptr;
        let isl_rs_result = unsafe { isl_union_pw_aff_pw_aff_on_domain(domain, pa) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = UnionPwAff { ptr: isl_rs_result,
                                         should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_aff_from_pw_aff`.
    pub fn from_pw_aff(pa: PwAff) -> UnionPwAff {
        let mut pa = pa;
        pa.do_not_free_on_drop();
        let pa = pa.ptr;
        let isl_rs_result = unsafe { isl_union_pw_aff_from_pw_aff(pa) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = UnionPwAff { ptr: isl_rs_result,
                                         should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_aff_empty_space`.
    pub fn empty_space(space: Space) -> UnionPwAff {
        let mut space = space;
        space.do_not_free_on_drop();
        let space = space.ptr;
        let isl_rs_result = unsafe { isl_union_pw_aff_empty_space(space) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = UnionPwAff { ptr: isl_rs_result,
                                         should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_aff_get_pw_aff_list`.
    pub fn get_pw_aff_list(&self) -> PwAffList {
        let context_for_error_message = self.get_ctx();
        let upa = self;
        let upa = upa.ptr;
        let isl_rs_result = unsafe { isl_union_pw_aff_get_pw_aff_list(upa) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwAffList { ptr: isl_rs_result,
                                        should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_aff_reset_user`.
    pub fn reset_user(self) -> UnionPwAff {
        let context_for_error_message = self.get_ctx();
        let upa = self;
        let mut upa = upa;
        upa.do_not_free_on_drop();
        let upa = upa.ptr;
        let isl_rs_result = unsafe { isl_union_pw_aff_reset_user(upa) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionPwAff { ptr: isl_rs_result,
                                         should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_aff_param_on_domain_id`.
    pub fn param_on_domain_id(domain: UnionSet, id: Id) -> UnionPwAff {
        let mut domain = domain;
        domain.do_not_free_on_drop();
        let domain = domain.ptr;
        let mut id = id;
        id.do_not_free_on_drop();
        let id = id.ptr;
        let isl_rs_result = unsafe { isl_union_pw_aff_param_on_domain_id(domain, id) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = UnionPwAff { ptr: isl_rs_result,
                                         should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_aff_free`.
    pub fn free(self) -> UnionPwAff {
        let context_for_error_message = self.get_ctx();
        let upa = self;
        let mut upa = upa;
        upa.do_not_free_on_drop();
        let upa = upa.ptr;
        let isl_rs_result = unsafe { isl_union_pw_aff_free(upa) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionPwAff { ptr: isl_rs_result,
                                         should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_aff_every_pw_aff`.
    pub fn every_pw_aff<test>(&self, test: test, user: *mut c_void) -> bool
        where test: FnMut(&PwAff) -> bool
    {
        let context_for_error_message = self.get_ctx();
        let upa = self;
        let upa = upa.ptr;
        extern "C" fn test_wrapper<test>(arg_0: uintptr_t, arg_1: *mut c_void) -> i32
            where test: FnMut(&PwAff) -> bool
        {
            if arg_0 == 0 {
                panic!("ISL error");
            }
            let arg_0 = &PwAff { ptr: arg_0,
                                 should_free_on_drop: true };
            let test: *mut test = unsafe { core::mem::transmute(arg_1) };
            let test: &mut test = unsafe { &mut *test };
            let res = test(arg_0);
            let res = if res { 1 } else { 0 };
            res
        }

        let mut test = test;
        let test_user: *mut test = &mut test;
        let test_user: *mut c_void = unsafe { core::mem::transmute(test_user) };
        let test = test_wrapper::<test>;
        let isl_rs_result = unsafe { isl_union_pw_aff_every_pw_aff(upa, test, user) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error: {}", context_for_error_message.last_error_msg()),
        };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_aff_intersect_domain_space`.
    pub fn intersect_domain_space(self, space: Space) -> UnionPwAff {
        let context_for_error_message = self.get_ctx();
        let upa = self;
        let mut upa = upa;
        upa.do_not_free_on_drop();
        let upa = upa.ptr;
        let mut space = space;
        space.do_not_free_on_drop();
        let space = space.ptr;
        let isl_rs_result = unsafe { isl_union_pw_aff_intersect_domain_space(upa, space) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionPwAff { ptr: isl_rs_result,
                                         should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_aff_intersect_domain_wrapped_range`.
    pub fn intersect_domain_wrapped_range(self, uset: UnionSet) -> UnionPwAff {
        let context_for_error_message = self.get_ctx();
        let upa = self;
        let mut upa = upa;
        upa.do_not_free_on_drop();
        let upa = upa.ptr;
        let mut uset = uset;
        uset.do_not_free_on_drop();
        let uset = uset.ptr;
        let isl_rs_result = unsafe { isl_union_pw_aff_intersect_domain_wrapped_range(upa, uset) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionPwAff { ptr: isl_rs_result,
                                         should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_aff_to_list`.
    pub fn to_list(self) -> UnionPwAffList {
        let context_for_error_message = self.get_ctx();
        let el = self;
        let mut el = el;
        el.do_not_free_on_drop();
        let el = el.ptr;
        let isl_rs_result = unsafe { isl_union_pw_aff_to_list(el) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionPwAffList { ptr: isl_rs_result,
                                             should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_aff_empty_ctx`.
    pub fn empty_ctx(ctx: &Context) -> UnionPwAff {
        let ctx = ctx.ptr;
        let isl_rs_result = unsafe { isl_union_pw_aff_empty_ctx(ctx) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = UnionPwAff { ptr: isl_rs_result,
                                         should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_aff_empty`.
    pub fn empty(space: Space) -> UnionPwAff {
        let mut space = space;
        space.do_not_free_on_drop();
        let space = space.ptr;
        let isl_rs_result = unsafe { isl_union_pw_aff_empty(space) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = UnionPwAff { ptr: isl_rs_result,
                                         should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_aff_foreach_pw_aff`.
    pub fn foreach_pw_aff<fn_>(&self, fn_: fn_, user: *mut c_void) -> Stat
        where fn_: FnMut(&PwAff) -> Stat
    {
        let context_for_error_message = self.get_ctx();
        let upa = self;
        let upa = upa.ptr;
        extern "C" fn fn__wrapper<fn_>(arg_0: uintptr_t, arg_1: *mut c_void) -> Stat
            where fn_: FnMut(&PwAff) -> Stat
        {
            if arg_0 == 0 {
                panic!("ISL error");
            }
            let arg_0 = &PwAff { ptr: arg_0,
                                 should_free_on_drop: true };
            let fn_: *mut fn_ = unsafe { core::mem::transmute(arg_1) };
            let fn_: &mut fn_ = unsafe { &mut *fn_ };
            let res = fn_(arg_0);
            res
        }

        let mut fn_ = fn_;
        let user: *mut fn_ = &mut fn_;
        let user: *mut c_void = unsafe { core::mem::transmute(user) };
        let fn_ = fn__wrapper::<fn_>;
        let isl_rs_result = unsafe { isl_union_pw_aff_foreach_pw_aff(upa, fn_, user) };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_aff_get_space`.
    pub fn get_space(&self) -> Space {
        let context_for_error_message = self.get_ctx();
        let upa = self;
        let upa = upa.ptr;
        let isl_rs_result = unsafe { isl_union_pw_aff_get_space(upa) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Space { ptr: isl_rs_result,
                                    should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_aff_drop_dims`.
    pub fn drop_dims(self, type_: DimType, first: u32, n: u32) -> UnionPwAff {
        let context_for_error_message = self.get_ctx();
        let upa = self;
        let mut upa = upa;
        upa.do_not_free_on_drop();
        let upa = upa.ptr;
        let isl_rs_result = unsafe { isl_union_pw_aff_drop_dims(upa, type_, first, n) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionPwAff { ptr: isl_rs_result,
                                         should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_aff_add_pw_aff`.
    pub fn add_pw_aff(self, pa: PwAff) -> UnionPwAff {
        let context_for_error_message = self.get_ctx();
        let upa = self;
        let mut upa = upa;
        upa.do_not_free_on_drop();
        let upa = upa.ptr;
        let mut pa = pa;
        pa.do_not_free_on_drop();
        let pa = pa.ptr;
        let isl_rs_result = unsafe { isl_union_pw_aff_add_pw_aff(upa, pa) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionPwAff { ptr: isl_rs_result,
                                         should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_aff_val_on_domain`.
    pub fn val_on_domain(domain: UnionSet, v: Val) -> UnionPwAff {
        let mut domain = domain;
        domain.do_not_free_on_drop();
        let domain = domain.ptr;
        let mut v = v;
        v.do_not_free_on_drop();
        let v = v.ptr;
        let isl_rs_result = unsafe { isl_union_pw_aff_val_on_domain(domain, v) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = UnionPwAff { ptr: isl_rs_result,
                                         should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_aff_add`.
    pub fn add(self, upa2: UnionPwAff) -> UnionPwAff {
        let context_for_error_message = self.get_ctx();
        let upa1 = self;
        let mut upa1 = upa1;
        upa1.do_not_free_on_drop();
        let upa1 = upa1.ptr;
        let mut upa2 = upa2;
        upa2.do_not_free_on_drop();
        let upa2 = upa2.ptr;
        let isl_rs_result = unsafe { isl_union_pw_aff_add(upa1, upa2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionPwAff { ptr: isl_rs_result,
                                         should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_aff_scale_down_val`.
    pub fn scale_down_val(self, v: Val) -> UnionPwAff {
        let context_for_error_message = self.get_ctx();
        let upa = self;
        let mut upa = upa;
        upa.do_not_free_on_drop();
        let upa = upa.ptr;
        let mut v = v;
        v.do_not_free_on_drop();
        let v = v.ptr;
        let isl_rs_result = unsafe { isl_union_pw_aff_scale_down_val(upa, v) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionPwAff { ptr: isl_rs_result,
                                         should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_aff_intersect_domain_union_set`.
    pub fn intersect_domain_union_set(self, uset: UnionSet) -> UnionPwAff {
        let context_for_error_message = self.get_ctx();
        let upa = self;
        let mut upa = upa;
        upa.do_not_free_on_drop();
        let upa = upa.ptr;
        let mut uset = uset;
        uset.do_not_free_on_drop();
        let uset = uset.ptr;
        let isl_rs_result = unsafe { isl_union_pw_aff_intersect_domain_union_set(upa, uset) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionPwAff { ptr: isl_rs_result,
                                         should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_aff_dim`.
    pub fn dim(&self, type_: DimType) -> i32 {
        let upa = self;
        let upa = upa.ptr;
        let isl_rs_result = unsafe { isl_union_pw_aff_dim(upa, type_) };
        isl_rs_result
    }

    /// Wraps `isl_union_pw_aff_zero_union_set`.
    pub fn zero_union_set(self) -> UnionSet {
        let context_for_error_message = self.get_ctx();
        let upa = self;
        let mut upa = upa;
        upa.do_not_free_on_drop();
        let upa = upa.ptr;
        let isl_rs_result = unsafe { isl_union_pw_aff_zero_union_set(upa) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionSet { ptr: isl_rs_result,
                                       should_free_on_drop: true };
        isl_rs_result
    }

    /// Does not call isl_xxx_free() on being dropped. (For internal use only.)
    pub fn do_not_free_on_drop(&mut self) {
        self.should_free_on_drop = false;
    }
}

impl Drop for UnionPwAff {
    fn drop(&mut self) {
        if self.should_free_on_drop {
            unsafe {
                isl_union_pw_aff_free(self.ptr);
            }
        }
    }
}
