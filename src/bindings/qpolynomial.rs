// Automatically generated by isl_bindings_generator.
// LICENSE: MIT

use crate::bindings::{
    Aff, BasicSet, Constraint, Context, DimType, Fold, Point, QPolynomialFold, QPolynomialList,
    Set, Space, Stat, Term, Val,
};
use libc::uintptr_t;
use std::ffi::{CStr, CString};
use std::os::raw::{c_char, c_void};

/// Wraps `isl_qpolynomial`.
pub struct QPolynomial {
    pub ptr: uintptr_t,
    pub should_free_on_drop: bool,
}

extern "C" {

    fn isl_qpolynomial_get_space(qp: uintptr_t) -> uintptr_t;

    fn isl_qpolynomial_copy(qp: uintptr_t) -> uintptr_t;

    fn isl_qpolynomial_align_params(qp: uintptr_t, model: uintptr_t) -> uintptr_t;

    fn isl_qpolynomial_to_list(el: uintptr_t) -> uintptr_t;

    fn isl_qpolynomial_project_domain_on_params(qp: uintptr_t) -> uintptr_t;

    fn isl_qpolynomial_zero_on_domain(domain: uintptr_t) -> uintptr_t;

    fn isl_qpolynomial_scale_down_val(qp: uintptr_t, v: uintptr_t) -> uintptr_t;

    fn isl_qpolynomial_add_dims(qp: uintptr_t, type_: DimType, n: u32) -> uintptr_t;

    fn isl_qpolynomial_pow(qp: uintptr_t, power: u32) -> uintptr_t;

    fn isl_qpolynomial_neginfty_on_domain(domain: uintptr_t) -> uintptr_t;

    fn isl_qpolynomial_fold_get_ctx(fold: uintptr_t) -> uintptr_t;

    fn isl_qpolynomial_from_constraint(c: uintptr_t, type_: DimType, pos: u32) -> uintptr_t;

    fn isl_qpolynomial_set_dim_name(qp: uintptr_t, type_: DimType, pos: u32, s: *const c_char)
                                    -> uintptr_t;

    fn isl_qpolynomial_from_aff(aff: uintptr_t) -> uintptr_t;

    fn isl_qpolynomial_is_zero(qp: uintptr_t) -> i32;

    fn isl_qpolynomial_add(qp1: uintptr_t, qp2: uintptr_t) -> uintptr_t;

    fn isl_qpolynomial_from_term(term: uintptr_t) -> uintptr_t;

    fn isl_qpolynomial_one_on_domain(domain: uintptr_t) -> uintptr_t;

    fn isl_qpolynomial_foreach_term(qp: uintptr_t,
                                    fn_: unsafe extern "C" fn(uintptr_t, *mut c_void) -> Stat,
                                    user: *mut c_void)
                                    -> Stat;

    fn isl_qpolynomial_as_polynomial_on_domain(qp: uintptr_t, bset: uintptr_t,
                                               fn_: unsafe extern "C" fn(uintptr_t,
                                                                    uintptr_t,
                                                                    *mut c_void)
                                                                    -> Stat,
                                               user: *mut c_void)
                                               -> Stat;

    fn isl_qpolynomial_eval(qp: uintptr_t, pnt: uintptr_t) -> uintptr_t;

    fn isl_qpolynomial_sub(qp1: uintptr_t, qp2: uintptr_t) -> uintptr_t;

    fn isl_qpolynomial_fold_plain_is_equal(fold1: uintptr_t, fold2: uintptr_t) -> i32;

    fn isl_qpolynomial_val_on_domain(space: uintptr_t, val: uintptr_t) -> uintptr_t;

    fn isl_qpolynomial_free(qp: uintptr_t) -> uintptr_t;

    fn isl_qpolynomial_move_dims(qp: uintptr_t, dst_type: DimType, dst_pos: u32,
                                 src_type: DimType, src_pos: u32, n: u32)
                                 -> uintptr_t;

    fn isl_qpolynomial_gist(qp: uintptr_t, context: uintptr_t) -> uintptr_t;

    fn isl_qpolynomial_is_infty(qp: uintptr_t) -> i32;

    fn isl_qpolynomial_get_constant_val(qp: uintptr_t) -> uintptr_t;

    fn isl_qpolynomial_dump(qp: uintptr_t);

    fn isl_qpolynomial_fold_empty(type_: Fold, space: uintptr_t) -> uintptr_t;

    fn isl_qpolynomial_fold_eval(fold: uintptr_t, pnt: uintptr_t) -> uintptr_t;

    fn isl_qpolynomial_plain_is_equal(qp1: uintptr_t, qp2: uintptr_t) -> i32;

    fn isl_qpolynomial_neg(qp: uintptr_t) -> uintptr_t;

    fn isl_qpolynomial_fold_alloc(type_: Fold, qp: uintptr_t) -> uintptr_t;

    fn isl_qpolynomial_mul(qp1: uintptr_t, qp2: uintptr_t) -> uintptr_t;

    fn isl_qpolynomial_is_nan(qp: uintptr_t) -> i32;

    fn isl_qpolynomial_fold_get_space(fold: uintptr_t) -> uintptr_t;

    fn isl_qpolynomial_dim(qp: uintptr_t, type_: DimType) -> i32;

    fn isl_qpolynomial_nan_on_domain(domain: uintptr_t) -> uintptr_t;

    fn isl_qpolynomial_is_neginfty(qp: uintptr_t) -> i32;

    fn isl_qpolynomial_insert_dims(qp: uintptr_t, type_: DimType, first: u32, n: u32) -> uintptr_t;

    fn isl_qpolynomial_fold_copy(fold: uintptr_t) -> uintptr_t;

    fn isl_qpolynomial_var_on_domain(domain: uintptr_t, type_: DimType, pos: u32) -> uintptr_t;

    fn isl_qpolynomial_fold_is_empty(fold: uintptr_t) -> i32;

    fn isl_qpolynomial_infty_on_domain(domain: uintptr_t) -> uintptr_t;

    fn isl_qpolynomial_sgn(qp: uintptr_t) -> i32;

    fn isl_qpolynomial_involves_dims(qp: uintptr_t, type_: DimType, first: u32, n: u32) -> i32;

    fn isl_qpolynomial_fold_free(fold: uintptr_t) -> uintptr_t;

    fn isl_qpolynomial_fold_gist(fold: uintptr_t, context: uintptr_t) -> uintptr_t;

    fn isl_qpolynomial_fold_foreach_qpolynomial(fold: uintptr_t,
                                                fn_: unsafe extern "C" fn(uintptr_t,
                                                                     *mut c_void)
                                                                     -> Stat,
                                                user: *mut c_void)
                                                -> Stat;

    fn isl_qpolynomial_fold_scale_down_val(fold: uintptr_t, v: uintptr_t) -> uintptr_t;

    fn isl_qpolynomial_get_ctx(qp: uintptr_t) -> uintptr_t;

    fn isl_qpolynomial_drop_dims(qp: uintptr_t, type_: DimType, first: u32, n: u32) -> uintptr_t;

    fn isl_qpolynomial_fold_move_dims(fold: uintptr_t, dst_type: DimType, dst_pos: u32,
                                      src_type: DimType, src_pos: u32, n: u32)
                                      -> uintptr_t;

    fn isl_qpolynomial_fold_dump(fold: uintptr_t);

    fn isl_qpolynomial_gist_params(qp: uintptr_t, context: uintptr_t) -> uintptr_t;

    fn isl_qpolynomial_fold_gist_params(fold: uintptr_t, context: uintptr_t) -> uintptr_t;

    fn isl_qpolynomial_get_domain_space(qp: uintptr_t) -> uintptr_t;

    fn isl_qpolynomial_fold_get_domain_space(fold: uintptr_t) -> uintptr_t;

    fn isl_qpolynomial_homogenize(poly: uintptr_t) -> uintptr_t;

    fn isl_qpolynomial_fold_is_nan(fold: uintptr_t) -> i32;

    fn isl_qpolynomial_fold_fold(fold1: uintptr_t, fold2: uintptr_t) -> uintptr_t;

    fn isl_qpolynomial_fold_scale_val(fold: uintptr_t, v: uintptr_t) -> uintptr_t;

    fn isl_qpolynomial_scale_val(qp: uintptr_t, v: uintptr_t) -> uintptr_t;

    fn isl_qpolynomial_fold_get_type(fold: uintptr_t) -> Fold;

}

impl Clone for QPolynomial {
    fn clone(&self) -> QPolynomial {
        self.copy()
    }
}

impl core::ops::Add for QPolynomial {
    type Output = QPolynomial;

    fn add(self, rhs: QPolynomial) -> QPolynomial {
        self.add(rhs)
    }
}

impl core::ops::Sub for QPolynomial {
    type Output = QPolynomial;

    fn sub(self, rhs: QPolynomial) -> QPolynomial {
        self.sub(rhs)
    }
}

impl core::ops::Mul for QPolynomial {
    type Output = QPolynomial;

    fn mul(self, rhs: QPolynomial) -> QPolynomial {
        self.mul(rhs)
    }
}

impl QPolynomial {
    /// Wraps `isl_qpolynomial_get_space`.
    pub fn get_space(&self) -> Space {
        let context_for_error_message = self.get_ctx();
        let qp = self;
        let qp = qp.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_get_space(qp) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Space { ptr: isl_rs_result,
                                    should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_copy`.
    pub fn copy(&self) -> QPolynomial {
        let context_for_error_message = self.get_ctx();
        let qp = self;
        let qp = qp.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_copy(qp) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = QPolynomial { ptr: isl_rs_result,
                                          should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_align_params`.
    pub fn align_params(self, model: Space) -> QPolynomial {
        let context_for_error_message = self.get_ctx();
        let qp = self;
        let mut qp = qp;
        qp.do_not_free_on_drop();
        let qp = qp.ptr;
        let mut model = model;
        model.do_not_free_on_drop();
        let model = model.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_align_params(qp, model) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = QPolynomial { ptr: isl_rs_result,
                                          should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_to_list`.
    pub fn to_list(self) -> QPolynomialList {
        let context_for_error_message = self.get_ctx();
        let el = self;
        let mut el = el;
        el.do_not_free_on_drop();
        let el = el.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_to_list(el) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = QPolynomialList { ptr: isl_rs_result,
                                              should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_project_domain_on_params`.
    pub fn project_domain_on_params(self) -> QPolynomial {
        let context_for_error_message = self.get_ctx();
        let qp = self;
        let mut qp = qp;
        qp.do_not_free_on_drop();
        let qp = qp.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_project_domain_on_params(qp) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = QPolynomial { ptr: isl_rs_result,
                                          should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_zero_on_domain`.
    pub fn zero_on_domain(domain: Space) -> QPolynomial {
        let mut domain = domain;
        domain.do_not_free_on_drop();
        let domain = domain.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_zero_on_domain(domain) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = QPolynomial { ptr: isl_rs_result,
                                          should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_scale_down_val`.
    pub fn scale_down_val(self, v: Val) -> QPolynomial {
        let context_for_error_message = self.get_ctx();
        let qp = self;
        let mut qp = qp;
        qp.do_not_free_on_drop();
        let qp = qp.ptr;
        let mut v = v;
        v.do_not_free_on_drop();
        let v = v.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_scale_down_val(qp, v) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = QPolynomial { ptr: isl_rs_result,
                                          should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_add_dims`.
    pub fn add_dims(self, type_: DimType, n: u32) -> QPolynomial {
        let context_for_error_message = self.get_ctx();
        let qp = self;
        let mut qp = qp;
        qp.do_not_free_on_drop();
        let qp = qp.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_add_dims(qp, type_, n) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = QPolynomial { ptr: isl_rs_result,
                                          should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_pow`.
    pub fn pow(self, power: u32) -> QPolynomial {
        let context_for_error_message = self.get_ctx();
        let qp = self;
        let mut qp = qp;
        qp.do_not_free_on_drop();
        let qp = qp.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_pow(qp, power) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = QPolynomial { ptr: isl_rs_result,
                                          should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_neginfty_on_domain`.
    pub fn neginfty_on_domain(domain: Space) -> QPolynomial {
        let mut domain = domain;
        domain.do_not_free_on_drop();
        let domain = domain.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_neginfty_on_domain(domain) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = QPolynomial { ptr: isl_rs_result,
                                          should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_fold_get_ctx`.
    pub fn fold_get_ctx(fold: &QPolynomialFold) -> Context {
        let fold = fold.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_fold_get_ctx(fold) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = Context { ptr: isl_rs_result,
                                      should_free_on_drop: true };
        let mut isl_rs_result = isl_rs_result;
        isl_rs_result.do_not_free_on_drop();
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_from_constraint`.
    pub fn from_constraint(c: Constraint, type_: DimType, pos: u32) -> QPolynomial {
        let mut c = c;
        c.do_not_free_on_drop();
        let c = c.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_from_constraint(c, type_, pos) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = QPolynomial { ptr: isl_rs_result,
                                          should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_set_dim_name`.
    pub fn set_dim_name(self, type_: DimType, pos: u32, s: &str) -> QPolynomial {
        let context_for_error_message = self.get_ctx();
        let qp = self;
        let mut qp = qp;
        qp.do_not_free_on_drop();
        let qp = qp.ptr;
        let s = CString::new(s).unwrap();
        let s = s.as_ptr();
        let isl_rs_result = unsafe { isl_qpolynomial_set_dim_name(qp, type_, pos, s) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = QPolynomial { ptr: isl_rs_result,
                                          should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_from_aff`.
    pub fn from_aff(aff: Aff) -> QPolynomial {
        let mut aff = aff;
        aff.do_not_free_on_drop();
        let aff = aff.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_from_aff(aff) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = QPolynomial { ptr: isl_rs_result,
                                          should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_is_zero`.
    pub fn is_zero(&self) -> bool {
        let context_for_error_message = self.get_ctx();
        let qp = self;
        let qp = qp.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_is_zero(qp) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error: {}", context_for_error_message.last_error_msg()),
        };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_add`.
    pub fn add(self, qp2: QPolynomial) -> QPolynomial {
        let context_for_error_message = self.get_ctx();
        let qp1 = self;
        let mut qp1 = qp1;
        qp1.do_not_free_on_drop();
        let qp1 = qp1.ptr;
        let mut qp2 = qp2;
        qp2.do_not_free_on_drop();
        let qp2 = qp2.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_add(qp1, qp2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = QPolynomial { ptr: isl_rs_result,
                                          should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_from_term`.
    pub fn from_term(term: Term) -> QPolynomial {
        let mut term = term;
        term.do_not_free_on_drop();
        let term = term.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_from_term(term) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = QPolynomial { ptr: isl_rs_result,
                                          should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_one_on_domain`.
    pub fn one_on_domain(domain: Space) -> QPolynomial {
        let mut domain = domain;
        domain.do_not_free_on_drop();
        let domain = domain.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_one_on_domain(domain) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = QPolynomial { ptr: isl_rs_result,
                                          should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_foreach_term`.
    pub fn foreach_term<fn_>(&self, fn_: fn_, user: *mut c_void) -> Stat
        where fn_: FnMut(&Term) -> Stat
    {
        let context_for_error_message = self.get_ctx();
        let qp = self;
        let qp = qp.ptr;
        extern "C" fn fn__wrapper<fn_>(arg_0: uintptr_t, arg_1: *mut c_void) -> Stat
            where fn_: FnMut(&Term) -> Stat
        {
            if arg_0 == 0 {
                panic!("ISL error");
            }
            let arg_0 = &Term { ptr: arg_0,
                                should_free_on_drop: true };
            let fn_: *mut fn_ = unsafe { core::mem::transmute(arg_1) };
            let fn_: &mut fn_ = unsafe { &mut *fn_ };
            let res = fn_(arg_0);
            res
        }

        let mut fn_ = fn_;
        let user: *mut fn_ = &mut fn_;
        let user: *mut c_void = unsafe { core::mem::transmute(user) };
        let fn_ = fn__wrapper::<fn_>;
        let isl_rs_result = unsafe { isl_qpolynomial_foreach_term(qp, fn_, user) };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_as_polynomial_on_domain`.
    pub fn as_polynomial_on_domain<fn_>(&self, bset: &BasicSet, fn_: fn_, user: *mut c_void) -> Stat
        where fn_: FnMut(&BasicSet, &QPolynomial) -> Stat
    {
        let context_for_error_message = self.get_ctx();
        let qp = self;
        let qp = qp.ptr;
        let bset = bset.ptr;
        extern "C" fn fn__wrapper<fn_>(arg_0: uintptr_t, arg_1: uintptr_t, arg_2: *mut c_void)
                                       -> Stat
            where fn_: FnMut(&BasicSet, &QPolynomial) -> Stat
        {
            if arg_0 == 0 {
                panic!("ISL error");
            }
            let arg_0 = &BasicSet { ptr: arg_0,
                                    should_free_on_drop: true };
            if arg_1 == 0 {
                panic!("ISL error");
            }
            let arg_1 = &QPolynomial { ptr: arg_1,
                                       should_free_on_drop: true };
            let fn_: *mut fn_ = unsafe { core::mem::transmute(arg_2) };
            let fn_: &mut fn_ = unsafe { &mut *fn_ };
            let res = fn_(arg_0, arg_1);
            res
        }

        let mut fn_ = fn_;
        let user: *mut fn_ = &mut fn_;
        let user: *mut c_void = unsafe { core::mem::transmute(user) };
        let fn_ = fn__wrapper::<fn_>;
        let isl_rs_result = unsafe { isl_qpolynomial_as_polynomial_on_domain(qp, bset, fn_, user) };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_eval`.
    pub fn eval(self, pnt: Point) -> Val {
        let context_for_error_message = self.get_ctx();
        let qp = self;
        let mut qp = qp;
        qp.do_not_free_on_drop();
        let qp = qp.ptr;
        let mut pnt = pnt;
        pnt.do_not_free_on_drop();
        let pnt = pnt.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_eval(qp, pnt) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Val { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_sub`.
    pub fn sub(self, qp2: QPolynomial) -> QPolynomial {
        let context_for_error_message = self.get_ctx();
        let qp1 = self;
        let mut qp1 = qp1;
        qp1.do_not_free_on_drop();
        let qp1 = qp1.ptr;
        let mut qp2 = qp2;
        qp2.do_not_free_on_drop();
        let qp2 = qp2.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_sub(qp1, qp2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = QPolynomial { ptr: isl_rs_result,
                                          should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_fold_plain_is_equal`.
    pub fn fold_plain_is_equal(fold1: &QPolynomialFold, fold2: &QPolynomialFold) -> bool {
        let fold1 = fold1.ptr;
        let fold2 = fold2.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_fold_plain_is_equal(fold1, fold2) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error"),
        };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_val_on_domain`.
    pub fn val_on_domain(space: Space, val: Val) -> QPolynomial {
        let mut space = space;
        space.do_not_free_on_drop();
        let space = space.ptr;
        let mut val = val;
        val.do_not_free_on_drop();
        let val = val.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_val_on_domain(space, val) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = QPolynomial { ptr: isl_rs_result,
                                          should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_free`.
    pub fn free(self) -> QPolynomial {
        let context_for_error_message = self.get_ctx();
        let qp = self;
        let mut qp = qp;
        qp.do_not_free_on_drop();
        let qp = qp.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_free(qp) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = QPolynomial { ptr: isl_rs_result,
                                          should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_move_dims`.
    pub fn move_dims(self, dst_type: DimType, dst_pos: u32, src_type: DimType, src_pos: u32,
                     n: u32)
                     -> QPolynomial {
        let context_for_error_message = self.get_ctx();
        let qp = self;
        let mut qp = qp;
        qp.do_not_free_on_drop();
        let qp = qp.ptr;
        let isl_rs_result =
            unsafe { isl_qpolynomial_move_dims(qp, dst_type, dst_pos, src_type, src_pos, n) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = QPolynomial { ptr: isl_rs_result,
                                          should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_gist`.
    pub fn gist(self, context: Set) -> QPolynomial {
        let context_for_error_message = self.get_ctx();
        let qp = self;
        let mut qp = qp;
        qp.do_not_free_on_drop();
        let qp = qp.ptr;
        let mut context = context;
        context.do_not_free_on_drop();
        let context = context.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_gist(qp, context) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = QPolynomial { ptr: isl_rs_result,
                                          should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_is_infty`.
    pub fn is_infty(&self) -> bool {
        let context_for_error_message = self.get_ctx();
        let qp = self;
        let qp = qp.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_is_infty(qp) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error: {}", context_for_error_message.last_error_msg()),
        };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_get_constant_val`.
    pub fn get_constant_val(&self) -> Val {
        let context_for_error_message = self.get_ctx();
        let qp = self;
        let qp = qp.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_get_constant_val(qp) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Val { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_dump`.
    pub fn dump(&self) {
        let qp = self;
        let qp = qp.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_dump(qp) };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_fold_empty`.
    pub fn fold_empty(type_: Fold, space: Space) -> QPolynomialFold {
        let mut space = space;
        space.do_not_free_on_drop();
        let space = space.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_fold_empty(type_, space) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = QPolynomialFold { ptr: isl_rs_result,
                                              should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_fold_eval`.
    pub fn fold_eval(fold: QPolynomialFold, pnt: Point) -> Val {
        let mut fold = fold;
        fold.do_not_free_on_drop();
        let fold = fold.ptr;
        let mut pnt = pnt;
        pnt.do_not_free_on_drop();
        let pnt = pnt.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_fold_eval(fold, pnt) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = Val { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_plain_is_equal`.
    pub fn plain_is_equal(&self, qp2: &QPolynomial) -> bool {
        let context_for_error_message = self.get_ctx();
        let qp1 = self;
        let qp1 = qp1.ptr;
        let qp2 = qp2.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_plain_is_equal(qp1, qp2) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error: {}", context_for_error_message.last_error_msg()),
        };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_neg`.
    pub fn neg(self) -> QPolynomial {
        let context_for_error_message = self.get_ctx();
        let qp = self;
        let mut qp = qp;
        qp.do_not_free_on_drop();
        let qp = qp.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_neg(qp) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = QPolynomial { ptr: isl_rs_result,
                                          should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_fold_alloc`.
    pub fn fold_alloc(type_: Fold, qp: QPolynomial) -> QPolynomialFold {
        let mut qp = qp;
        qp.do_not_free_on_drop();
        let qp = qp.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_fold_alloc(type_, qp) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = QPolynomialFold { ptr: isl_rs_result,
                                              should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_mul`.
    pub fn mul(self, qp2: QPolynomial) -> QPolynomial {
        let context_for_error_message = self.get_ctx();
        let qp1 = self;
        let mut qp1 = qp1;
        qp1.do_not_free_on_drop();
        let qp1 = qp1.ptr;
        let mut qp2 = qp2;
        qp2.do_not_free_on_drop();
        let qp2 = qp2.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_mul(qp1, qp2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = QPolynomial { ptr: isl_rs_result,
                                          should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_is_nan`.
    pub fn is_nan(&self) -> bool {
        let context_for_error_message = self.get_ctx();
        let qp = self;
        let qp = qp.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_is_nan(qp) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error: {}", context_for_error_message.last_error_msg()),
        };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_fold_get_space`.
    pub fn fold_get_space(fold: &QPolynomialFold) -> Space {
        let fold = fold.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_fold_get_space(fold) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = Space { ptr: isl_rs_result,
                                    should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_dim`.
    pub fn dim(&self, type_: DimType) -> i32 {
        let qp = self;
        let qp = qp.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_dim(qp, type_) };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_nan_on_domain`.
    pub fn nan_on_domain(domain: Space) -> QPolynomial {
        let mut domain = domain;
        domain.do_not_free_on_drop();
        let domain = domain.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_nan_on_domain(domain) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = QPolynomial { ptr: isl_rs_result,
                                          should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_is_neginfty`.
    pub fn is_neginfty(&self) -> bool {
        let context_for_error_message = self.get_ctx();
        let qp = self;
        let qp = qp.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_is_neginfty(qp) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error: {}", context_for_error_message.last_error_msg()),
        };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_insert_dims`.
    pub fn insert_dims(self, type_: DimType, first: u32, n: u32) -> QPolynomial {
        let context_for_error_message = self.get_ctx();
        let qp = self;
        let mut qp = qp;
        qp.do_not_free_on_drop();
        let qp = qp.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_insert_dims(qp, type_, first, n) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = QPolynomial { ptr: isl_rs_result,
                                          should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_fold_copy`.
    pub fn fold_copy(fold: &QPolynomialFold) -> QPolynomialFold {
        let fold = fold.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_fold_copy(fold) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = QPolynomialFold { ptr: isl_rs_result,
                                              should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_var_on_domain`.
    pub fn var_on_domain(domain: Space, type_: DimType, pos: u32) -> QPolynomial {
        let mut domain = domain;
        domain.do_not_free_on_drop();
        let domain = domain.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_var_on_domain(domain, type_, pos) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = QPolynomial { ptr: isl_rs_result,
                                          should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_fold_is_empty`.
    pub fn fold_is_empty(fold: &QPolynomialFold) -> bool {
        let fold = fold.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_fold_is_empty(fold) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error"),
        };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_infty_on_domain`.
    pub fn infty_on_domain(domain: Space) -> QPolynomial {
        let mut domain = domain;
        domain.do_not_free_on_drop();
        let domain = domain.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_infty_on_domain(domain) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = QPolynomial { ptr: isl_rs_result,
                                          should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_sgn`.
    pub fn sgn(&self) -> i32 {
        let qp = self;
        let qp = qp.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_sgn(qp) };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_involves_dims`.
    pub fn involves_dims(&self, type_: DimType, first: u32, n: u32) -> bool {
        let context_for_error_message = self.get_ctx();
        let qp = self;
        let qp = qp.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_involves_dims(qp, type_, first, n) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error: {}", context_for_error_message.last_error_msg()),
        };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_fold_free`.
    pub fn fold_free(fold: QPolynomialFold) -> QPolynomialFold {
        let mut fold = fold;
        fold.do_not_free_on_drop();
        let fold = fold.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_fold_free(fold) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = QPolynomialFold { ptr: isl_rs_result,
                                              should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_fold_gist`.
    pub fn fold_gist(fold: QPolynomialFold, context: Set) -> QPolynomialFold {
        let mut fold = fold;
        fold.do_not_free_on_drop();
        let fold = fold.ptr;
        let mut context = context;
        context.do_not_free_on_drop();
        let context = context.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_fold_gist(fold, context) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = QPolynomialFold { ptr: isl_rs_result,
                                              should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_fold_foreach_qpolynomial`.
    pub fn fold_foreach_qpolynomial<fn_>(fold: &QPolynomialFold, fn_: fn_, user: *mut c_void)
                                         -> Stat
        where fn_: FnMut(&QPolynomial) -> Stat
    {
        let fold = fold.ptr;
        extern "C" fn fn__wrapper<fn_>(arg_0: uintptr_t, arg_1: *mut c_void) -> Stat
            where fn_: FnMut(&QPolynomial) -> Stat
        {
            if arg_0 == 0 {
                panic!("ISL error");
            }
            let arg_0 = &QPolynomial { ptr: arg_0,
                                       should_free_on_drop: true };
            let fn_: *mut fn_ = unsafe { core::mem::transmute(arg_1) };
            let fn_: &mut fn_ = unsafe { &mut *fn_ };
            let res = fn_(arg_0);
            res
        }

        let mut fn_ = fn_;
        let user: *mut fn_ = &mut fn_;
        let user: *mut c_void = unsafe { core::mem::transmute(user) };
        let fn_ = fn__wrapper::<fn_>;
        let isl_rs_result = unsafe { isl_qpolynomial_fold_foreach_qpolynomial(fold, fn_, user) };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_fold_scale_down_val`.
    pub fn fold_scale_down_val(fold: QPolynomialFold, v: Val) -> QPolynomialFold {
        let mut fold = fold;
        fold.do_not_free_on_drop();
        let fold = fold.ptr;
        let mut v = v;
        v.do_not_free_on_drop();
        let v = v.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_fold_scale_down_val(fold, v) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = QPolynomialFold { ptr: isl_rs_result,
                                              should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_get_ctx`.
    pub fn get_ctx(&self) -> Context {
        let qp = self;
        let qp = qp.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_get_ctx(qp) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = Context { ptr: isl_rs_result,
                                      should_free_on_drop: true };
        let mut isl_rs_result = isl_rs_result;
        isl_rs_result.do_not_free_on_drop();
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_drop_dims`.
    pub fn drop_dims(self, type_: DimType, first: u32, n: u32) -> QPolynomial {
        let context_for_error_message = self.get_ctx();
        let qp = self;
        let mut qp = qp;
        qp.do_not_free_on_drop();
        let qp = qp.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_drop_dims(qp, type_, first, n) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = QPolynomial { ptr: isl_rs_result,
                                          should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_fold_move_dims`.
    pub fn fold_move_dims(fold: QPolynomialFold, dst_type: DimType, dst_pos: u32,
                          src_type: DimType, src_pos: u32, n: u32)
                          -> QPolynomialFold {
        let mut fold = fold;
        fold.do_not_free_on_drop();
        let fold = fold.ptr;
        let isl_rs_result = unsafe {
            isl_qpolynomial_fold_move_dims(fold, dst_type, dst_pos, src_type, src_pos, n)
        };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = QPolynomialFold { ptr: isl_rs_result,
                                              should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_fold_dump`.
    pub fn fold_dump(fold: &QPolynomialFold) {
        let fold = fold.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_fold_dump(fold) };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_gist_params`.
    pub fn gist_params(self, context: Set) -> QPolynomial {
        let context_for_error_message = self.get_ctx();
        let qp = self;
        let mut qp = qp;
        qp.do_not_free_on_drop();
        let qp = qp.ptr;
        let mut context = context;
        context.do_not_free_on_drop();
        let context = context.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_gist_params(qp, context) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = QPolynomial { ptr: isl_rs_result,
                                          should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_fold_gist_params`.
    pub fn fold_gist_params(fold: QPolynomialFold, context: Set) -> QPolynomialFold {
        let mut fold = fold;
        fold.do_not_free_on_drop();
        let fold = fold.ptr;
        let mut context = context;
        context.do_not_free_on_drop();
        let context = context.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_fold_gist_params(fold, context) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = QPolynomialFold { ptr: isl_rs_result,
                                              should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_get_domain_space`.
    pub fn get_domain_space(&self) -> Space {
        let context_for_error_message = self.get_ctx();
        let qp = self;
        let qp = qp.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_get_domain_space(qp) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Space { ptr: isl_rs_result,
                                    should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_fold_get_domain_space`.
    pub fn fold_get_domain_space(fold: &QPolynomialFold) -> Space {
        let fold = fold.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_fold_get_domain_space(fold) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = Space { ptr: isl_rs_result,
                                    should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_homogenize`.
    pub fn homogenize(self) -> QPolynomial {
        let context_for_error_message = self.get_ctx();
        let poly = self;
        let mut poly = poly;
        poly.do_not_free_on_drop();
        let poly = poly.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_homogenize(poly) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = QPolynomial { ptr: isl_rs_result,
                                          should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_fold_is_nan`.
    pub fn fold_is_nan(fold: &QPolynomialFold) -> bool {
        let fold = fold.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_fold_is_nan(fold) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error"),
        };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_fold_fold`.
    pub fn fold_fold(fold1: QPolynomialFold, fold2: QPolynomialFold) -> QPolynomialFold {
        let mut fold1 = fold1;
        fold1.do_not_free_on_drop();
        let fold1 = fold1.ptr;
        let mut fold2 = fold2;
        fold2.do_not_free_on_drop();
        let fold2 = fold2.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_fold_fold(fold1, fold2) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = QPolynomialFold { ptr: isl_rs_result,
                                              should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_fold_scale_val`.
    pub fn fold_scale_val(fold: QPolynomialFold, v: Val) -> QPolynomialFold {
        let mut fold = fold;
        fold.do_not_free_on_drop();
        let fold = fold.ptr;
        let mut v = v;
        v.do_not_free_on_drop();
        let v = v.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_fold_scale_val(fold, v) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = QPolynomialFold { ptr: isl_rs_result,
                                              should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_scale_val`.
    pub fn scale_val(self, v: Val) -> QPolynomial {
        let context_for_error_message = self.get_ctx();
        let qp = self;
        let mut qp = qp;
        qp.do_not_free_on_drop();
        let qp = qp.ptr;
        let mut v = v;
        v.do_not_free_on_drop();
        let v = v.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_scale_val(qp, v) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = QPolynomial { ptr: isl_rs_result,
                                          should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_qpolynomial_fold_get_type`.
    pub fn fold_get_type(fold: &QPolynomialFold) -> Fold {
        let fold = fold.ptr;
        let isl_rs_result = unsafe { isl_qpolynomial_fold_get_type(fold) };
        isl_rs_result
    }

    /// Does not call isl_xxx_free() on being dropped. (For internal use only.)
    pub fn do_not_free_on_drop(&mut self) {
        self.should_free_on_drop = false;
    }
}

impl Drop for QPolynomial {
    fn drop(&mut self) {
        if self.should_free_on_drop {
            unsafe {
                isl_qpolynomial_free(self.ptr);
            }
        }
    }
}
