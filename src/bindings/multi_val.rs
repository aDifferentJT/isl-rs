// Automatically generated by isl_bindings_generator.
// LICENSE: MIT

use libc::uintptr_t;
use crate::bindings::{DimType, Id, Val, Space, Context, ValList};
use std::os::raw::c_char;
use std::ffi::{CString, CStr};

/// Wraps `isl_multi_val`.
pub struct MultiVal {
    pub ptr: uintptr_t,
    pub should_free_on_drop: bool,
}

extern "C" {

    fn isl_multi_val_add_dims(multi: uintptr_t, type_: DimType, n: u32) -> uintptr_t;

    fn isl_multi_val_get_tuple_id(multi: uintptr_t, type_: DimType) -> uintptr_t;

    fn isl_multi_val_drop_dims(multi: uintptr_t, type_: DimType, first: u32, n: u32) -> uintptr_t;

    fn isl_multi_val_set_dim_id(multi: uintptr_t, type_: DimType, pos: u32, id: uintptr_t) -> uintptr_t;

    fn isl_multi_val_size(multi: uintptr_t) -> i32;

    fn isl_multi_val_reset_tuple_id(multi: uintptr_t, type_: DimType) -> uintptr_t;

    fn isl_multi_val_scale_multi_val(multi: uintptr_t, mv: uintptr_t) -> uintptr_t;

    fn isl_multi_val_add(multi1: uintptr_t, multi2: uintptr_t) -> uintptr_t;

    fn isl_multi_val_scale_val(multi: uintptr_t, v: uintptr_t) -> uintptr_t;

    fn isl_multi_val_find_dim_by_name(multi: uintptr_t, type_: DimType, name: *const c_char) -> i32;

    fn isl_multi_val_find_dim_by_id(multi: uintptr_t, type_: DimType, id: uintptr_t) -> i32;

    fn isl_multi_val_range_factor_range(multi: uintptr_t) -> uintptr_t;

    fn isl_multi_val_involves_dims(multi: uintptr_t, type_: DimType, first: u32, n: u32) -> i32;

    fn isl_multi_val_mod_multi_val(multi: uintptr_t, mv: uintptr_t) -> uintptr_t;

    fn isl_multi_val_dim(multi: uintptr_t, type_: DimType) -> i32;

    fn isl_multi_val_dump(mv: uintptr_t);

    fn isl_multi_val_splice(multi1: uintptr_t, in_pos: u32, out_pos: u32, multi2: uintptr_t) -> uintptr_t;

    fn isl_multi_val_range_splice(multi1: uintptr_t, pos: u32, multi2: uintptr_t) -> uintptr_t;

    fn isl_multi_val_get_at(multi: uintptr_t, pos: i32) -> uintptr_t;

    fn isl_multi_val_min(multi1: uintptr_t, multi2: uintptr_t) -> uintptr_t;

    fn isl_multi_val_zero(space: uintptr_t) -> uintptr_t;

    fn isl_multi_val_copy(multi: uintptr_t) -> uintptr_t;

    fn isl_multi_val_scale_down_val(multi: uintptr_t, v: uintptr_t) -> uintptr_t;

    fn isl_multi_val_has_range_tuple_id(multi: uintptr_t) -> i32;

    fn isl_multi_val_involves_nan(multi: uintptr_t) -> i32;

    fn isl_multi_val_reset_range_tuple_id(multi: uintptr_t) -> uintptr_t;

    fn isl_multi_val_neg(multi: uintptr_t) -> uintptr_t;

    fn isl_multi_val_project_domain_on_params(multi: uintptr_t) -> uintptr_t;

    fn isl_multi_val_plain_is_equal(multi1: uintptr_t, multi2: uintptr_t) -> i32;

    fn isl_multi_val_is_zero(mv: uintptr_t) -> i32;

    fn isl_multi_val_get_val(multi: uintptr_t, pos: i32) -> uintptr_t;

    fn isl_multi_val_range_is_wrapping(multi: uintptr_t) -> i32;

    fn isl_multi_val_mod_val(mv: uintptr_t, v: uintptr_t) -> uintptr_t;

    fn isl_multi_val_range_product(multi1: uintptr_t, multi2: uintptr_t) -> uintptr_t;

    fn isl_multi_val_to_str(mv: uintptr_t) -> *const c_char;

    fn isl_multi_val_free(multi: uintptr_t) -> uintptr_t;

    fn isl_multi_val_reset_user(multi: uintptr_t) -> uintptr_t;

    fn isl_multi_val_from_range(multi: uintptr_t) -> uintptr_t;

    fn isl_multi_val_has_tuple_id(multi: uintptr_t, type_: DimType) -> i32;

    fn isl_multi_val_get_range_tuple_id(multi: uintptr_t) -> uintptr_t;

    fn isl_multi_val_set_range_tuple_id(multi: uintptr_t, id: uintptr_t) -> uintptr_t;

    fn isl_multi_val_get_space(multi: uintptr_t) -> uintptr_t;

    fn isl_multi_val_add_val(mv: uintptr_t, v: uintptr_t) -> uintptr_t;

    fn isl_multi_val_scale_down_multi_val(multi: uintptr_t, mv: uintptr_t) -> uintptr_t;

    fn isl_multi_val_set_at(multi: uintptr_t, pos: i32, el: uintptr_t) -> uintptr_t;

    fn isl_multi_val_sub(multi1: uintptr_t, multi2: uintptr_t) -> uintptr_t;

    fn isl_multi_val_set_dim_name(multi: uintptr_t, type_: DimType, pos: u32, s: *const c_char) -> uintptr_t;

    fn isl_multi_val_get_tuple_name(multi: uintptr_t, type_: DimType) -> *const c_char;

    fn isl_multi_val_get_ctx(multi: uintptr_t) -> uintptr_t;

    fn isl_multi_val_product(multi1: uintptr_t, multi2: uintptr_t) -> uintptr_t;

    fn isl_multi_val_range_factor_domain(multi: uintptr_t) -> uintptr_t;

    fn isl_multi_val_max(multi1: uintptr_t, multi2: uintptr_t) -> uintptr_t;

    fn isl_multi_val_flatten_range(multi: uintptr_t) -> uintptr_t;

    fn isl_multi_val_align_params(multi: uintptr_t, model: uintptr_t) -> uintptr_t;

    fn isl_multi_val_set_val(multi: uintptr_t, pos: i32, el: uintptr_t) -> uintptr_t;

    fn isl_multi_val_flat_range_product(multi1: uintptr_t, multi2: uintptr_t) -> uintptr_t;

    fn isl_multi_val_insert_dims(multi: uintptr_t, type_: DimType, first: u32, n: u32) -> uintptr_t;

    fn isl_multi_val_from_val_list(space: uintptr_t, list: uintptr_t) -> uintptr_t;

    fn isl_multi_val_read_from_str(ctx: uintptr_t, str_: *const c_char) -> uintptr_t;

    fn isl_multi_val_set_tuple_id(multi: uintptr_t, type_: DimType, id: uintptr_t) -> uintptr_t;

    fn isl_multi_val_get_list(multi: uintptr_t) -> uintptr_t;

    fn isl_multi_val_factor_range(multi: uintptr_t) -> uintptr_t;

    fn isl_multi_val_set_tuple_name(multi: uintptr_t, type_: DimType, s: *const c_char) -> uintptr_t;

    fn isl_multi_val_get_domain_space(multi: uintptr_t) -> uintptr_t;

    fn isl_multi_val_get_dim_id(multi: uintptr_t, type_: DimType, pos: u32) -> uintptr_t;

}

impl Clone for MultiVal {
    fn clone(&self) -> MultiVal {
        self.copy()
    }
}

impl core::ops::Add for MultiVal {
    type Output = MultiVal;

    fn add(self, rhs: MultiVal) -> MultiVal {
        self.add(rhs)
    }
}

impl core::ops::Sub for MultiVal {
    type Output = MultiVal;

    fn sub(self, rhs: MultiVal) -> MultiVal {
        self.sub(rhs)
    }
}

impl MultiVal {
    /// Wraps `isl_multi_val_add_dims`.
    pub fn add_dims(self, type_: DimType, n: u32) -> MultiVal {
        let context_for_error_message = self.get_ctx();
        let multi = self;
        let mut multi = multi;
        multi.do_not_free_on_drop();
        let multi = multi.ptr;
        let isl_rs_result = unsafe { isl_multi_val_add_dims(multi, type_, n) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = MultiVal { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_multi_val_get_tuple_id`.
    pub fn get_tuple_id(&self, type_: DimType) -> Id {
        let context_for_error_message = self.get_ctx();
        let multi = self;
        let multi = multi.ptr;
        let isl_rs_result = unsafe { isl_multi_val_get_tuple_id(multi, type_) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Id { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_multi_val_drop_dims`.
    pub fn drop_dims(self, type_: DimType, first: u32, n: u32) -> MultiVal {
        let context_for_error_message = self.get_ctx();
        let multi = self;
        let mut multi = multi;
        multi.do_not_free_on_drop();
        let multi = multi.ptr;
        let isl_rs_result = unsafe { isl_multi_val_drop_dims(multi, type_, first, n) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = MultiVal { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_multi_val_set_dim_id`.
    pub fn set_dim_id(self, type_: DimType, pos: u32, id: Id) -> MultiVal {
        let context_for_error_message = self.get_ctx();
        let multi = self;
        let mut multi = multi;
        multi.do_not_free_on_drop();
        let multi = multi.ptr;
        let mut id = id;
        id.do_not_free_on_drop();
        let id = id.ptr;
        let isl_rs_result = unsafe { isl_multi_val_set_dim_id(multi, type_, pos, id) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = MultiVal { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_multi_val_size`.
    pub fn size(&self) -> i32 {
        let multi = self;
        let multi = multi.ptr;
        let isl_rs_result = unsafe { isl_multi_val_size(multi) };
        isl_rs_result
    }

    /// Wraps `isl_multi_val_reset_tuple_id`.
    pub fn reset_tuple_id(self, type_: DimType) -> MultiVal {
        let context_for_error_message = self.get_ctx();
        let multi = self;
        let mut multi = multi;
        multi.do_not_free_on_drop();
        let multi = multi.ptr;
        let isl_rs_result = unsafe { isl_multi_val_reset_tuple_id(multi, type_) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = MultiVal { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_multi_val_scale_multi_val`.
    pub fn scale_multi_val(self, mv: MultiVal) -> MultiVal {
        let context_for_error_message = self.get_ctx();
        let multi = self;
        let mut multi = multi;
        multi.do_not_free_on_drop();
        let multi = multi.ptr;
        let mut mv = mv;
        mv.do_not_free_on_drop();
        let mv = mv.ptr;
        let isl_rs_result = unsafe { isl_multi_val_scale_multi_val(multi, mv) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = MultiVal { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_multi_val_add`.
    pub fn add(self, multi2: MultiVal) -> MultiVal {
        let context_for_error_message = self.get_ctx();
        let multi1 = self;
        let mut multi1 = multi1;
        multi1.do_not_free_on_drop();
        let multi1 = multi1.ptr;
        let mut multi2 = multi2;
        multi2.do_not_free_on_drop();
        let multi2 = multi2.ptr;
        let isl_rs_result = unsafe { isl_multi_val_add(multi1, multi2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = MultiVal { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_multi_val_scale_val`.
    pub fn scale_val(self, v: Val) -> MultiVal {
        let context_for_error_message = self.get_ctx();
        let multi = self;
        let mut multi = multi;
        multi.do_not_free_on_drop();
        let multi = multi.ptr;
        let mut v = v;
        v.do_not_free_on_drop();
        let v = v.ptr;
        let isl_rs_result = unsafe { isl_multi_val_scale_val(multi, v) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = MultiVal { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_multi_val_find_dim_by_name`.
    pub fn find_dim_by_name(&self, type_: DimType, name: &str) -> i32 {
        let multi = self;
        let multi = multi.ptr;
        let name = CString::new(name).unwrap();
        let name = name.as_ptr();
        let isl_rs_result = unsafe { isl_multi_val_find_dim_by_name(multi, type_, name) };
        isl_rs_result
    }

    /// Wraps `isl_multi_val_find_dim_by_id`.
    pub fn find_dim_by_id(&self, type_: DimType, id: &Id) -> i32 {
        let multi = self;
        let multi = multi.ptr;
        let id = id.ptr;
        let isl_rs_result = unsafe { isl_multi_val_find_dim_by_id(multi, type_, id) };
        isl_rs_result
    }

    /// Wraps `isl_multi_val_range_factor_range`.
    pub fn range_factor_range(self) -> MultiVal {
        let context_for_error_message = self.get_ctx();
        let multi = self;
        let mut multi = multi;
        multi.do_not_free_on_drop();
        let multi = multi.ptr;
        let isl_rs_result = unsafe { isl_multi_val_range_factor_range(multi) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = MultiVal { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_multi_val_involves_dims`.
    pub fn involves_dims(&self, type_: DimType, first: u32, n: u32) -> bool {
        let context_for_error_message = self.get_ctx();
        let multi = self;
        let multi = multi.ptr;
        let isl_rs_result = unsafe { isl_multi_val_involves_dims(multi, type_, first, n) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error: {}", context_for_error_message.last_error_msg()),
        };
        isl_rs_result
    }

    /// Wraps `isl_multi_val_mod_multi_val`.
    pub fn mod_multi_val(self, mv: MultiVal) -> MultiVal {
        let context_for_error_message = self.get_ctx();
        let multi = self;
        let mut multi = multi;
        multi.do_not_free_on_drop();
        let multi = multi.ptr;
        let mut mv = mv;
        mv.do_not_free_on_drop();
        let mv = mv.ptr;
        let isl_rs_result = unsafe { isl_multi_val_mod_multi_val(multi, mv) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = MultiVal { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_multi_val_dim`.
    pub fn dim(&self, type_: DimType) -> i32 {
        let multi = self;
        let multi = multi.ptr;
        let isl_rs_result = unsafe { isl_multi_val_dim(multi, type_) };
        isl_rs_result
    }

    /// Wraps `isl_multi_val_dump`.
    pub fn dump(&self) {
        let mv = self;
        let mv = mv.ptr;
        let isl_rs_result = unsafe { isl_multi_val_dump(mv) };
        isl_rs_result
    }

    /// Wraps `isl_multi_val_splice`.
    pub fn splice(self, in_pos: u32, out_pos: u32, multi2: MultiVal) -> MultiVal {
        let context_for_error_message = self.get_ctx();
        let multi1 = self;
        let mut multi1 = multi1;
        multi1.do_not_free_on_drop();
        let multi1 = multi1.ptr;
        let mut multi2 = multi2;
        multi2.do_not_free_on_drop();
        let multi2 = multi2.ptr;
        let isl_rs_result = unsafe { isl_multi_val_splice(multi1, in_pos, out_pos, multi2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = MultiVal { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_multi_val_range_splice`.
    pub fn range_splice(self, pos: u32, multi2: MultiVal) -> MultiVal {
        let context_for_error_message = self.get_ctx();
        let multi1 = self;
        let mut multi1 = multi1;
        multi1.do_not_free_on_drop();
        let multi1 = multi1.ptr;
        let mut multi2 = multi2;
        multi2.do_not_free_on_drop();
        let multi2 = multi2.ptr;
        let isl_rs_result = unsafe { isl_multi_val_range_splice(multi1, pos, multi2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = MultiVal { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_multi_val_get_at`.
    pub fn get_at(&self, pos: i32) -> Val {
        let context_for_error_message = self.get_ctx();
        let multi = self;
        let multi = multi.ptr;
        let isl_rs_result = unsafe { isl_multi_val_get_at(multi, pos) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Val { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_multi_val_min`.
    pub fn min(self, multi2: MultiVal) -> MultiVal {
        let context_for_error_message = self.get_ctx();
        let multi1 = self;
        let mut multi1 = multi1;
        multi1.do_not_free_on_drop();
        let multi1 = multi1.ptr;
        let mut multi2 = multi2;
        multi2.do_not_free_on_drop();
        let multi2 = multi2.ptr;
        let isl_rs_result = unsafe { isl_multi_val_min(multi1, multi2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = MultiVal { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_multi_val_zero`.
    pub fn zero(space: Space) -> MultiVal {
        let mut space = space;
        space.do_not_free_on_drop();
        let space = space.ptr;
        let isl_rs_result = unsafe { isl_multi_val_zero(space) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = MultiVal { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_multi_val_copy`.
    pub fn copy(&self) -> MultiVal {
        let context_for_error_message = self.get_ctx();
        let multi = self;
        let multi = multi.ptr;
        let isl_rs_result = unsafe { isl_multi_val_copy(multi) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = MultiVal { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_multi_val_scale_down_val`.
    pub fn scale_down_val(self, v: Val) -> MultiVal {
        let context_for_error_message = self.get_ctx();
        let multi = self;
        let mut multi = multi;
        multi.do_not_free_on_drop();
        let multi = multi.ptr;
        let mut v = v;
        v.do_not_free_on_drop();
        let v = v.ptr;
        let isl_rs_result = unsafe { isl_multi_val_scale_down_val(multi, v) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = MultiVal { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_multi_val_has_range_tuple_id`.
    pub fn has_range_tuple_id(&self) -> bool {
        let context_for_error_message = self.get_ctx();
        let multi = self;
        let multi = multi.ptr;
        let isl_rs_result = unsafe { isl_multi_val_has_range_tuple_id(multi) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error: {}", context_for_error_message.last_error_msg()),
        };
        isl_rs_result
    }

    /// Wraps `isl_multi_val_involves_nan`.
    pub fn involves_nan(&self) -> bool {
        let context_for_error_message = self.get_ctx();
        let multi = self;
        let multi = multi.ptr;
        let isl_rs_result = unsafe { isl_multi_val_involves_nan(multi) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error: {}", context_for_error_message.last_error_msg()),
        };
        isl_rs_result
    }

    /// Wraps `isl_multi_val_reset_range_tuple_id`.
    pub fn reset_range_tuple_id(self) -> MultiVal {
        let context_for_error_message = self.get_ctx();
        let multi = self;
        let mut multi = multi;
        multi.do_not_free_on_drop();
        let multi = multi.ptr;
        let isl_rs_result = unsafe { isl_multi_val_reset_range_tuple_id(multi) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = MultiVal { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_multi_val_neg`.
    pub fn neg(self) -> MultiVal {
        let context_for_error_message = self.get_ctx();
        let multi = self;
        let mut multi = multi;
        multi.do_not_free_on_drop();
        let multi = multi.ptr;
        let isl_rs_result = unsafe { isl_multi_val_neg(multi) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = MultiVal { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_multi_val_project_domain_on_params`.
    pub fn project_domain_on_params(self) -> MultiVal {
        let context_for_error_message = self.get_ctx();
        let multi = self;
        let mut multi = multi;
        multi.do_not_free_on_drop();
        let multi = multi.ptr;
        let isl_rs_result = unsafe { isl_multi_val_project_domain_on_params(multi) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = MultiVal { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_multi_val_plain_is_equal`.
    pub fn plain_is_equal(&self, multi2: &MultiVal) -> bool {
        let context_for_error_message = self.get_ctx();
        let multi1 = self;
        let multi1 = multi1.ptr;
        let multi2 = multi2.ptr;
        let isl_rs_result = unsafe { isl_multi_val_plain_is_equal(multi1, multi2) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error: {}", context_for_error_message.last_error_msg()),
        };
        isl_rs_result
    }

    /// Wraps `isl_multi_val_is_zero`.
    pub fn is_zero(&self) -> bool {
        let context_for_error_message = self.get_ctx();
        let mv = self;
        let mv = mv.ptr;
        let isl_rs_result = unsafe { isl_multi_val_is_zero(mv) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error: {}", context_for_error_message.last_error_msg()),
        };
        isl_rs_result
    }

    /// Wraps `isl_multi_val_get_val`.
    pub fn get_val(&self, pos: i32) -> Val {
        let context_for_error_message = self.get_ctx();
        let multi = self;
        let multi = multi.ptr;
        let isl_rs_result = unsafe { isl_multi_val_get_val(multi, pos) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Val { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_multi_val_range_is_wrapping`.
    pub fn range_is_wrapping(&self) -> bool {
        let context_for_error_message = self.get_ctx();
        let multi = self;
        let multi = multi.ptr;
        let isl_rs_result = unsafe { isl_multi_val_range_is_wrapping(multi) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error: {}", context_for_error_message.last_error_msg()),
        };
        isl_rs_result
    }

    /// Wraps `isl_multi_val_mod_val`.
    pub fn mod_val(self, v: Val) -> MultiVal {
        let context_for_error_message = self.get_ctx();
        let mv = self;
        let mut mv = mv;
        mv.do_not_free_on_drop();
        let mv = mv.ptr;
        let mut v = v;
        v.do_not_free_on_drop();
        let v = v.ptr;
        let isl_rs_result = unsafe { isl_multi_val_mod_val(mv, v) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = MultiVal { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_multi_val_range_product`.
    pub fn range_product(self, multi2: MultiVal) -> MultiVal {
        let context_for_error_message = self.get_ctx();
        let multi1 = self;
        let mut multi1 = multi1;
        multi1.do_not_free_on_drop();
        let multi1 = multi1.ptr;
        let mut multi2 = multi2;
        multi2.do_not_free_on_drop();
        let multi2 = multi2.ptr;
        let isl_rs_result = unsafe { isl_multi_val_range_product(multi1, multi2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = MultiVal { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_multi_val_to_str`.
    pub fn to_str(&self) -> &str {
        let mv = self;
        let mv = mv.ptr;
        let isl_rs_result = unsafe { isl_multi_val_to_str(mv) };
        let isl_rs_result = unsafe { CStr::from_ptr(isl_rs_result) };
        let isl_rs_result = isl_rs_result.to_str().unwrap();
        isl_rs_result
    }

    /// Wraps `isl_multi_val_free`.
    pub fn free(self) -> MultiVal {
        let context_for_error_message = self.get_ctx();
        let multi = self;
        let mut multi = multi;
        multi.do_not_free_on_drop();
        let multi = multi.ptr;
        let isl_rs_result = unsafe { isl_multi_val_free(multi) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = MultiVal { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_multi_val_reset_user`.
    pub fn reset_user(self) -> MultiVal {
        let context_for_error_message = self.get_ctx();
        let multi = self;
        let mut multi = multi;
        multi.do_not_free_on_drop();
        let multi = multi.ptr;
        let isl_rs_result = unsafe { isl_multi_val_reset_user(multi) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = MultiVal { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_multi_val_from_range`.
    pub fn from_range(self) -> MultiVal {
        let context_for_error_message = self.get_ctx();
        let multi = self;
        let mut multi = multi;
        multi.do_not_free_on_drop();
        let multi = multi.ptr;
        let isl_rs_result = unsafe { isl_multi_val_from_range(multi) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = MultiVal { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_multi_val_has_tuple_id`.
    pub fn has_tuple_id(&self, type_: DimType) -> bool {
        let context_for_error_message = self.get_ctx();
        let multi = self;
        let multi = multi.ptr;
        let isl_rs_result = unsafe { isl_multi_val_has_tuple_id(multi, type_) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error: {}", context_for_error_message.last_error_msg()),
        };
        isl_rs_result
    }

    /// Wraps `isl_multi_val_get_range_tuple_id`.
    pub fn get_range_tuple_id(&self) -> Id {
        let context_for_error_message = self.get_ctx();
        let multi = self;
        let multi = multi.ptr;
        let isl_rs_result = unsafe { isl_multi_val_get_range_tuple_id(multi) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Id { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_multi_val_set_range_tuple_id`.
    pub fn set_range_tuple_id(self, id: Id) -> MultiVal {
        let context_for_error_message = self.get_ctx();
        let multi = self;
        let mut multi = multi;
        multi.do_not_free_on_drop();
        let multi = multi.ptr;
        let mut id = id;
        id.do_not_free_on_drop();
        let id = id.ptr;
        let isl_rs_result = unsafe { isl_multi_val_set_range_tuple_id(multi, id) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = MultiVal { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_multi_val_get_space`.
    pub fn get_space(&self) -> Space {
        let context_for_error_message = self.get_ctx();
        let multi = self;
        let multi = multi.ptr;
        let isl_rs_result = unsafe { isl_multi_val_get_space(multi) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Space { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_multi_val_add_val`.
    pub fn add_val(self, v: Val) -> MultiVal {
        let context_for_error_message = self.get_ctx();
        let mv = self;
        let mut mv = mv;
        mv.do_not_free_on_drop();
        let mv = mv.ptr;
        let mut v = v;
        v.do_not_free_on_drop();
        let v = v.ptr;
        let isl_rs_result = unsafe { isl_multi_val_add_val(mv, v) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = MultiVal { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_multi_val_scale_down_multi_val`.
    pub fn scale_down_multi_val(self, mv: MultiVal) -> MultiVal {
        let context_for_error_message = self.get_ctx();
        let multi = self;
        let mut multi = multi;
        multi.do_not_free_on_drop();
        let multi = multi.ptr;
        let mut mv = mv;
        mv.do_not_free_on_drop();
        let mv = mv.ptr;
        let isl_rs_result = unsafe { isl_multi_val_scale_down_multi_val(multi, mv) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = MultiVal { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_multi_val_set_at`.
    pub fn set_at(self, pos: i32, el: Val) -> MultiVal {
        let context_for_error_message = self.get_ctx();
        let multi = self;
        let mut multi = multi;
        multi.do_not_free_on_drop();
        let multi = multi.ptr;
        let mut el = el;
        el.do_not_free_on_drop();
        let el = el.ptr;
        let isl_rs_result = unsafe { isl_multi_val_set_at(multi, pos, el) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = MultiVal { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_multi_val_sub`.
    pub fn sub(self, multi2: MultiVal) -> MultiVal {
        let context_for_error_message = self.get_ctx();
        let multi1 = self;
        let mut multi1 = multi1;
        multi1.do_not_free_on_drop();
        let multi1 = multi1.ptr;
        let mut multi2 = multi2;
        multi2.do_not_free_on_drop();
        let multi2 = multi2.ptr;
        let isl_rs_result = unsafe { isl_multi_val_sub(multi1, multi2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = MultiVal { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_multi_val_set_dim_name`.
    pub fn set_dim_name(self, type_: DimType, pos: u32, s: &str) -> MultiVal {
        let context_for_error_message = self.get_ctx();
        let multi = self;
        let mut multi = multi;
        multi.do_not_free_on_drop();
        let multi = multi.ptr;
        let s = CString::new(s).unwrap();
        let s = s.as_ptr();
        let isl_rs_result = unsafe { isl_multi_val_set_dim_name(multi, type_, pos, s) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = MultiVal { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_multi_val_get_tuple_name`.
    pub fn get_tuple_name(&self, type_: DimType) -> &str {
        let multi = self;
        let multi = multi.ptr;
        let isl_rs_result = unsafe { isl_multi_val_get_tuple_name(multi, type_) };
        let isl_rs_result = unsafe { CStr::from_ptr(isl_rs_result) };
        let isl_rs_result = isl_rs_result.to_str().unwrap();
        isl_rs_result
    }

    /// Wraps `isl_multi_val_get_ctx`.
    pub fn get_ctx(&self) -> Context {
        let multi = self;
        let multi = multi.ptr;
        let isl_rs_result = unsafe { isl_multi_val_get_ctx(multi) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = Context { ptr: isl_rs_result, should_free_on_drop: true };
        let mut isl_rs_result = isl_rs_result;
        isl_rs_result.do_not_free_on_drop();
        isl_rs_result
    }

    /// Wraps `isl_multi_val_product`.
    pub fn product(self, multi2: MultiVal) -> MultiVal {
        let context_for_error_message = self.get_ctx();
        let multi1 = self;
        let mut multi1 = multi1;
        multi1.do_not_free_on_drop();
        let multi1 = multi1.ptr;
        let mut multi2 = multi2;
        multi2.do_not_free_on_drop();
        let multi2 = multi2.ptr;
        let isl_rs_result = unsafe { isl_multi_val_product(multi1, multi2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = MultiVal { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_multi_val_range_factor_domain`.
    pub fn range_factor_domain(self) -> MultiVal {
        let context_for_error_message = self.get_ctx();
        let multi = self;
        let mut multi = multi;
        multi.do_not_free_on_drop();
        let multi = multi.ptr;
        let isl_rs_result = unsafe { isl_multi_val_range_factor_domain(multi) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = MultiVal { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_multi_val_max`.
    pub fn max(self, multi2: MultiVal) -> MultiVal {
        let context_for_error_message = self.get_ctx();
        let multi1 = self;
        let mut multi1 = multi1;
        multi1.do_not_free_on_drop();
        let multi1 = multi1.ptr;
        let mut multi2 = multi2;
        multi2.do_not_free_on_drop();
        let multi2 = multi2.ptr;
        let isl_rs_result = unsafe { isl_multi_val_max(multi1, multi2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = MultiVal { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_multi_val_flatten_range`.
    pub fn flatten_range(self) -> MultiVal {
        let context_for_error_message = self.get_ctx();
        let multi = self;
        let mut multi = multi;
        multi.do_not_free_on_drop();
        let multi = multi.ptr;
        let isl_rs_result = unsafe { isl_multi_val_flatten_range(multi) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = MultiVal { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_multi_val_align_params`.
    pub fn align_params(self, model: Space) -> MultiVal {
        let context_for_error_message = self.get_ctx();
        let multi = self;
        let mut multi = multi;
        multi.do_not_free_on_drop();
        let multi = multi.ptr;
        let mut model = model;
        model.do_not_free_on_drop();
        let model = model.ptr;
        let isl_rs_result = unsafe { isl_multi_val_align_params(multi, model) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = MultiVal { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_multi_val_set_val`.
    pub fn set_val(self, pos: i32, el: Val) -> MultiVal {
        let context_for_error_message = self.get_ctx();
        let multi = self;
        let mut multi = multi;
        multi.do_not_free_on_drop();
        let multi = multi.ptr;
        let mut el = el;
        el.do_not_free_on_drop();
        let el = el.ptr;
        let isl_rs_result = unsafe { isl_multi_val_set_val(multi, pos, el) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = MultiVal { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_multi_val_flat_range_product`.
    pub fn flat_range_product(self, multi2: MultiVal) -> MultiVal {
        let context_for_error_message = self.get_ctx();
        let multi1 = self;
        let mut multi1 = multi1;
        multi1.do_not_free_on_drop();
        let multi1 = multi1.ptr;
        let mut multi2 = multi2;
        multi2.do_not_free_on_drop();
        let multi2 = multi2.ptr;
        let isl_rs_result = unsafe { isl_multi_val_flat_range_product(multi1, multi2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = MultiVal { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_multi_val_insert_dims`.
    pub fn insert_dims(self, type_: DimType, first: u32, n: u32) -> MultiVal {
        let context_for_error_message = self.get_ctx();
        let multi = self;
        let mut multi = multi;
        multi.do_not_free_on_drop();
        let multi = multi.ptr;
        let isl_rs_result = unsafe { isl_multi_val_insert_dims(multi, type_, first, n) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = MultiVal { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_multi_val_from_val_list`.
    pub fn from_val_list(space: Space, list: ValList) -> MultiVal {
        let mut space = space;
        space.do_not_free_on_drop();
        let space = space.ptr;
        let mut list = list;
        list.do_not_free_on_drop();
        let list = list.ptr;
        let isl_rs_result = unsafe { isl_multi_val_from_val_list(space, list) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = MultiVal { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_multi_val_read_from_str`.
    pub fn read_from_str(ctx: &Context, str_: &str) -> MultiVal {
        let ctx = ctx.ptr;
        let str_ = CString::new(str_).unwrap();
        let str_ = str_.as_ptr();
        let isl_rs_result = unsafe { isl_multi_val_read_from_str(ctx, str_) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = MultiVal { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_multi_val_set_tuple_id`.
    pub fn set_tuple_id(self, type_: DimType, id: Id) -> MultiVal {
        let context_for_error_message = self.get_ctx();
        let multi = self;
        let mut multi = multi;
        multi.do_not_free_on_drop();
        let multi = multi.ptr;
        let mut id = id;
        id.do_not_free_on_drop();
        let id = id.ptr;
        let isl_rs_result = unsafe { isl_multi_val_set_tuple_id(multi, type_, id) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = MultiVal { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_multi_val_get_list`.
    pub fn get_list(&self) -> ValList {
        let context_for_error_message = self.get_ctx();
        let multi = self;
        let multi = multi.ptr;
        let isl_rs_result = unsafe { isl_multi_val_get_list(multi) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = ValList { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_multi_val_factor_range`.
    pub fn factor_range(self) -> MultiVal {
        let context_for_error_message = self.get_ctx();
        let multi = self;
        let mut multi = multi;
        multi.do_not_free_on_drop();
        let multi = multi.ptr;
        let isl_rs_result = unsafe { isl_multi_val_factor_range(multi) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = MultiVal { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_multi_val_set_tuple_name`.
    pub fn set_tuple_name(self, type_: DimType, s: &str) -> MultiVal {
        let context_for_error_message = self.get_ctx();
        let multi = self;
        let mut multi = multi;
        multi.do_not_free_on_drop();
        let multi = multi.ptr;
        let s = CString::new(s).unwrap();
        let s = s.as_ptr();
        let isl_rs_result = unsafe { isl_multi_val_set_tuple_name(multi, type_, s) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = MultiVal { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_multi_val_get_domain_space`.
    pub fn get_domain_space(&self) -> Space {
        let context_for_error_message = self.get_ctx();
        let multi = self;
        let multi = multi.ptr;
        let isl_rs_result = unsafe { isl_multi_val_get_domain_space(multi) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Space { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_multi_val_get_dim_id`.
    pub fn get_dim_id(&self, type_: DimType, pos: u32) -> Id {
        let context_for_error_message = self.get_ctx();
        let multi = self;
        let multi = multi.ptr;
        let isl_rs_result = unsafe { isl_multi_val_get_dim_id(multi, type_, pos) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Id { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Does not call isl_xxx_free() on being dropped. (For internal use only.)
    pub fn do_not_free_on_drop(&mut self) {
        self.should_free_on_drop = false;
    }
}

impl Drop for MultiVal {
    fn drop(&mut self) {
        if self.should_free_on_drop {
            unsafe { isl_multi_val_free(self.ptr); }
        }
    }
}