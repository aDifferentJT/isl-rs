// Automatically generated by isl_bindings_generator.
// LICENSE: MIT

use libc::uintptr_t;

/// Wraps `isl_qpolynomial_fold_list`.
pub struct QPolynomialFoldList {
    pub ptr: uintptr_t,
    pub should_free_on_drop: bool,
}

extern "C" {

}

impl FromIterator<QPolynomialFold> for QPolynomialFoldList {
    fn from_iter<T>(iter: T) -> Self
    where T: IntoIterator<Item = QPolynomialFold>,
    {
        let mut iter = iter.into_iter().peekable();
        let ctx = iter.peek().unwrap().get_ctx();
        let (size, _) = iter.size_hint();
        let mut res = Self::alloc(&ctx, size as _);
        for x in iter {
        res = res.add(x);
        }
        res
    }
}

impl QPolynomialFoldList {
    /// Does not call isl_xxx_free() on being dropped. (For internal use only.)
    pub fn do_not_free_on_drop(&mut self) {
        self.should_free_on_drop = false;
    }
}

impl Drop for QPolynomialFoldList {
    fn drop(&mut self) {
        if self.should_free_on_drop {
            unsafe { isl_qpolynomial_fold_list_free(self.ptr); }
        }
    }
}