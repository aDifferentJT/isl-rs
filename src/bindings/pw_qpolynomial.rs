// Automatically generated by isl_bindings_generator.
// LICENSE: MIT

use crate::bindings::{
    Context, DimType, Fold, Id, Point, PwAff, PwQPolynomialFold, PwQPolynomialFoldList,
    PwQPolynomialList, QPolynomial, QPolynomialFold, Set, Space, Stat, UnionPwQPolynomial,
    UnionPwQPolynomialFold, Val,
};
use libc::uintptr_t;
use std::ffi::{CStr, CString};
use std::os::raw::{c_char, c_void};

/// Wraps `isl_pw_qpolynomial`.
pub struct PwQPolynomial {
    pub ptr: uintptr_t,
    pub should_free_on_drop: bool,
}

extern "C" {

    fn isl_pw_qpolynomial_fold_list_from_pw_qpolynomial_fold(el: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_drop_dims(pwqp: uintptr_t, type_: DimType, first: u32, n: u32)
                                    -> uintptr_t;

    fn isl_pw_qpolynomial_fold_has_equal_space(pwf1: uintptr_t, pwf2: uintptr_t) -> i32;

    fn isl_pw_qpolynomial_fold_dim(pwf: uintptr_t, type_: DimType) -> i32;

    fn isl_pw_qpolynomial_fold_involves_param_id(pwf: uintptr_t, id: uintptr_t) -> i32;

    fn isl_pw_qpolynomial_copy(pwqp: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_get_space(pwqp: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_alloc(set: uintptr_t, qp: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_to_union_pw_qpolynomial(pwqp: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_domain(pwqp: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_from_pw_aff(pwaff: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_involves_nan(pwf: uintptr_t) -> i32;

    fn isl_pw_qpolynomial_fold_find_dim_by_name(pwf: uintptr_t, type_: DimType,
                                                name: *const c_char)
                                                -> i32;

    fn isl_pw_qpolynomial_n_piece(pwqp: uintptr_t) -> i32;

    fn isl_pw_qpolynomial_fold_max(pwf: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_list_add(list: uintptr_t, el: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_involves_nan(pwqp: uintptr_t) -> i32;

    fn isl_pw_qpolynomial_involves_param_id(pwqp: uintptr_t, id: uintptr_t) -> i32;

    fn isl_pw_qpolynomial_fold_set_dim_name(pwf: uintptr_t, type_: DimType, pos: u32,
                                            s: *const c_char)
                                            -> uintptr_t;

    fn isl_pw_qpolynomial_fold_get_ctx(pwf: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_split_dims(pwqp: uintptr_t, type_: DimType, first: u32, n: u32)
                                     -> uintptr_t;

    fn isl_pw_qpolynomial_fold_fix_val(pwf: uintptr_t, type_: DimType, n: u32, v: uintptr_t)
                                       -> uintptr_t;

    fn isl_pw_qpolynomial_fold_list_foreach_scc(list: uintptr_t,
                                                follows: unsafe extern "C" fn(uintptr_t,
                                                                     uintptr_t,
                                                                     *mut c_void)
                                                                     -> i32,
                                                follows_user: *mut c_void,
                                                fn_: unsafe extern "C" fn(uintptr_t,
                                                                     *mut c_void)
                                                                     -> Stat,
                                                fn_user: *mut c_void)
                                                -> Stat;

    fn isl_pw_qpolynomial_move_dims(pwqp: uintptr_t, dst_type: DimType, dst_pos: u32,
                                    src_type: DimType, src_pos: u32, n: u32)
                                    -> uintptr_t;

    fn isl_pw_qpolynomial_from_qpolynomial(qp: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_eval(pwf: uintptr_t, pnt: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_intersect_params(pwf: uintptr_t, set: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_list_get_at(list: uintptr_t, index: i32) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_isa_qpolynomial_fold(pwf: uintptr_t) -> i32;

    fn isl_pw_qpolynomial_fold_min(pwf: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_list_size(list: uintptr_t) -> i32;

    fn isl_pw_qpolynomial_get_domain_space(pwqp: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_gist_params(pwqp: uintptr_t, context: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_n_piece(pwf: uintptr_t) -> i32;

    fn isl_pw_qpolynomial_to_list(el: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_free(pwqp: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_isa_qpolynomial(pwqp: uintptr_t) -> i32;

    fn isl_pw_qpolynomial_fold_zero(space: uintptr_t, type_: Fold) -> uintptr_t;

    fn isl_pw_qpolynomial_intersect_domain(pwpq: uintptr_t, set: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_add_disjoint(pwqp1: uintptr_t, pwqp2: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_list_alloc(ctx: uintptr_t, n: i32) -> uintptr_t;

    fn isl_pw_qpolynomial_intersect_params(pwpq: uintptr_t, set: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_insert_dims(pwqp: uintptr_t, type_: DimType, first: u32, n: u32)
                                      -> uintptr_t;

    fn isl_pw_qpolynomial_read_from_str(ctx: uintptr_t, str_: *const c_char) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_list_to_str(list: uintptr_t) -> *const c_char;

    fn isl_pw_qpolynomial_fold_alloc(type_: Fold, set: uintptr_t, fold: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_domain(pwf: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_list_concat(list1: uintptr_t, list2: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_list_n_pw_qpolynomial_fold(list: uintptr_t) -> i32;

    fn isl_pw_qpolynomial_add(pwqp1: uintptr_t, pwqp2: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_zero(space: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_as_qpolynomial_fold(pwf: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_foreach_piece(pwf: uintptr_t,
                                             fn_: unsafe extern "C" fn(uintptr_t,
                                                                  uintptr_t,
                                                                  *mut c_void)
                                                                  -> Stat,
                                             user: *mut c_void)
                                             -> Stat;

    fn isl_pw_qpolynomial_find_dim_by_name(pwqp: uintptr_t, type_: DimType, name: *const c_char)
                                           -> i32;

    fn isl_pw_qpolynomial_min(pwqp: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_list_get_pw_qpolynomial_fold(list: uintptr_t, index: i32)
                                                            -> uintptr_t;

    fn isl_pw_qpolynomial_dim(pwqp: uintptr_t, type_: DimType) -> i32;

    fn isl_pw_qpolynomial_fold_is_zero(pwf: uintptr_t) -> i32;

    fn isl_pw_qpolynomial_fold_scale_down_val(pwf: uintptr_t, v: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_gist_params(pwf: uintptr_t, context: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_list_drop(list: uintptr_t, first: u32, n: u32) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_list_clear(list: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_list_sort(list: uintptr_t,
                                         cmp: unsafe extern "C" fn(uintptr_t,
                                                              uintptr_t,
                                                              *mut c_void)
                                                              -> i32,
                                         user: *mut c_void)
                                         -> uintptr_t;

    fn isl_pw_qpolynomial_foreach_piece(pwqp: uintptr_t,
                                        fn_: unsafe extern "C" fn(uintptr_t,
                                                             uintptr_t,
                                                             *mut c_void)
                                                             -> Stat,
                                        user: *mut c_void)
                                        -> Stat;

    fn isl_pw_qpolynomial_neg(pwqp: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_from_pw_qpolynomial(type_: Fold, pwqp: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_fold(pwf1: uintptr_t, pwf2: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_drop_unused_params(pwqp: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_as_qpolynomial(pwqp: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_free(pwf: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_list_reverse(list: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_get_space(pwf: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_get_domain_space(pwf: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_intersect_domain_wrapped_domain(pwf: uintptr_t, set: uintptr_t)
                                                               -> uintptr_t;

    fn isl_pw_qpolynomial_involves_dims(pwqp: uintptr_t, type_: DimType, first: u32, n: u32)
                                        -> i32;

    fn isl_pw_qpolynomial_fold_subtract_domain(pwf: uintptr_t, set: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_sub(pwqp1: uintptr_t, pwqp2: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_every_piece(pwf: uintptr_t,
                                           test: unsafe extern "C" fn(uintptr_t,
                                                                uintptr_t,
                                                                *mut c_void)
                                                                -> i32,
                                           user: *mut c_void)
                                           -> i32;

    fn isl_pw_qpolynomial_has_equal_space(pwqp1: uintptr_t, pwqp2: uintptr_t) -> i32;

    fn isl_pw_qpolynomial_fold_project_domain_on_params(pwf: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_reset_domain_space(pwqp: uintptr_t, space: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_drop_unused_params(pwf: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_list_get_ctx(list: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_list_swap(list: uintptr_t, pos1: u32, pos2: u32) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_list_foreach(list: uintptr_t,
                                            fn_: unsafe extern "C" fn(uintptr_t,
                                                                 *mut c_void)
                                                                 -> Stat,
                                            user: *mut c_void)
                                            -> Stat;

    fn isl_pw_qpolynomial_eval(pwqp: uintptr_t, pnt: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_move_dims(pwf: uintptr_t, dst_type: DimType, dst_pos: u32,
                                         src_type: DimType, src_pos: u32, n: u32)
                                         -> uintptr_t;

    fn isl_pw_qpolynomial_fold_foreach_lifted_piece(pwf: uintptr_t,
                                                    fn_: unsafe extern "C" fn(uintptr_t,
                                                                         uintptr_t,
                                                                         *mut c_void)
                                                                         -> Stat,
                                                    user: *mut c_void)
                                                    -> Stat;

    fn isl_pw_qpolynomial_fold_to_union_pw_qpolynomial_fold(pwf: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_size(pwf: uintptr_t) -> u64;

    fn isl_pw_qpolynomial_fold_list_dump(list: uintptr_t);

    fn isl_pw_qpolynomial_fold_intersect_domain_wrapped_range(pwf: uintptr_t, set: uintptr_t)
                                                              -> uintptr_t;

    fn isl_pw_qpolynomial_fold_reset_user(pwf: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_drop_dims(pwf: uintptr_t, type_: DimType, first: u32, n: u32)
                                         -> uintptr_t;

    fn isl_pw_qpolynomial_fold_add_disjoint(pwf1: uintptr_t, pwf2: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_to_polynomial(pwqp: uintptr_t, sign: i32) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_list_copy(list: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_plain_is_equal(pwqp1: uintptr_t, pwqp2: uintptr_t) -> i32;

    fn isl_pw_qpolynomial_gist(pwqp: uintptr_t, context: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_get_type(pwf: uintptr_t) -> Fold;

    fn isl_pw_qpolynomial_mul(pwqp1: uintptr_t, pwqp2: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_every_piece(pwqp: uintptr_t,
                                      test: unsafe extern "C" fn(uintptr_t,
                                                           uintptr_t,
                                                           *mut c_void)
                                                           -> i32,
                                      user: *mut c_void)
                                      -> i32;

    fn isl_pw_qpolynomial_scale_val(pwqp: uintptr_t, v: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_coalesce(pwqp: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_read_from_str(ctx: uintptr_t, str_: *const c_char) -> uintptr_t;

    fn isl_pw_qpolynomial_intersect_domain_wrapped_range(pwpq: uintptr_t, set: uintptr_t)
                                                         -> uintptr_t;

    fn isl_pw_qpolynomial_split_periods(pwqp: uintptr_t, max_periods: i32) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_from_qpolynomial_fold(fold: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_from_range(pwf: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fix_val(pwqp: uintptr_t, type_: DimType, n: u32, v: uintptr_t)
                                  -> uintptr_t;

    fn isl_pw_qpolynomial_fold_list_set_pw_qpolynomial_fold(list: uintptr_t, index: i32,
                                                            el: uintptr_t)
                                                            -> uintptr_t;

    fn isl_pw_qpolynomial_fold_coalesce(pwf: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_reset_user(pwqp: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_to_str(pwqp: uintptr_t) -> *const c_char;

    fn isl_pw_qpolynomial_fold_plain_is_equal(pwf1: uintptr_t, pwf2: uintptr_t) -> i32;

    fn isl_pw_qpolynomial_fold_to_list(el: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_list_every(list: uintptr_t,
                                          test: unsafe extern "C" fn(uintptr_t,
                                                               *mut c_void)
                                                               -> i32,
                                          user: *mut c_void)
                                          -> i32;

    fn isl_pw_qpolynomial_fold_list_map(list: uintptr_t,
                                        fn_: unsafe extern "C" fn(uintptr_t,
                                                             *mut c_void)
                                                             -> uintptr_t,
                                        user: *mut c_void)
                                        -> uintptr_t;

    fn isl_pw_qpolynomial_project_domain_on_params(pwqp: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_is_zero(pwqp: uintptr_t) -> i32;

    fn isl_pw_qpolynomial_fold_scale_val(pwf: uintptr_t, v: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_gist(pwf: uintptr_t, context: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_foreach_lifted_piece(pwqp: uintptr_t,
                                               fn_: unsafe extern "C" fn(uintptr_t,
                                                                    uintptr_t,
                                                                    *mut c_void)
                                                                    -> Stat,
                                               user: *mut c_void)
                                               -> Stat;

    fn isl_pw_qpolynomial_fold_intersect_domain(pwf: uintptr_t, set: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_list_free(list: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_set_dim_name(pwqp: uintptr_t, type_: DimType, pos: u32, s: *const c_char)
                                       -> uintptr_t;

    fn isl_pw_qpolynomial_scale_down_val(pwqp: uintptr_t, v: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_dump(pwqp: uintptr_t);

    fn isl_pw_qpolynomial_fold_reset_space(pwf: uintptr_t, space: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_list_insert(list: uintptr_t, pos: u32, el: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_subtract_domain(pwpq: uintptr_t, set: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_pow(pwqp: uintptr_t, exponent: u32) -> uintptr_t;

    fn isl_pw_qpolynomial_from_range(pwqp: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_get_ctx(pwqp: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_intersect_domain_wrapped_domain(pwpq: uintptr_t, set: uintptr_t)
                                                          -> uintptr_t;

    fn isl_pw_qpolynomial_fold_dump(pwf: uintptr_t);

    fn isl_pw_qpolynomial_max(pwqp: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_copy(pwf: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_add_dims(pwqp: uintptr_t, type_: DimType, n: u32) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_add(pwf1: uintptr_t, pwf2: uintptr_t) -> uintptr_t;

}

impl Clone for PwQPolynomial {
    fn clone(&self) -> PwQPolynomial {
        self.copy()
    }
}

impl core::ops::Add for PwQPolynomial {
    type Output = PwQPolynomial;

    fn add(self, rhs: PwQPolynomial) -> PwQPolynomial {
        self.add(rhs)
    }
}

impl core::ops::Sub for PwQPolynomial {
    type Output = PwQPolynomial;

    fn sub(self, rhs: PwQPolynomial) -> PwQPolynomial {
        self.sub(rhs)
    }
}

impl core::ops::Mul for PwQPolynomial {
    type Output = PwQPolynomial;

    fn mul(self, rhs: PwQPolynomial) -> PwQPolynomial {
        self.mul(rhs)
    }
}

impl PwQPolynomial {
    /// Wraps `isl_pw_qpolynomial_fold_list_from_pw_qpolynomial_fold`.
    pub fn fold_list_from_pw_qpolynomial_fold(el: PwQPolynomialFold) -> PwQPolynomialFoldList {
        let mut el = el;
        el.do_not_free_on_drop();
        let el = el.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_list_from_pw_qpolynomial_fold(el) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = PwQPolynomialFoldList { ptr: isl_rs_result,
                                                    should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_drop_dims`.
    pub fn drop_dims(self, type_: DimType, first: u32, n: u32) -> PwQPolynomial {
        let context_for_error_message = self.get_ctx();
        let pwqp = self;
        let mut pwqp = pwqp;
        pwqp.do_not_free_on_drop();
        let pwqp = pwqp.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_drop_dims(pwqp, type_, first, n) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwQPolynomial { ptr: isl_rs_result,
                                            should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_has_equal_space`.
    pub fn fold_has_equal_space(pwf1: &PwQPolynomialFold, pwf2: &PwQPolynomialFold) -> bool {
        let pwf1 = pwf1.ptr;
        let pwf2 = pwf2.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_has_equal_space(pwf1, pwf2) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error"),
        };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_dim`.
    pub fn fold_dim(pwf: &PwQPolynomialFold, type_: DimType) -> i32 {
        let pwf = pwf.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_dim(pwf, type_) };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_involves_param_id`.
    pub fn fold_involves_param_id(pwf: &PwQPolynomialFold, id: &Id) -> bool {
        let pwf = pwf.ptr;
        let id = id.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_involves_param_id(pwf, id) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error"),
        };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_copy`.
    pub fn copy(&self) -> PwQPolynomial {
        let context_for_error_message = self.get_ctx();
        let pwqp = self;
        let pwqp = pwqp.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_copy(pwqp) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwQPolynomial { ptr: isl_rs_result,
                                            should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_get_space`.
    pub fn get_space(&self) -> Space {
        let context_for_error_message = self.get_ctx();
        let pwqp = self;
        let pwqp = pwqp.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_get_space(pwqp) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Space { ptr: isl_rs_result,
                                    should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_alloc`.
    pub fn alloc(set: Set, qp: QPolynomial) -> PwQPolynomial {
        let mut set = set;
        set.do_not_free_on_drop();
        let set = set.ptr;
        let mut qp = qp;
        qp.do_not_free_on_drop();
        let qp = qp.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_alloc(set, qp) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = PwQPolynomial { ptr: isl_rs_result,
                                            should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_to_union_pw_qpolynomial`.
    pub fn to_union_pw_qpolynomial(self) -> UnionPwQPolynomial {
        let context_for_error_message = self.get_ctx();
        let pwqp = self;
        let mut pwqp = pwqp;
        pwqp.do_not_free_on_drop();
        let pwqp = pwqp.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_to_union_pw_qpolynomial(pwqp) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionPwQPolynomial { ptr: isl_rs_result,
                                                 should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_domain`.
    pub fn domain(self) -> Set {
        let context_for_error_message = self.get_ctx();
        let pwqp = self;
        let mut pwqp = pwqp;
        pwqp.do_not_free_on_drop();
        let pwqp = pwqp.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_domain(pwqp) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Set { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_from_pw_aff`.
    pub fn from_pw_aff(pwaff: PwAff) -> PwQPolynomial {
        let mut pwaff = pwaff;
        pwaff.do_not_free_on_drop();
        let pwaff = pwaff.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_from_pw_aff(pwaff) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = PwQPolynomial { ptr: isl_rs_result,
                                            should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_involves_nan`.
    pub fn fold_involves_nan(pwf: &PwQPolynomialFold) -> bool {
        let pwf = pwf.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_involves_nan(pwf) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error"),
        };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_find_dim_by_name`.
    pub fn fold_find_dim_by_name(pwf: &PwQPolynomialFold, type_: DimType, name: &str) -> i32 {
        let pwf = pwf.ptr;
        let name = CString::new(name).unwrap();
        let name = name.as_ptr();
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_find_dim_by_name(pwf, type_, name) };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_n_piece`.
    pub fn n_piece(&self) -> i32 {
        let pwqp = self;
        let pwqp = pwqp.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_n_piece(pwqp) };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_max`.
    pub fn fold_max(pwf: PwQPolynomialFold) -> Val {
        let mut pwf = pwf;
        pwf.do_not_free_on_drop();
        let pwf = pwf.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_max(pwf) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = Val { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_list_add`.
    pub fn fold_list_add(list: PwQPolynomialFoldList, el: PwQPolynomialFold)
                         -> PwQPolynomialFoldList {
        let mut list = list;
        list.do_not_free_on_drop();
        let list = list.ptr;
        let mut el = el;
        el.do_not_free_on_drop();
        let el = el.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_list_add(list, el) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = PwQPolynomialFoldList { ptr: isl_rs_result,
                                                    should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_involves_nan`.
    pub fn involves_nan(&self) -> bool {
        let context_for_error_message = self.get_ctx();
        let pwqp = self;
        let pwqp = pwqp.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_involves_nan(pwqp) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error: {}", context_for_error_message.last_error_msg()),
        };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_involves_param_id`.
    pub fn involves_param_id(&self, id: &Id) -> bool {
        let context_for_error_message = self.get_ctx();
        let pwqp = self;
        let pwqp = pwqp.ptr;
        let id = id.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_involves_param_id(pwqp, id) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error: {}", context_for_error_message.last_error_msg()),
        };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_set_dim_name`.
    pub fn fold_set_dim_name(pwf: PwQPolynomialFold, type_: DimType, pos: u32, s: &str)
                             -> PwQPolynomialFold {
        let mut pwf = pwf;
        pwf.do_not_free_on_drop();
        let pwf = pwf.ptr;
        let s = CString::new(s).unwrap();
        let s = s.as_ptr();
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_set_dim_name(pwf, type_, pos, s) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = PwQPolynomialFold { ptr: isl_rs_result,
                                                should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_get_ctx`.
    pub fn fold_get_ctx(pwf: &PwQPolynomialFold) -> Context {
        let pwf = pwf.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_get_ctx(pwf) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = Context { ptr: isl_rs_result,
                                      should_free_on_drop: true };
        let mut isl_rs_result = isl_rs_result;
        isl_rs_result.do_not_free_on_drop();
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_split_dims`.
    pub fn split_dims(self, type_: DimType, first: u32, n: u32) -> PwQPolynomial {
        let context_for_error_message = self.get_ctx();
        let pwqp = self;
        let mut pwqp = pwqp;
        pwqp.do_not_free_on_drop();
        let pwqp = pwqp.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_split_dims(pwqp, type_, first, n) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwQPolynomial { ptr: isl_rs_result,
                                            should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_fix_val`.
    pub fn fold_fix_val(pwf: PwQPolynomialFold, type_: DimType, n: u32, v: Val)
                        -> PwQPolynomialFold {
        let mut pwf = pwf;
        pwf.do_not_free_on_drop();
        let pwf = pwf.ptr;
        let mut v = v;
        v.do_not_free_on_drop();
        let v = v.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_fix_val(pwf, type_, n, v) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = PwQPolynomialFold { ptr: isl_rs_result,
                                                should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_list_foreach_scc`.
    pub fn fold_list_foreach_scc<follows, fn_>(list: &PwQPolynomialFoldList, follows: follows,
                                               follows_user: *mut c_void, fn_: fn_,
                                               fn_user: *mut c_void)
                                               -> Stat
        where follows: FnMut(&PwQPolynomialFold, &PwQPolynomialFold) -> bool,
              fn_: FnMut(&PwQPolynomialFoldList) -> Stat
    {
        let list = list.ptr;
        extern "C" fn follows_wrapper<follows>(arg_0: uintptr_t, arg_1: uintptr_t,
                                               arg_2: *mut c_void)
                                               -> i32
            where follows: FnMut(&PwQPolynomialFold, &PwQPolynomialFold) -> bool
        {
            if arg_0 == 0 {
                panic!("ISL error");
            }
            let arg_0 = &PwQPolynomialFold { ptr: arg_0,
                                             should_free_on_drop: true };
            if arg_1 == 0 {
                panic!("ISL error");
            }
            let arg_1 = &PwQPolynomialFold { ptr: arg_1,
                                             should_free_on_drop: true };
            let follows: *mut follows = unsafe { core::mem::transmute(arg_2) };
            let follows: &mut follows = unsafe { &mut *follows };
            let res = follows(arg_0, arg_1);
            let res = if res { 1 } else { 0 };
            res
        }

        let mut follows = follows;
        let follows_user: *mut follows = &mut follows;
        let follows_user: *mut c_void = unsafe { core::mem::transmute(follows_user) };
        let follows = follows_wrapper::<follows>;
        extern "C" fn fn__wrapper<fn_>(arg_0: uintptr_t, arg_1: *mut c_void) -> Stat
            where fn_: FnMut(&PwQPolynomialFoldList) -> Stat
        {
            if arg_0 == 0 {
                panic!("ISL error");
            }
            let arg_0 = &PwQPolynomialFoldList { ptr: arg_0,
                                                 should_free_on_drop: true };
            let fn_: *mut fn_ = unsafe { core::mem::transmute(arg_1) };
            let fn_: &mut fn_ = unsafe { &mut *fn_ };
            let res = fn_(arg_0);
            res
        }

        let mut fn_ = fn_;
        let user: *mut fn_ = &mut fn_;
        let user: *mut c_void = unsafe { core::mem::transmute(user) };
        let fn_ = fn__wrapper::<fn_>;
        let isl_rs_result = unsafe {
            isl_pw_qpolynomial_fold_list_foreach_scc(list, follows, follows_user, fn_, fn_user)
        };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_move_dims`.
    pub fn move_dims(self, dst_type: DimType, dst_pos: u32, src_type: DimType, src_pos: u32,
                     n: u32)
                     -> PwQPolynomial {
        let context_for_error_message = self.get_ctx();
        let pwqp = self;
        let mut pwqp = pwqp;
        pwqp.do_not_free_on_drop();
        let pwqp = pwqp.ptr;
        let isl_rs_result =
            unsafe { isl_pw_qpolynomial_move_dims(pwqp, dst_type, dst_pos, src_type, src_pos, n) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwQPolynomial { ptr: isl_rs_result,
                                            should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_from_qpolynomial`.
    pub fn from_qpolynomial(qp: QPolynomial) -> PwQPolynomial {
        let mut qp = qp;
        qp.do_not_free_on_drop();
        let qp = qp.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_from_qpolynomial(qp) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = PwQPolynomial { ptr: isl_rs_result,
                                            should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_eval`.
    pub fn fold_eval(pwf: PwQPolynomialFold, pnt: Point) -> Val {
        let mut pwf = pwf;
        pwf.do_not_free_on_drop();
        let pwf = pwf.ptr;
        let mut pnt = pnt;
        pnt.do_not_free_on_drop();
        let pnt = pnt.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_eval(pwf, pnt) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = Val { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_intersect_params`.
    pub fn fold_intersect_params(pwf: PwQPolynomialFold, set: Set) -> PwQPolynomialFold {
        let mut pwf = pwf;
        pwf.do_not_free_on_drop();
        let pwf = pwf.ptr;
        let mut set = set;
        set.do_not_free_on_drop();
        let set = set.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_intersect_params(pwf, set) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = PwQPolynomialFold { ptr: isl_rs_result,
                                                should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_list_get_at`.
    pub fn fold_list_get_at(list: &PwQPolynomialFoldList, index: i32) -> PwQPolynomialFold {
        let list = list.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_list_get_at(list, index) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = PwQPolynomialFold { ptr: isl_rs_result,
                                                should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_isa_qpolynomial_fold`.
    pub fn fold_isa_qpolynomial_fold(pwf: &PwQPolynomialFold) -> bool {
        let pwf = pwf.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_isa_qpolynomial_fold(pwf) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error"),
        };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_min`.
    pub fn fold_min(pwf: PwQPolynomialFold) -> Val {
        let mut pwf = pwf;
        pwf.do_not_free_on_drop();
        let pwf = pwf.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_min(pwf) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = Val { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_list_size`.
    pub fn fold_list_size(list: &PwQPolynomialFoldList) -> i32 {
        let list = list.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_list_size(list) };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_get_domain_space`.
    pub fn get_domain_space(&self) -> Space {
        let context_for_error_message = self.get_ctx();
        let pwqp = self;
        let pwqp = pwqp.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_get_domain_space(pwqp) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Space { ptr: isl_rs_result,
                                    should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_gist_params`.
    pub fn gist_params(self, context: Set) -> PwQPolynomial {
        let context_for_error_message = self.get_ctx();
        let pwqp = self;
        let mut pwqp = pwqp;
        pwqp.do_not_free_on_drop();
        let pwqp = pwqp.ptr;
        let mut context = context;
        context.do_not_free_on_drop();
        let context = context.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_gist_params(pwqp, context) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwQPolynomial { ptr: isl_rs_result,
                                            should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_n_piece`.
    pub fn fold_n_piece(pwf: &PwQPolynomialFold) -> i32 {
        let pwf = pwf.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_n_piece(pwf) };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_to_list`.
    pub fn to_list(self) -> PwQPolynomialList {
        let context_for_error_message = self.get_ctx();
        let el = self;
        let mut el = el;
        el.do_not_free_on_drop();
        let el = el.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_to_list(el) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwQPolynomialList { ptr: isl_rs_result,
                                                should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_free`.
    pub fn free(self) -> PwQPolynomial {
        let context_for_error_message = self.get_ctx();
        let pwqp = self;
        let mut pwqp = pwqp;
        pwqp.do_not_free_on_drop();
        let pwqp = pwqp.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_free(pwqp) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwQPolynomial { ptr: isl_rs_result,
                                            should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_isa_qpolynomial`.
    pub fn isa_qpolynomial(&self) -> bool {
        let context_for_error_message = self.get_ctx();
        let pwqp = self;
        let pwqp = pwqp.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_isa_qpolynomial(pwqp) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error: {}", context_for_error_message.last_error_msg()),
        };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_zero`.
    pub fn fold_zero(space: Space, type_: Fold) -> PwQPolynomialFold {
        let mut space = space;
        space.do_not_free_on_drop();
        let space = space.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_zero(space, type_) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = PwQPolynomialFold { ptr: isl_rs_result,
                                                should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_intersect_domain`.
    pub fn intersect_domain(self, set: Set) -> PwQPolynomial {
        let context_for_error_message = self.get_ctx();
        let pwpq = self;
        let mut pwpq = pwpq;
        pwpq.do_not_free_on_drop();
        let pwpq = pwpq.ptr;
        let mut set = set;
        set.do_not_free_on_drop();
        let set = set.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_intersect_domain(pwpq, set) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwQPolynomial { ptr: isl_rs_result,
                                            should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_add_disjoint`.
    pub fn add_disjoint(self, pwqp2: PwQPolynomial) -> PwQPolynomial {
        let context_for_error_message = self.get_ctx();
        let pwqp1 = self;
        let mut pwqp1 = pwqp1;
        pwqp1.do_not_free_on_drop();
        let pwqp1 = pwqp1.ptr;
        let mut pwqp2 = pwqp2;
        pwqp2.do_not_free_on_drop();
        let pwqp2 = pwqp2.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_add_disjoint(pwqp1, pwqp2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwQPolynomial { ptr: isl_rs_result,
                                            should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_list_alloc`.
    pub fn fold_list_alloc(ctx: &Context, n: i32) -> PwQPolynomialFoldList {
        let ctx = ctx.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_list_alloc(ctx, n) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = PwQPolynomialFoldList { ptr: isl_rs_result,
                                                    should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_intersect_params`.
    pub fn intersect_params(self, set: Set) -> PwQPolynomial {
        let context_for_error_message = self.get_ctx();
        let pwpq = self;
        let mut pwpq = pwpq;
        pwpq.do_not_free_on_drop();
        let pwpq = pwpq.ptr;
        let mut set = set;
        set.do_not_free_on_drop();
        let set = set.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_intersect_params(pwpq, set) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwQPolynomial { ptr: isl_rs_result,
                                            should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_insert_dims`.
    pub fn insert_dims(self, type_: DimType, first: u32, n: u32) -> PwQPolynomial {
        let context_for_error_message = self.get_ctx();
        let pwqp = self;
        let mut pwqp = pwqp;
        pwqp.do_not_free_on_drop();
        let pwqp = pwqp.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_insert_dims(pwqp, type_, first, n) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwQPolynomial { ptr: isl_rs_result,
                                            should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_read_from_str`.
    pub fn read_from_str(ctx: &Context, str_: &str) -> PwQPolynomial {
        let ctx = ctx.ptr;
        let str_ = CString::new(str_).unwrap();
        let str_ = str_.as_ptr();
        let isl_rs_result = unsafe { isl_pw_qpolynomial_read_from_str(ctx, str_) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = PwQPolynomial { ptr: isl_rs_result,
                                            should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_list_to_str`.
    pub fn fold_list_to_str(list: &PwQPolynomialFoldList) -> &str {
        let list = list.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_list_to_str(list) };
        let isl_rs_result = unsafe { CStr::from_ptr(isl_rs_result) };
        let isl_rs_result = isl_rs_result.to_str().unwrap();
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_alloc`.
    pub fn fold_alloc(type_: Fold, set: Set, fold: QPolynomialFold) -> PwQPolynomialFold {
        let mut set = set;
        set.do_not_free_on_drop();
        let set = set.ptr;
        let mut fold = fold;
        fold.do_not_free_on_drop();
        let fold = fold.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_alloc(type_, set, fold) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = PwQPolynomialFold { ptr: isl_rs_result,
                                                should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_domain`.
    pub fn fold_domain(pwf: PwQPolynomialFold) -> Set {
        let mut pwf = pwf;
        pwf.do_not_free_on_drop();
        let pwf = pwf.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_domain(pwf) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = Set { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_list_concat`.
    pub fn fold_list_concat(list1: PwQPolynomialFoldList, list2: PwQPolynomialFoldList)
                            -> PwQPolynomialFoldList {
        let mut list1 = list1;
        list1.do_not_free_on_drop();
        let list1 = list1.ptr;
        let mut list2 = list2;
        list2.do_not_free_on_drop();
        let list2 = list2.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_list_concat(list1, list2) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = PwQPolynomialFoldList { ptr: isl_rs_result,
                                                    should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_list_n_pw_qpolynomial_fold`.
    pub fn fold_list_n_pw_qpolynomial_fold(list: &PwQPolynomialFoldList) -> i32 {
        let list = list.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_list_n_pw_qpolynomial_fold(list) };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_add`.
    pub fn add(self, pwqp2: PwQPolynomial) -> PwQPolynomial {
        let context_for_error_message = self.get_ctx();
        let pwqp1 = self;
        let mut pwqp1 = pwqp1;
        pwqp1.do_not_free_on_drop();
        let pwqp1 = pwqp1.ptr;
        let mut pwqp2 = pwqp2;
        pwqp2.do_not_free_on_drop();
        let pwqp2 = pwqp2.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_add(pwqp1, pwqp2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwQPolynomial { ptr: isl_rs_result,
                                            should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_zero`.
    pub fn zero(space: Space) -> PwQPolynomial {
        let mut space = space;
        space.do_not_free_on_drop();
        let space = space.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_zero(space) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = PwQPolynomial { ptr: isl_rs_result,
                                            should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_as_qpolynomial_fold`.
    pub fn fold_as_qpolynomial_fold(pwf: PwQPolynomialFold) -> QPolynomialFold {
        let mut pwf = pwf;
        pwf.do_not_free_on_drop();
        let pwf = pwf.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_as_qpolynomial_fold(pwf) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = QPolynomialFold { ptr: isl_rs_result,
                                              should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_foreach_piece`.
    pub fn fold_foreach_piece<fn_>(pwf: &PwQPolynomialFold, fn_: fn_, user: *mut c_void) -> Stat
        where fn_: FnMut(&Set, &QPolynomialFold) -> Stat
    {
        let pwf = pwf.ptr;
        extern "C" fn fn__wrapper<fn_>(arg_0: uintptr_t, arg_1: uintptr_t, arg_2: *mut c_void)
                                       -> Stat
            where fn_: FnMut(&Set, &QPolynomialFold) -> Stat
        {
            if arg_0 == 0 {
                panic!("ISL error");
            }
            let arg_0 = &Set { ptr: arg_0,
                               should_free_on_drop: true };
            if arg_1 == 0 {
                panic!("ISL error");
            }
            let arg_1 = &QPolynomialFold { ptr: arg_1,
                                           should_free_on_drop: true };
            let fn_: *mut fn_ = unsafe { core::mem::transmute(arg_2) };
            let fn_: &mut fn_ = unsafe { &mut *fn_ };
            let res = fn_(arg_0, arg_1);
            res
        }

        let mut fn_ = fn_;
        let user: *mut fn_ = &mut fn_;
        let user: *mut c_void = unsafe { core::mem::transmute(user) };
        let fn_ = fn__wrapper::<fn_>;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_foreach_piece(pwf, fn_, user) };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_find_dim_by_name`.
    pub fn find_dim_by_name(&self, type_: DimType, name: &str) -> i32 {
        let pwqp = self;
        let pwqp = pwqp.ptr;
        let name = CString::new(name).unwrap();
        let name = name.as_ptr();
        let isl_rs_result = unsafe { isl_pw_qpolynomial_find_dim_by_name(pwqp, type_, name) };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_min`.
    pub fn min(self) -> Val {
        let context_for_error_message = self.get_ctx();
        let pwqp = self;
        let mut pwqp = pwqp;
        pwqp.do_not_free_on_drop();
        let pwqp = pwqp.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_min(pwqp) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Val { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_list_get_pw_qpolynomial_fold`.
    pub fn fold_list_get_pw_qpolynomial_fold(list: &PwQPolynomialFoldList, index: i32)
                                             -> PwQPolynomialFold {
        let list = list.ptr;
        let isl_rs_result =
            unsafe { isl_pw_qpolynomial_fold_list_get_pw_qpolynomial_fold(list, index) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = PwQPolynomialFold { ptr: isl_rs_result,
                                                should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_dim`.
    pub fn dim(&self, type_: DimType) -> i32 {
        let pwqp = self;
        let pwqp = pwqp.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_dim(pwqp, type_) };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_is_zero`.
    pub fn fold_is_zero(pwf: &PwQPolynomialFold) -> bool {
        let pwf = pwf.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_is_zero(pwf) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error"),
        };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_scale_down_val`.
    pub fn fold_scale_down_val(pwf: PwQPolynomialFold, v: Val) -> PwQPolynomialFold {
        let mut pwf = pwf;
        pwf.do_not_free_on_drop();
        let pwf = pwf.ptr;
        let mut v = v;
        v.do_not_free_on_drop();
        let v = v.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_scale_down_val(pwf, v) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = PwQPolynomialFold { ptr: isl_rs_result,
                                                should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_gist_params`.
    pub fn fold_gist_params(pwf: PwQPolynomialFold, context: Set) -> PwQPolynomialFold {
        let mut pwf = pwf;
        pwf.do_not_free_on_drop();
        let pwf = pwf.ptr;
        let mut context = context;
        context.do_not_free_on_drop();
        let context = context.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_gist_params(pwf, context) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = PwQPolynomialFold { ptr: isl_rs_result,
                                                should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_list_drop`.
    pub fn fold_list_drop(list: PwQPolynomialFoldList, first: u32, n: u32)
                          -> PwQPolynomialFoldList {
        let mut list = list;
        list.do_not_free_on_drop();
        let list = list.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_list_drop(list, first, n) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = PwQPolynomialFoldList { ptr: isl_rs_result,
                                                    should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_list_clear`.
    pub fn fold_list_clear(list: PwQPolynomialFoldList) -> PwQPolynomialFoldList {
        let mut list = list;
        list.do_not_free_on_drop();
        let list = list.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_list_clear(list) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = PwQPolynomialFoldList { ptr: isl_rs_result,
                                                    should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_list_sort`.
    pub fn fold_list_sort<cmp>(list: PwQPolynomialFoldList, cmp: cmp, user: *mut c_void)
                               -> PwQPolynomialFoldList
        where cmp: FnMut(&PwQPolynomialFold, &PwQPolynomialFold) -> i32
    {
        let mut list = list;
        list.do_not_free_on_drop();
        let list = list.ptr;
        extern "C" fn cmp_wrapper<cmp>(arg_0: uintptr_t, arg_1: uintptr_t, arg_2: *mut c_void)
                                       -> i32
            where cmp: FnMut(&PwQPolynomialFold, &PwQPolynomialFold) -> i32
        {
            if arg_0 == 0 {
                panic!("ISL error");
            }
            let arg_0 = &PwQPolynomialFold { ptr: arg_0,
                                             should_free_on_drop: true };
            if arg_1 == 0 {
                panic!("ISL error");
            }
            let arg_1 = &PwQPolynomialFold { ptr: arg_1,
                                             should_free_on_drop: true };
            let cmp: *mut cmp = unsafe { core::mem::transmute(arg_2) };
            let cmp: &mut cmp = unsafe { &mut *cmp };
            let res = cmp(arg_0, arg_1);
            res
        }

        let mut cmp = cmp;
        let cmp_user: *mut cmp = &mut cmp;
        let cmp_user: *mut c_void = unsafe { core::mem::transmute(cmp_user) };
        let cmp = cmp_wrapper::<cmp>;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_list_sort(list, cmp, user) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = PwQPolynomialFoldList { ptr: isl_rs_result,
                                                    should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_foreach_piece`.
    pub fn foreach_piece<fn_>(&self, fn_: fn_, user: *mut c_void) -> Stat
        where fn_: FnMut(&Set, &QPolynomial) -> Stat
    {
        let context_for_error_message = self.get_ctx();
        let pwqp = self;
        let pwqp = pwqp.ptr;
        extern "C" fn fn__wrapper<fn_>(arg_0: uintptr_t, arg_1: uintptr_t, arg_2: *mut c_void)
                                       -> Stat
            where fn_: FnMut(&Set, &QPolynomial) -> Stat
        {
            if arg_0 == 0 {
                panic!("ISL error");
            }
            let arg_0 = &Set { ptr: arg_0,
                               should_free_on_drop: true };
            if arg_1 == 0 {
                panic!("ISL error");
            }
            let arg_1 = &QPolynomial { ptr: arg_1,
                                       should_free_on_drop: true };
            let fn_: *mut fn_ = unsafe { core::mem::transmute(arg_2) };
            let fn_: &mut fn_ = unsafe { &mut *fn_ };
            let res = fn_(arg_0, arg_1);
            res
        }

        let mut fn_ = fn_;
        let user: *mut fn_ = &mut fn_;
        let user: *mut c_void = unsafe { core::mem::transmute(user) };
        let fn_ = fn__wrapper::<fn_>;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_foreach_piece(pwqp, fn_, user) };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_neg`.
    pub fn neg(self) -> PwQPolynomial {
        let context_for_error_message = self.get_ctx();
        let pwqp = self;
        let mut pwqp = pwqp;
        pwqp.do_not_free_on_drop();
        let pwqp = pwqp.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_neg(pwqp) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwQPolynomial { ptr: isl_rs_result,
                                            should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_from_pw_qpolynomial`.
    pub fn fold_from_pw_qpolynomial(type_: Fold, pwqp: PwQPolynomial) -> PwQPolynomialFold {
        let mut pwqp = pwqp;
        pwqp.do_not_free_on_drop();
        let pwqp = pwqp.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_from_pw_qpolynomial(type_, pwqp) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = PwQPolynomialFold { ptr: isl_rs_result,
                                                should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_fold`.
    pub fn fold_fold(pwf1: PwQPolynomialFold, pwf2: PwQPolynomialFold) -> PwQPolynomialFold {
        let mut pwf1 = pwf1;
        pwf1.do_not_free_on_drop();
        let pwf1 = pwf1.ptr;
        let mut pwf2 = pwf2;
        pwf2.do_not_free_on_drop();
        let pwf2 = pwf2.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_fold(pwf1, pwf2) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = PwQPolynomialFold { ptr: isl_rs_result,
                                                should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_drop_unused_params`.
    pub fn drop_unused_params(self) -> PwQPolynomial {
        let context_for_error_message = self.get_ctx();
        let pwqp = self;
        let mut pwqp = pwqp;
        pwqp.do_not_free_on_drop();
        let pwqp = pwqp.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_drop_unused_params(pwqp) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwQPolynomial { ptr: isl_rs_result,
                                            should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_as_qpolynomial`.
    pub fn as_qpolynomial(self) -> QPolynomial {
        let context_for_error_message = self.get_ctx();
        let pwqp = self;
        let mut pwqp = pwqp;
        pwqp.do_not_free_on_drop();
        let pwqp = pwqp.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_as_qpolynomial(pwqp) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = QPolynomial { ptr: isl_rs_result,
                                          should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_free`.
    pub fn fold_free(pwf: PwQPolynomialFold) -> PwQPolynomialFold {
        let mut pwf = pwf;
        pwf.do_not_free_on_drop();
        let pwf = pwf.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_free(pwf) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = PwQPolynomialFold { ptr: isl_rs_result,
                                                should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_list_reverse`.
    pub fn fold_list_reverse(list: PwQPolynomialFoldList) -> PwQPolynomialFoldList {
        let mut list = list;
        list.do_not_free_on_drop();
        let list = list.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_list_reverse(list) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = PwQPolynomialFoldList { ptr: isl_rs_result,
                                                    should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_get_space`.
    pub fn fold_get_space(pwf: &PwQPolynomialFold) -> Space {
        let pwf = pwf.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_get_space(pwf) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = Space { ptr: isl_rs_result,
                                    should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_get_domain_space`.
    pub fn fold_get_domain_space(pwf: &PwQPolynomialFold) -> Space {
        let pwf = pwf.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_get_domain_space(pwf) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = Space { ptr: isl_rs_result,
                                    should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_intersect_domain_wrapped_domain`.
    pub fn fold_intersect_domain_wrapped_domain(pwf: PwQPolynomialFold, set: Set)
                                                -> PwQPolynomialFold {
        let mut pwf = pwf;
        pwf.do_not_free_on_drop();
        let pwf = pwf.ptr;
        let mut set = set;
        set.do_not_free_on_drop();
        let set = set.ptr;
        let isl_rs_result =
            unsafe { isl_pw_qpolynomial_fold_intersect_domain_wrapped_domain(pwf, set) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = PwQPolynomialFold { ptr: isl_rs_result,
                                                should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_involves_dims`.
    pub fn involves_dims(&self, type_: DimType, first: u32, n: u32) -> bool {
        let context_for_error_message = self.get_ctx();
        let pwqp = self;
        let pwqp = pwqp.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_involves_dims(pwqp, type_, first, n) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error: {}", context_for_error_message.last_error_msg()),
        };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_subtract_domain`.
    pub fn fold_subtract_domain(pwf: PwQPolynomialFold, set: Set) -> PwQPolynomialFold {
        let mut pwf = pwf;
        pwf.do_not_free_on_drop();
        let pwf = pwf.ptr;
        let mut set = set;
        set.do_not_free_on_drop();
        let set = set.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_subtract_domain(pwf, set) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = PwQPolynomialFold { ptr: isl_rs_result,
                                                should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_sub`.
    pub fn sub(self, pwqp2: PwQPolynomial) -> PwQPolynomial {
        let context_for_error_message = self.get_ctx();
        let pwqp1 = self;
        let mut pwqp1 = pwqp1;
        pwqp1.do_not_free_on_drop();
        let pwqp1 = pwqp1.ptr;
        let mut pwqp2 = pwqp2;
        pwqp2.do_not_free_on_drop();
        let pwqp2 = pwqp2.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_sub(pwqp1, pwqp2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwQPolynomial { ptr: isl_rs_result,
                                            should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_every_piece`.
    pub fn fold_every_piece<test>(pwf: &PwQPolynomialFold, test: test, user: *mut c_void) -> bool
        where test: FnMut(&Set, &QPolynomialFold) -> bool
    {
        let pwf = pwf.ptr;
        extern "C" fn test_wrapper<test>(arg_0: uintptr_t, arg_1: uintptr_t, arg_2: *mut c_void)
                                         -> i32
            where test: FnMut(&Set, &QPolynomialFold) -> bool
        {
            if arg_0 == 0 {
                panic!("ISL error");
            }
            let arg_0 = &Set { ptr: arg_0,
                               should_free_on_drop: true };
            if arg_1 == 0 {
                panic!("ISL error");
            }
            let arg_1 = &QPolynomialFold { ptr: arg_1,
                                           should_free_on_drop: true };
            let test: *mut test = unsafe { core::mem::transmute(arg_2) };
            let test: &mut test = unsafe { &mut *test };
            let res = test(arg_0, arg_1);
            let res = if res { 1 } else { 0 };
            res
        }

        let mut test = test;
        let test_user: *mut test = &mut test;
        let test_user: *mut c_void = unsafe { core::mem::transmute(test_user) };
        let test = test_wrapper::<test>;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_every_piece(pwf, test, user) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error"),
        };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_has_equal_space`.
    pub fn has_equal_space(&self, pwqp2: &PwQPolynomial) -> bool {
        let context_for_error_message = self.get_ctx();
        let pwqp1 = self;
        let pwqp1 = pwqp1.ptr;
        let pwqp2 = pwqp2.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_has_equal_space(pwqp1, pwqp2) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error: {}", context_for_error_message.last_error_msg()),
        };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_project_domain_on_params`.
    pub fn fold_project_domain_on_params(pwf: PwQPolynomialFold) -> PwQPolynomialFold {
        let mut pwf = pwf;
        pwf.do_not_free_on_drop();
        let pwf = pwf.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_project_domain_on_params(pwf) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = PwQPolynomialFold { ptr: isl_rs_result,
                                                should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_reset_domain_space`.
    pub fn reset_domain_space(self, space: Space) -> PwQPolynomial {
        let context_for_error_message = self.get_ctx();
        let pwqp = self;
        let mut pwqp = pwqp;
        pwqp.do_not_free_on_drop();
        let pwqp = pwqp.ptr;
        let mut space = space;
        space.do_not_free_on_drop();
        let space = space.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_reset_domain_space(pwqp, space) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwQPolynomial { ptr: isl_rs_result,
                                            should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_drop_unused_params`.
    pub fn fold_drop_unused_params(pwf: PwQPolynomialFold) -> PwQPolynomialFold {
        let mut pwf = pwf;
        pwf.do_not_free_on_drop();
        let pwf = pwf.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_drop_unused_params(pwf) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = PwQPolynomialFold { ptr: isl_rs_result,
                                                should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_list_get_ctx`.
    pub fn fold_list_get_ctx(list: &PwQPolynomialFoldList) -> Context {
        let list = list.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_list_get_ctx(list) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = Context { ptr: isl_rs_result,
                                      should_free_on_drop: true };
        let mut isl_rs_result = isl_rs_result;
        isl_rs_result.do_not_free_on_drop();
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_list_swap`.
    pub fn fold_list_swap(list: PwQPolynomialFoldList, pos1: u32, pos2: u32)
                          -> PwQPolynomialFoldList {
        let mut list = list;
        list.do_not_free_on_drop();
        let list = list.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_list_swap(list, pos1, pos2) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = PwQPolynomialFoldList { ptr: isl_rs_result,
                                                    should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_list_foreach`.
    pub fn fold_list_foreach<fn_>(list: &PwQPolynomialFoldList, fn_: fn_, user: *mut c_void) -> Stat
        where fn_: FnMut(&PwQPolynomialFold) -> Stat
    {
        let list = list.ptr;
        extern "C" fn fn__wrapper<fn_>(arg_0: uintptr_t, arg_1: *mut c_void) -> Stat
            where fn_: FnMut(&PwQPolynomialFold) -> Stat
        {
            if arg_0 == 0 {
                panic!("ISL error");
            }
            let arg_0 = &PwQPolynomialFold { ptr: arg_0,
                                             should_free_on_drop: true };
            let fn_: *mut fn_ = unsafe { core::mem::transmute(arg_1) };
            let fn_: &mut fn_ = unsafe { &mut *fn_ };
            let res = fn_(arg_0);
            res
        }

        let mut fn_ = fn_;
        let user: *mut fn_ = &mut fn_;
        let user: *mut c_void = unsafe { core::mem::transmute(user) };
        let fn_ = fn__wrapper::<fn_>;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_list_foreach(list, fn_, user) };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_eval`.
    pub fn eval(self, pnt: Point) -> Val {
        let context_for_error_message = self.get_ctx();
        let pwqp = self;
        let mut pwqp = pwqp;
        pwqp.do_not_free_on_drop();
        let pwqp = pwqp.ptr;
        let mut pnt = pnt;
        pnt.do_not_free_on_drop();
        let pnt = pnt.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_eval(pwqp, pnt) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Val { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_move_dims`.
    pub fn fold_move_dims(pwf: PwQPolynomialFold, dst_type: DimType, dst_pos: u32,
                          src_type: DimType, src_pos: u32, n: u32)
                          -> PwQPolynomialFold {
        let mut pwf = pwf;
        pwf.do_not_free_on_drop();
        let pwf = pwf.ptr;
        let isl_rs_result = unsafe {
            isl_pw_qpolynomial_fold_move_dims(pwf, dst_type, dst_pos, src_type, src_pos, n)
        };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = PwQPolynomialFold { ptr: isl_rs_result,
                                                should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_foreach_lifted_piece`.
    pub fn fold_foreach_lifted_piece<fn_>(pwf: &PwQPolynomialFold, fn_: fn_, user: *mut c_void)
                                          -> Stat
        where fn_: FnMut(&Set, &QPolynomialFold) -> Stat
    {
        let pwf = pwf.ptr;
        extern "C" fn fn__wrapper<fn_>(arg_0: uintptr_t, arg_1: uintptr_t, arg_2: *mut c_void)
                                       -> Stat
            where fn_: FnMut(&Set, &QPolynomialFold) -> Stat
        {
            if arg_0 == 0 {
                panic!("ISL error");
            }
            let arg_0 = &Set { ptr: arg_0,
                               should_free_on_drop: true };
            if arg_1 == 0 {
                panic!("ISL error");
            }
            let arg_1 = &QPolynomialFold { ptr: arg_1,
                                           should_free_on_drop: true };
            let fn_: *mut fn_ = unsafe { core::mem::transmute(arg_2) };
            let fn_: &mut fn_ = unsafe { &mut *fn_ };
            let res = fn_(arg_0, arg_1);
            res
        }

        let mut fn_ = fn_;
        let user: *mut fn_ = &mut fn_;
        let user: *mut c_void = unsafe { core::mem::transmute(user) };
        let fn_ = fn__wrapper::<fn_>;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_foreach_lifted_piece(pwf, fn_, user) };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_to_union_pw_qpolynomial_fold`.
    pub fn fold_to_union_pw_qpolynomial_fold(pwf: PwQPolynomialFold) -> UnionPwQPolynomialFold {
        let mut pwf = pwf;
        pwf.do_not_free_on_drop();
        let pwf = pwf.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_to_union_pw_qpolynomial_fold(pwf) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = UnionPwQPolynomialFold { ptr: isl_rs_result,
                                                     should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_size`.
    pub fn fold_size(pwf: &PwQPolynomialFold) -> u64 {
        let pwf = pwf.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_size(pwf) };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_list_dump`.
    pub fn fold_list_dump(list: &PwQPolynomialFoldList) {
        let list = list.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_list_dump(list) };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_intersect_domain_wrapped_range`.
    pub fn fold_intersect_domain_wrapped_range(pwf: PwQPolynomialFold, set: Set)
                                               -> PwQPolynomialFold {
        let mut pwf = pwf;
        pwf.do_not_free_on_drop();
        let pwf = pwf.ptr;
        let mut set = set;
        set.do_not_free_on_drop();
        let set = set.ptr;
        let isl_rs_result =
            unsafe { isl_pw_qpolynomial_fold_intersect_domain_wrapped_range(pwf, set) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = PwQPolynomialFold { ptr: isl_rs_result,
                                                should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_reset_user`.
    pub fn fold_reset_user(pwf: PwQPolynomialFold) -> PwQPolynomialFold {
        let mut pwf = pwf;
        pwf.do_not_free_on_drop();
        let pwf = pwf.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_reset_user(pwf) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = PwQPolynomialFold { ptr: isl_rs_result,
                                                should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_drop_dims`.
    pub fn fold_drop_dims(pwf: PwQPolynomialFold, type_: DimType, first: u32, n: u32)
                          -> PwQPolynomialFold {
        let mut pwf = pwf;
        pwf.do_not_free_on_drop();
        let pwf = pwf.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_drop_dims(pwf, type_, first, n) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = PwQPolynomialFold { ptr: isl_rs_result,
                                                should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_add_disjoint`.
    pub fn fold_add_disjoint(pwf1: PwQPolynomialFold, pwf2: PwQPolynomialFold)
                             -> PwQPolynomialFold {
        let mut pwf1 = pwf1;
        pwf1.do_not_free_on_drop();
        let pwf1 = pwf1.ptr;
        let mut pwf2 = pwf2;
        pwf2.do_not_free_on_drop();
        let pwf2 = pwf2.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_add_disjoint(pwf1, pwf2) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = PwQPolynomialFold { ptr: isl_rs_result,
                                                should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_to_polynomial`.
    pub fn to_polynomial(self, sign: i32) -> PwQPolynomial {
        let context_for_error_message = self.get_ctx();
        let pwqp = self;
        let mut pwqp = pwqp;
        pwqp.do_not_free_on_drop();
        let pwqp = pwqp.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_to_polynomial(pwqp, sign) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwQPolynomial { ptr: isl_rs_result,
                                            should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_list_copy`.
    pub fn fold_list_copy(list: &PwQPolynomialFoldList) -> PwQPolynomialFoldList {
        let list = list.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_list_copy(list) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = PwQPolynomialFoldList { ptr: isl_rs_result,
                                                    should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_plain_is_equal`.
    pub fn plain_is_equal(&self, pwqp2: &PwQPolynomial) -> bool {
        let context_for_error_message = self.get_ctx();
        let pwqp1 = self;
        let pwqp1 = pwqp1.ptr;
        let pwqp2 = pwqp2.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_plain_is_equal(pwqp1, pwqp2) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error: {}", context_for_error_message.last_error_msg()),
        };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_gist`.
    pub fn gist(self, context: Set) -> PwQPolynomial {
        let context_for_error_message = self.get_ctx();
        let pwqp = self;
        let mut pwqp = pwqp;
        pwqp.do_not_free_on_drop();
        let pwqp = pwqp.ptr;
        let mut context = context;
        context.do_not_free_on_drop();
        let context = context.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_gist(pwqp, context) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwQPolynomial { ptr: isl_rs_result,
                                            should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_get_type`.
    pub fn fold_get_type(pwf: &PwQPolynomialFold) -> Fold {
        let pwf = pwf.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_get_type(pwf) };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_mul`.
    pub fn mul(self, pwqp2: PwQPolynomial) -> PwQPolynomial {
        let context_for_error_message = self.get_ctx();
        let pwqp1 = self;
        let mut pwqp1 = pwqp1;
        pwqp1.do_not_free_on_drop();
        let pwqp1 = pwqp1.ptr;
        let mut pwqp2 = pwqp2;
        pwqp2.do_not_free_on_drop();
        let pwqp2 = pwqp2.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_mul(pwqp1, pwqp2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwQPolynomial { ptr: isl_rs_result,
                                            should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_every_piece`.
    pub fn every_piece<test>(&self, test: test, user: *mut c_void) -> bool
        where test: FnMut(&Set, &QPolynomial) -> bool
    {
        let context_for_error_message = self.get_ctx();
        let pwqp = self;
        let pwqp = pwqp.ptr;
        extern "C" fn test_wrapper<test>(arg_0: uintptr_t, arg_1: uintptr_t, arg_2: *mut c_void)
                                         -> i32
            where test: FnMut(&Set, &QPolynomial) -> bool
        {
            if arg_0 == 0 {
                panic!("ISL error");
            }
            let arg_0 = &Set { ptr: arg_0,
                               should_free_on_drop: true };
            if arg_1 == 0 {
                panic!("ISL error");
            }
            let arg_1 = &QPolynomial { ptr: arg_1,
                                       should_free_on_drop: true };
            let test: *mut test = unsafe { core::mem::transmute(arg_2) };
            let test: &mut test = unsafe { &mut *test };
            let res = test(arg_0, arg_1);
            let res = if res { 1 } else { 0 };
            res
        }

        let mut test = test;
        let test_user: *mut test = &mut test;
        let test_user: *mut c_void = unsafe { core::mem::transmute(test_user) };
        let test = test_wrapper::<test>;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_every_piece(pwqp, test, user) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error: {}", context_for_error_message.last_error_msg()),
        };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_scale_val`.
    pub fn scale_val(self, v: Val) -> PwQPolynomial {
        let context_for_error_message = self.get_ctx();
        let pwqp = self;
        let mut pwqp = pwqp;
        pwqp.do_not_free_on_drop();
        let pwqp = pwqp.ptr;
        let mut v = v;
        v.do_not_free_on_drop();
        let v = v.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_scale_val(pwqp, v) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwQPolynomial { ptr: isl_rs_result,
                                            should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_coalesce`.
    pub fn coalesce(self) -> PwQPolynomial {
        let context_for_error_message = self.get_ctx();
        let pwqp = self;
        let mut pwqp = pwqp;
        pwqp.do_not_free_on_drop();
        let pwqp = pwqp.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_coalesce(pwqp) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwQPolynomial { ptr: isl_rs_result,
                                            should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_read_from_str`.
    pub fn fold_read_from_str(ctx: &Context, str_: &str) -> PwQPolynomialFold {
        let ctx = ctx.ptr;
        let str_ = CString::new(str_).unwrap();
        let str_ = str_.as_ptr();
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_read_from_str(ctx, str_) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = PwQPolynomialFold { ptr: isl_rs_result,
                                                should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_intersect_domain_wrapped_range`.
    pub fn intersect_domain_wrapped_range(self, set: Set) -> PwQPolynomial {
        let context_for_error_message = self.get_ctx();
        let pwpq = self;
        let mut pwpq = pwpq;
        pwpq.do_not_free_on_drop();
        let pwpq = pwpq.ptr;
        let mut set = set;
        set.do_not_free_on_drop();
        let set = set.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_intersect_domain_wrapped_range(pwpq, set) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwQPolynomial { ptr: isl_rs_result,
                                            should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_split_periods`.
    pub fn split_periods(self, max_periods: i32) -> PwQPolynomial {
        let context_for_error_message = self.get_ctx();
        let pwqp = self;
        let mut pwqp = pwqp;
        pwqp.do_not_free_on_drop();
        let pwqp = pwqp.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_split_periods(pwqp, max_periods) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwQPolynomial { ptr: isl_rs_result,
                                            should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_from_qpolynomial_fold`.
    pub fn fold_from_qpolynomial_fold(fold: QPolynomialFold) -> PwQPolynomialFold {
        let mut fold = fold;
        fold.do_not_free_on_drop();
        let fold = fold.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_from_qpolynomial_fold(fold) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = PwQPolynomialFold { ptr: isl_rs_result,
                                                should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_from_range`.
    pub fn fold_from_range(pwf: PwQPolynomialFold) -> PwQPolynomialFold {
        let mut pwf = pwf;
        pwf.do_not_free_on_drop();
        let pwf = pwf.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_from_range(pwf) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = PwQPolynomialFold { ptr: isl_rs_result,
                                                should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fix_val`.
    pub fn fix_val(self, type_: DimType, n: u32, v: Val) -> PwQPolynomial {
        let context_for_error_message = self.get_ctx();
        let pwqp = self;
        let mut pwqp = pwqp;
        pwqp.do_not_free_on_drop();
        let pwqp = pwqp.ptr;
        let mut v = v;
        v.do_not_free_on_drop();
        let v = v.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fix_val(pwqp, type_, n, v) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwQPolynomial { ptr: isl_rs_result,
                                            should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_list_set_pw_qpolynomial_fold`.
    pub fn fold_list_set_pw_qpolynomial_fold(list: PwQPolynomialFoldList, index: i32,
                                             el: PwQPolynomialFold)
                                             -> PwQPolynomialFoldList {
        let mut list = list;
        list.do_not_free_on_drop();
        let list = list.ptr;
        let mut el = el;
        el.do_not_free_on_drop();
        let el = el.ptr;
        let isl_rs_result =
            unsafe { isl_pw_qpolynomial_fold_list_set_pw_qpolynomial_fold(list, index, el) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = PwQPolynomialFoldList { ptr: isl_rs_result,
                                                    should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_coalesce`.
    pub fn fold_coalesce(pwf: PwQPolynomialFold) -> PwQPolynomialFold {
        let mut pwf = pwf;
        pwf.do_not_free_on_drop();
        let pwf = pwf.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_coalesce(pwf) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = PwQPolynomialFold { ptr: isl_rs_result,
                                                should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_reset_user`.
    pub fn reset_user(self) -> PwQPolynomial {
        let context_for_error_message = self.get_ctx();
        let pwqp = self;
        let mut pwqp = pwqp;
        pwqp.do_not_free_on_drop();
        let pwqp = pwqp.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_reset_user(pwqp) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwQPolynomial { ptr: isl_rs_result,
                                            should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_to_str`.
    pub fn to_str(&self) -> &str {
        let pwqp = self;
        let pwqp = pwqp.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_to_str(pwqp) };
        let isl_rs_result = unsafe { CStr::from_ptr(isl_rs_result) };
        let isl_rs_result = isl_rs_result.to_str().unwrap();
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_plain_is_equal`.
    pub fn fold_plain_is_equal(pwf1: &PwQPolynomialFold, pwf2: &PwQPolynomialFold) -> bool {
        let pwf1 = pwf1.ptr;
        let pwf2 = pwf2.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_plain_is_equal(pwf1, pwf2) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error"),
        };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_to_list`.
    pub fn fold_to_list(el: PwQPolynomialFold) -> PwQPolynomialFoldList {
        let mut el = el;
        el.do_not_free_on_drop();
        let el = el.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_to_list(el) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = PwQPolynomialFoldList { ptr: isl_rs_result,
                                                    should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_list_every`.
    pub fn fold_list_every<test>(list: &PwQPolynomialFoldList, test: test, user: *mut c_void)
                                 -> bool
        where test: FnMut(&PwQPolynomialFold) -> bool
    {
        let list = list.ptr;
        extern "C" fn test_wrapper<test>(arg_0: uintptr_t, arg_1: *mut c_void) -> i32
            where test: FnMut(&PwQPolynomialFold) -> bool
        {
            if arg_0 == 0 {
                panic!("ISL error");
            }
            let arg_0 = &PwQPolynomialFold { ptr: arg_0,
                                             should_free_on_drop: true };
            let test: *mut test = unsafe { core::mem::transmute(arg_1) };
            let test: &mut test = unsafe { &mut *test };
            let res = test(arg_0);
            let res = if res { 1 } else { 0 };
            res
        }

        let mut test = test;
        let test_user: *mut test = &mut test;
        let test_user: *mut c_void = unsafe { core::mem::transmute(test_user) };
        let test = test_wrapper::<test>;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_list_every(list, test, user) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error"),
        };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_list_map`.
    pub fn fold_list_map<fn_>(list: PwQPolynomialFoldList, fn_: fn_, user: *mut c_void)
                              -> PwQPolynomialFoldList
        where fn_: FnMut(&PwQPolynomialFold) -> &PwQPolynomialFold
    {
        let mut list = list;
        list.do_not_free_on_drop();
        let list = list.ptr;
        extern "C" fn fn__wrapper<fn_>(arg_0: uintptr_t, arg_1: *mut c_void) -> uintptr_t
            where fn_: FnMut(&PwQPolynomialFold) -> &PwQPolynomialFold
        {
            if arg_0 == 0 {
                panic!("ISL error");
            }
            let arg_0 = &PwQPolynomialFold { ptr: arg_0,
                                             should_free_on_drop: true };
            let fn_: *mut fn_ = unsafe { core::mem::transmute(arg_1) };
            let fn_: &mut fn_ = unsafe { &mut *fn_ };
            let res = fn_(arg_0);
            let res = res.ptr;
            res
        }

        let mut fn_ = fn_;
        let user: *mut fn_ = &mut fn_;
        let user: *mut c_void = unsafe { core::mem::transmute(user) };
        let fn_ = fn__wrapper::<fn_>;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_list_map(list, fn_, user) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = PwQPolynomialFoldList { ptr: isl_rs_result,
                                                    should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_project_domain_on_params`.
    pub fn project_domain_on_params(self) -> PwQPolynomial {
        let context_for_error_message = self.get_ctx();
        let pwqp = self;
        let mut pwqp = pwqp;
        pwqp.do_not_free_on_drop();
        let pwqp = pwqp.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_project_domain_on_params(pwqp) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwQPolynomial { ptr: isl_rs_result,
                                            should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_is_zero`.
    pub fn is_zero(&self) -> bool {
        let context_for_error_message = self.get_ctx();
        let pwqp = self;
        let pwqp = pwqp.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_is_zero(pwqp) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error: {}", context_for_error_message.last_error_msg()),
        };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_scale_val`.
    pub fn fold_scale_val(pwf: PwQPolynomialFold, v: Val) -> PwQPolynomialFold {
        let mut pwf = pwf;
        pwf.do_not_free_on_drop();
        let pwf = pwf.ptr;
        let mut v = v;
        v.do_not_free_on_drop();
        let v = v.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_scale_val(pwf, v) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = PwQPolynomialFold { ptr: isl_rs_result,
                                                should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_gist`.
    pub fn fold_gist(pwf: PwQPolynomialFold, context: Set) -> PwQPolynomialFold {
        let mut pwf = pwf;
        pwf.do_not_free_on_drop();
        let pwf = pwf.ptr;
        let mut context = context;
        context.do_not_free_on_drop();
        let context = context.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_gist(pwf, context) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = PwQPolynomialFold { ptr: isl_rs_result,
                                                should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_foreach_lifted_piece`.
    pub fn foreach_lifted_piece<fn_>(&self, fn_: fn_, user: *mut c_void) -> Stat
        where fn_: FnMut(&Set, &QPolynomial) -> Stat
    {
        let context_for_error_message = self.get_ctx();
        let pwqp = self;
        let pwqp = pwqp.ptr;
        extern "C" fn fn__wrapper<fn_>(arg_0: uintptr_t, arg_1: uintptr_t, arg_2: *mut c_void)
                                       -> Stat
            where fn_: FnMut(&Set, &QPolynomial) -> Stat
        {
            if arg_0 == 0 {
                panic!("ISL error");
            }
            let arg_0 = &Set { ptr: arg_0,
                               should_free_on_drop: true };
            if arg_1 == 0 {
                panic!("ISL error");
            }
            let arg_1 = &QPolynomial { ptr: arg_1,
                                       should_free_on_drop: true };
            let fn_: *mut fn_ = unsafe { core::mem::transmute(arg_2) };
            let fn_: &mut fn_ = unsafe { &mut *fn_ };
            let res = fn_(arg_0, arg_1);
            res
        }

        let mut fn_ = fn_;
        let user: *mut fn_ = &mut fn_;
        let user: *mut c_void = unsafe { core::mem::transmute(user) };
        let fn_ = fn__wrapper::<fn_>;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_foreach_lifted_piece(pwqp, fn_, user) };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_intersect_domain`.
    pub fn fold_intersect_domain(pwf: PwQPolynomialFold, set: Set) -> PwQPolynomialFold {
        let mut pwf = pwf;
        pwf.do_not_free_on_drop();
        let pwf = pwf.ptr;
        let mut set = set;
        set.do_not_free_on_drop();
        let set = set.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_intersect_domain(pwf, set) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = PwQPolynomialFold { ptr: isl_rs_result,
                                                should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_list_free`.
    pub fn fold_list_free(list: PwQPolynomialFoldList) -> PwQPolynomialFoldList {
        let mut list = list;
        list.do_not_free_on_drop();
        let list = list.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_list_free(list) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = PwQPolynomialFoldList { ptr: isl_rs_result,
                                                    should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_set_dim_name`.
    pub fn set_dim_name(self, type_: DimType, pos: u32, s: &str) -> PwQPolynomial {
        let context_for_error_message = self.get_ctx();
        let pwqp = self;
        let mut pwqp = pwqp;
        pwqp.do_not_free_on_drop();
        let pwqp = pwqp.ptr;
        let s = CString::new(s).unwrap();
        let s = s.as_ptr();
        let isl_rs_result = unsafe { isl_pw_qpolynomial_set_dim_name(pwqp, type_, pos, s) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwQPolynomial { ptr: isl_rs_result,
                                            should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_scale_down_val`.
    pub fn scale_down_val(self, v: Val) -> PwQPolynomial {
        let context_for_error_message = self.get_ctx();
        let pwqp = self;
        let mut pwqp = pwqp;
        pwqp.do_not_free_on_drop();
        let pwqp = pwqp.ptr;
        let mut v = v;
        v.do_not_free_on_drop();
        let v = v.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_scale_down_val(pwqp, v) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwQPolynomial { ptr: isl_rs_result,
                                            should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_dump`.
    pub fn dump(&self) {
        let pwqp = self;
        let pwqp = pwqp.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_dump(pwqp) };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_reset_space`.
    pub fn fold_reset_space(pwf: PwQPolynomialFold, space: Space) -> PwQPolynomialFold {
        let mut pwf = pwf;
        pwf.do_not_free_on_drop();
        let pwf = pwf.ptr;
        let mut space = space;
        space.do_not_free_on_drop();
        let space = space.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_reset_space(pwf, space) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = PwQPolynomialFold { ptr: isl_rs_result,
                                                should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_list_insert`.
    pub fn fold_list_insert(list: PwQPolynomialFoldList, pos: u32, el: PwQPolynomialFold)
                            -> PwQPolynomialFoldList {
        let mut list = list;
        list.do_not_free_on_drop();
        let list = list.ptr;
        let mut el = el;
        el.do_not_free_on_drop();
        let el = el.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_list_insert(list, pos, el) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = PwQPolynomialFoldList { ptr: isl_rs_result,
                                                    should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_subtract_domain`.
    pub fn subtract_domain(self, set: Set) -> PwQPolynomial {
        let context_for_error_message = self.get_ctx();
        let pwpq = self;
        let mut pwpq = pwpq;
        pwpq.do_not_free_on_drop();
        let pwpq = pwpq.ptr;
        let mut set = set;
        set.do_not_free_on_drop();
        let set = set.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_subtract_domain(pwpq, set) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwQPolynomial { ptr: isl_rs_result,
                                            should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_pow`.
    pub fn pow(self, exponent: u32) -> PwQPolynomial {
        let context_for_error_message = self.get_ctx();
        let pwqp = self;
        let mut pwqp = pwqp;
        pwqp.do_not_free_on_drop();
        let pwqp = pwqp.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_pow(pwqp, exponent) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwQPolynomial { ptr: isl_rs_result,
                                            should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_from_range`.
    pub fn from_range(self) -> PwQPolynomial {
        let context_for_error_message = self.get_ctx();
        let pwqp = self;
        let mut pwqp = pwqp;
        pwqp.do_not_free_on_drop();
        let pwqp = pwqp.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_from_range(pwqp) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwQPolynomial { ptr: isl_rs_result,
                                            should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_get_ctx`.
    pub fn get_ctx(&self) -> Context {
        let pwqp = self;
        let pwqp = pwqp.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_get_ctx(pwqp) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = Context { ptr: isl_rs_result,
                                      should_free_on_drop: true };
        let mut isl_rs_result = isl_rs_result;
        isl_rs_result.do_not_free_on_drop();
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_intersect_domain_wrapped_domain`.
    pub fn intersect_domain_wrapped_domain(self, set: Set) -> PwQPolynomial {
        let context_for_error_message = self.get_ctx();
        let pwpq = self;
        let mut pwpq = pwpq;
        pwpq.do_not_free_on_drop();
        let pwpq = pwpq.ptr;
        let mut set = set;
        set.do_not_free_on_drop();
        let set = set.ptr;
        let isl_rs_result =
            unsafe { isl_pw_qpolynomial_intersect_domain_wrapped_domain(pwpq, set) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwQPolynomial { ptr: isl_rs_result,
                                            should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_dump`.
    pub fn fold_dump(pwf: &PwQPolynomialFold) {
        let pwf = pwf.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_dump(pwf) };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_max`.
    pub fn max(self) -> Val {
        let context_for_error_message = self.get_ctx();
        let pwqp = self;
        let mut pwqp = pwqp;
        pwqp.do_not_free_on_drop();
        let pwqp = pwqp.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_max(pwqp) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Val { ptr: isl_rs_result,
                                  should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_copy`.
    pub fn fold_copy(pwf: &PwQPolynomialFold) -> PwQPolynomialFold {
        let pwf = pwf.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_copy(pwf) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = PwQPolynomialFold { ptr: isl_rs_result,
                                                should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_add_dims`.
    pub fn add_dims(self, type_: DimType, n: u32) -> PwQPolynomial {
        let context_for_error_message = self.get_ctx();
        let pwqp = self;
        let mut pwqp = pwqp;
        pwqp.do_not_free_on_drop();
        let pwqp = pwqp.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_add_dims(pwqp, type_, n) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwQPolynomial { ptr: isl_rs_result,
                                            should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_add`.
    pub fn fold_add(pwf1: PwQPolynomialFold, pwf2: PwQPolynomialFold) -> PwQPolynomialFold {
        let mut pwf1 = pwf1;
        pwf1.do_not_free_on_drop();
        let pwf1 = pwf1.ptr;
        let mut pwf2 = pwf2;
        pwf2.do_not_free_on_drop();
        let pwf2 = pwf2.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_add(pwf1, pwf2) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = PwQPolynomialFold { ptr: isl_rs_result,
                                                should_free_on_drop: true };
        isl_rs_result
    }

    /// Does not call isl_xxx_free() on being dropped. (For internal use only.)
    pub fn do_not_free_on_drop(&mut self) {
        self.should_free_on_drop = false;
    }
}

impl Drop for PwQPolynomial {
    fn drop(&mut self) {
        if self.should_free_on_drop {
            unsafe {
                isl_pw_qpolynomial_free(self.ptr);
            }
        }
    }
}
