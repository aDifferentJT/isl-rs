// Automatically generated by isl_bindings_generator.
// LICENSE: MIT

use libc::uintptr_t;
use std::os::raw::{c_char, c_void};
use crate::bindings::{DimType, Stat, Fold, Context, PwQPolynomialFoldList, Space, Val, Point, Id, Set, QPolynomialFold, PwQPolynomial, UnionPwQPolynomialFold};
use std::ffi::{CString, CStr};

/// Wraps `isl_pw_qpolynomial_fold`.
pub struct PwQPolynomialFold {
    pub ptr: uintptr_t,
    pub should_free_on_drop: bool,
}

extern "C" {

    fn isl_pw_qpolynomial_fold_read_from_str(ctx: uintptr_t, str_: *const c_char) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_to_list(el: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_involves_nan(pwf: uintptr_t) -> i32;

    fn isl_pw_qpolynomial_fold_get_domain_space(pwf: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_copy(pwf: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_eval(pwf: uintptr_t, pnt: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_free(pwf: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_has_equal_space(pwf1: uintptr_t, pwf2: uintptr_t) -> i32;

    fn isl_pw_qpolynomial_fold_from_range(pwf: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_involves_param_id(pwf: uintptr_t, id: uintptr_t) -> i32;

    fn isl_pw_qpolynomial_fold_move_dims(pwf: uintptr_t, dst_type: DimType, dst_pos: u32, src_type: DimType, src_pos: u32, n: u32) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_intersect_params(pwf: uintptr_t, set: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_add(pwf1: uintptr_t, pwf2: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_scale_down_val(pwf: uintptr_t, v: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_n_piece(pwf: uintptr_t) -> i32;

    fn isl_pw_qpolynomial_fold_foreach_lifted_piece(pwf: uintptr_t, fn_: unsafe extern "C" fn(uintptr_t, uintptr_t, *mut c_void) -> Stat, user: *mut c_void) -> Stat;

    fn isl_pw_qpolynomial_fold_reset_user(pwf: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_coalesce(pwf: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_gist_params(pwf: uintptr_t, context: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_max(pwf: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_size(pwf: uintptr_t) -> u64;

    fn isl_pw_qpolynomial_fold_find_dim_by_name(pwf: uintptr_t, type_: DimType, name: *const c_char) -> i32;

    fn isl_pw_qpolynomial_fold_gist(pwf: uintptr_t, context: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_add_disjoint(pwf1: uintptr_t, pwf2: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_from_qpolynomial_fold(fold: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_get_space(pwf: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_get_type(pwf: uintptr_t) -> Fold;

    fn isl_pw_qpolynomial_fold_alloc(type_: Fold, set: uintptr_t, fold: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_is_zero(pwf: uintptr_t) -> i32;

    fn isl_pw_qpolynomial_fold_fix_val(pwf: uintptr_t, type_: DimType, n: u32, v: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_get_ctx(pwf: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_reset_space(pwf: uintptr_t, space: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_set_dim_name(pwf: uintptr_t, type_: DimType, pos: u32, s: *const c_char) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_scale_val(pwf: uintptr_t, v: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_intersect_domain_wrapped_domain(pwf: uintptr_t, set: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_drop_dims(pwf: uintptr_t, type_: DimType, first: u32, n: u32) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_drop_unused_params(pwf: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_foreach_piece(pwf: uintptr_t, fn_: unsafe extern "C" fn(uintptr_t, uintptr_t, *mut c_void) -> Stat, user: *mut c_void) -> Stat;

    fn isl_pw_qpolynomial_fold_plain_is_equal(pwf1: uintptr_t, pwf2: uintptr_t) -> i32;

    fn isl_pw_qpolynomial_fold_every_piece(pwf: uintptr_t, test: unsafe extern "C" fn(uintptr_t, uintptr_t, *mut c_void) -> i32, user: *mut c_void) -> i32;

    fn isl_pw_qpolynomial_fold_isa_qpolynomial_fold(pwf: uintptr_t) -> i32;

    fn isl_pw_qpolynomial_fold_fold(pwf1: uintptr_t, pwf2: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_project_domain_on_params(pwf: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_dim(pwf: uintptr_t, type_: DimType) -> i32;

    fn isl_pw_qpolynomial_fold_as_qpolynomial_fold(pwf: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_subtract_domain(pwf: uintptr_t, set: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_intersect_domain_wrapped_range(pwf: uintptr_t, set: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_from_pw_qpolynomial(type_: Fold, pwqp: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_zero(space: uintptr_t, type_: Fold) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_intersect_domain(pwf: uintptr_t, set: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_domain(pwf: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_dump(pwf: uintptr_t);

    fn isl_pw_qpolynomial_fold_min(pwf: uintptr_t) -> uintptr_t;

    fn isl_pw_qpolynomial_fold_to_union_pw_qpolynomial_fold(pwf: uintptr_t) -> uintptr_t;

}

impl Clone for PwQPolynomialFold {
    fn clone(&self) -> PwQPolynomialFold {
        self.copy()
    }
}

impl core::ops::Add for PwQPolynomialFold {
    type Output = PwQPolynomialFold;

    fn add(self, rhs: PwQPolynomialFold) -> PwQPolynomialFold {
        self.add(rhs)
    }
}

impl PwQPolynomialFold {
    /// Wraps `isl_pw_qpolynomial_fold_read_from_str`.
    pub fn read_from_str(ctx: &Context, str_: &str) -> PwQPolynomialFold {
        let ctx = ctx.ptr;
        let str_ = CString::new(str_).unwrap();
        let str_ = str_.as_ptr();
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_read_from_str(ctx, str_) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = PwQPolynomialFold { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_to_list`.
    pub fn to_list(self) -> PwQPolynomialFoldList {
        let context_for_error_message = self.get_ctx();
        let el = self;
        let mut el = el;
        el.do_not_free_on_drop();
        let el = el.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_to_list(el) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwQPolynomialFoldList { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_involves_nan`.
    pub fn involves_nan(&self) -> bool {
        let context_for_error_message = self.get_ctx();
        let pwf = self;
        let pwf = pwf.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_involves_nan(pwf) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error: {}", context_for_error_message.last_error_msg()),
        };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_get_domain_space`.
    pub fn get_domain_space(&self) -> Space {
        let context_for_error_message = self.get_ctx();
        let pwf = self;
        let pwf = pwf.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_get_domain_space(pwf) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Space { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_copy`.
    pub fn copy(&self) -> PwQPolynomialFold {
        let context_for_error_message = self.get_ctx();
        let pwf = self;
        let pwf = pwf.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_copy(pwf) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwQPolynomialFold { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_eval`.
    pub fn eval(self, pnt: Point) -> Val {
        let context_for_error_message = self.get_ctx();
        let pwf = self;
        let mut pwf = pwf;
        pwf.do_not_free_on_drop();
        let pwf = pwf.ptr;
        let mut pnt = pnt;
        pnt.do_not_free_on_drop();
        let pnt = pnt.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_eval(pwf, pnt) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Val { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_free`.
    pub fn free(self) -> PwQPolynomialFold {
        let context_for_error_message = self.get_ctx();
        let pwf = self;
        let mut pwf = pwf;
        pwf.do_not_free_on_drop();
        let pwf = pwf.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_free(pwf) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwQPolynomialFold { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_has_equal_space`.
    pub fn has_equal_space(&self, pwf2: &PwQPolynomialFold) -> bool {
        let context_for_error_message = self.get_ctx();
        let pwf1 = self;
        let pwf1 = pwf1.ptr;
        let pwf2 = pwf2.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_has_equal_space(pwf1, pwf2) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error: {}", context_for_error_message.last_error_msg()),
        };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_from_range`.
    pub fn from_range(self) -> PwQPolynomialFold {
        let context_for_error_message = self.get_ctx();
        let pwf = self;
        let mut pwf = pwf;
        pwf.do_not_free_on_drop();
        let pwf = pwf.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_from_range(pwf) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwQPolynomialFold { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_involves_param_id`.
    pub fn involves_param_id(&self, id: &Id) -> bool {
        let context_for_error_message = self.get_ctx();
        let pwf = self;
        let pwf = pwf.ptr;
        let id = id.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_involves_param_id(pwf, id) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error: {}", context_for_error_message.last_error_msg()),
        };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_move_dims`.
    pub fn move_dims(self, dst_type: DimType, dst_pos: u32, src_type: DimType, src_pos: u32, n: u32) -> PwQPolynomialFold {
        let context_for_error_message = self.get_ctx();
        let pwf = self;
        let mut pwf = pwf;
        pwf.do_not_free_on_drop();
        let pwf = pwf.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_move_dims(pwf, dst_type, dst_pos, src_type, src_pos, n) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwQPolynomialFold { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_intersect_params`.
    pub fn intersect_params(self, set: Set) -> PwQPolynomialFold {
        let context_for_error_message = self.get_ctx();
        let pwf = self;
        let mut pwf = pwf;
        pwf.do_not_free_on_drop();
        let pwf = pwf.ptr;
        let mut set = set;
        set.do_not_free_on_drop();
        let set = set.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_intersect_params(pwf, set) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwQPolynomialFold { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_add`.
    pub fn add(self, pwf2: PwQPolynomialFold) -> PwQPolynomialFold {
        let context_for_error_message = self.get_ctx();
        let pwf1 = self;
        let mut pwf1 = pwf1;
        pwf1.do_not_free_on_drop();
        let pwf1 = pwf1.ptr;
        let mut pwf2 = pwf2;
        pwf2.do_not_free_on_drop();
        let pwf2 = pwf2.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_add(pwf1, pwf2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwQPolynomialFold { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_scale_down_val`.
    pub fn scale_down_val(self, v: Val) -> PwQPolynomialFold {
        let context_for_error_message = self.get_ctx();
        let pwf = self;
        let mut pwf = pwf;
        pwf.do_not_free_on_drop();
        let pwf = pwf.ptr;
        let mut v = v;
        v.do_not_free_on_drop();
        let v = v.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_scale_down_val(pwf, v) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwQPolynomialFold { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_n_piece`.
    pub fn n_piece(&self) -> i32 {
        let pwf = self;
        let pwf = pwf.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_n_piece(pwf) };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_foreach_lifted_piece`.
    pub fn foreach_lifted_piece<fn_>(&self, mut fn_: fn_, user: *mut c_void) -> Stat
    where fn_: FnMut(&Set, &QPolynomialFold) -> Stat,
    {
        let context_for_error_message = self.get_ctx();
        let pwf = self;
        let pwf = pwf.ptr;
        extern "C" fn fn__wrapper<fn_>(arg_0: uintptr_t, arg_1: uintptr_t, arg_2: *mut c_void) -> Stat {
            let fn_: *mut fn_ = unsafe { core::mem::transmute(arg_2) };
            let fn_: &mut fn_ = unsafe { &mut *fn_ };
            todo!()
        }

        let user: *mut fn_ = &mut fn_;
        let user: *mut c_void = unsafe { core::mem::transmute(user) };
        let fn_ = fn__wrapper::<fn_>;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_foreach_lifted_piece(pwf, fn_, user) };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_reset_user`.
    pub fn reset_user(self) -> PwQPolynomialFold {
        let context_for_error_message = self.get_ctx();
        let pwf = self;
        let mut pwf = pwf;
        pwf.do_not_free_on_drop();
        let pwf = pwf.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_reset_user(pwf) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwQPolynomialFold { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_coalesce`.
    pub fn coalesce(self) -> PwQPolynomialFold {
        let context_for_error_message = self.get_ctx();
        let pwf = self;
        let mut pwf = pwf;
        pwf.do_not_free_on_drop();
        let pwf = pwf.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_coalesce(pwf) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwQPolynomialFold { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_gist_params`.
    pub fn gist_params(self, context: Set) -> PwQPolynomialFold {
        let context_for_error_message = self.get_ctx();
        let pwf = self;
        let mut pwf = pwf;
        pwf.do_not_free_on_drop();
        let pwf = pwf.ptr;
        let mut context = context;
        context.do_not_free_on_drop();
        let context = context.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_gist_params(pwf, context) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwQPolynomialFold { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_max`.
    pub fn max(self) -> Val {
        let context_for_error_message = self.get_ctx();
        let pwf = self;
        let mut pwf = pwf;
        pwf.do_not_free_on_drop();
        let pwf = pwf.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_max(pwf) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Val { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_size`.
    pub fn size(&self) -> u64 {
        let pwf = self;
        let pwf = pwf.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_size(pwf) };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_find_dim_by_name`.
    pub fn find_dim_by_name(&self, type_: DimType, name: &str) -> i32 {
        let pwf = self;
        let pwf = pwf.ptr;
        let name = CString::new(name).unwrap();
        let name = name.as_ptr();
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_find_dim_by_name(pwf, type_, name) };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_gist`.
    pub fn gist(self, context: Set) -> PwQPolynomialFold {
        let context_for_error_message = self.get_ctx();
        let pwf = self;
        let mut pwf = pwf;
        pwf.do_not_free_on_drop();
        let pwf = pwf.ptr;
        let mut context = context;
        context.do_not_free_on_drop();
        let context = context.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_gist(pwf, context) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwQPolynomialFold { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_add_disjoint`.
    pub fn add_disjoint(self, pwf2: PwQPolynomialFold) -> PwQPolynomialFold {
        let context_for_error_message = self.get_ctx();
        let pwf1 = self;
        let mut pwf1 = pwf1;
        pwf1.do_not_free_on_drop();
        let pwf1 = pwf1.ptr;
        let mut pwf2 = pwf2;
        pwf2.do_not_free_on_drop();
        let pwf2 = pwf2.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_add_disjoint(pwf1, pwf2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwQPolynomialFold { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_from_qpolynomial_fold`.
    pub fn from_qpolynomial_fold(fold: QPolynomialFold) -> PwQPolynomialFold {
        let mut fold = fold;
        fold.do_not_free_on_drop();
        let fold = fold.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_from_qpolynomial_fold(fold) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = PwQPolynomialFold { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_get_space`.
    pub fn get_space(&self) -> Space {
        let context_for_error_message = self.get_ctx();
        let pwf = self;
        let pwf = pwf.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_get_space(pwf) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Space { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_get_type`.
    pub fn get_type(&self) -> Fold {
        let context_for_error_message = self.get_ctx();
        let pwf = self;
        let pwf = pwf.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_get_type(pwf) };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_alloc`.
    pub fn alloc(type_: Fold, set: Set, fold: QPolynomialFold) -> PwQPolynomialFold {
        let mut set = set;
        set.do_not_free_on_drop();
        let set = set.ptr;
        let mut fold = fold;
        fold.do_not_free_on_drop();
        let fold = fold.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_alloc(type_, set, fold) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = PwQPolynomialFold { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_is_zero`.
    pub fn is_zero(&self) -> bool {
        let context_for_error_message = self.get_ctx();
        let pwf = self;
        let pwf = pwf.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_is_zero(pwf) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error: {}", context_for_error_message.last_error_msg()),
        };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_fix_val`.
    pub fn fix_val(self, type_: DimType, n: u32, v: Val) -> PwQPolynomialFold {
        let context_for_error_message = self.get_ctx();
        let pwf = self;
        let mut pwf = pwf;
        pwf.do_not_free_on_drop();
        let pwf = pwf.ptr;
        let mut v = v;
        v.do_not_free_on_drop();
        let v = v.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_fix_val(pwf, type_, n, v) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwQPolynomialFold { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_get_ctx`.
    pub fn get_ctx(&self) -> Context {
        let pwf = self;
        let pwf = pwf.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_get_ctx(pwf) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = Context { ptr: isl_rs_result, should_free_on_drop: true };
        let mut isl_rs_result = isl_rs_result;
        isl_rs_result.do_not_free_on_drop();
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_reset_space`.
    pub fn reset_space(self, space: Space) -> PwQPolynomialFold {
        let context_for_error_message = self.get_ctx();
        let pwf = self;
        let mut pwf = pwf;
        pwf.do_not_free_on_drop();
        let pwf = pwf.ptr;
        let mut space = space;
        space.do_not_free_on_drop();
        let space = space.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_reset_space(pwf, space) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwQPolynomialFold { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_set_dim_name`.
    pub fn set_dim_name(self, type_: DimType, pos: u32, s: &str) -> PwQPolynomialFold {
        let context_for_error_message = self.get_ctx();
        let pwf = self;
        let mut pwf = pwf;
        pwf.do_not_free_on_drop();
        let pwf = pwf.ptr;
        let s = CString::new(s).unwrap();
        let s = s.as_ptr();
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_set_dim_name(pwf, type_, pos, s) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwQPolynomialFold { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_scale_val`.
    pub fn scale_val(self, v: Val) -> PwQPolynomialFold {
        let context_for_error_message = self.get_ctx();
        let pwf = self;
        let mut pwf = pwf;
        pwf.do_not_free_on_drop();
        let pwf = pwf.ptr;
        let mut v = v;
        v.do_not_free_on_drop();
        let v = v.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_scale_val(pwf, v) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwQPolynomialFold { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_intersect_domain_wrapped_domain`.
    pub fn intersect_domain_wrapped_domain(self, set: Set) -> PwQPolynomialFold {
        let context_for_error_message = self.get_ctx();
        let pwf = self;
        let mut pwf = pwf;
        pwf.do_not_free_on_drop();
        let pwf = pwf.ptr;
        let mut set = set;
        set.do_not_free_on_drop();
        let set = set.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_intersect_domain_wrapped_domain(pwf, set) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwQPolynomialFold { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_drop_dims`.
    pub fn drop_dims(self, type_: DimType, first: u32, n: u32) -> PwQPolynomialFold {
        let context_for_error_message = self.get_ctx();
        let pwf = self;
        let mut pwf = pwf;
        pwf.do_not_free_on_drop();
        let pwf = pwf.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_drop_dims(pwf, type_, first, n) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwQPolynomialFold { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_drop_unused_params`.
    pub fn drop_unused_params(self) -> PwQPolynomialFold {
        let context_for_error_message = self.get_ctx();
        let pwf = self;
        let mut pwf = pwf;
        pwf.do_not_free_on_drop();
        let pwf = pwf.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_drop_unused_params(pwf) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwQPolynomialFold { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_foreach_piece`.
    pub fn foreach_piece<fn_>(&self, mut fn_: fn_, user: *mut c_void) -> Stat
    where fn_: FnMut(&Set, &QPolynomialFold) -> Stat,
    {
        let context_for_error_message = self.get_ctx();
        let pwf = self;
        let pwf = pwf.ptr;
        extern "C" fn fn__wrapper<fn_>(arg_0: uintptr_t, arg_1: uintptr_t, arg_2: *mut c_void) -> Stat {
            let fn_: *mut fn_ = unsafe { core::mem::transmute(arg_2) };
            let fn_: &mut fn_ = unsafe { &mut *fn_ };
            todo!()
        }

        let user: *mut fn_ = &mut fn_;
        let user: *mut c_void = unsafe { core::mem::transmute(user) };
        let fn_ = fn__wrapper::<fn_>;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_foreach_piece(pwf, fn_, user) };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_plain_is_equal`.
    pub fn plain_is_equal(&self, pwf2: &PwQPolynomialFold) -> bool {
        let context_for_error_message = self.get_ctx();
        let pwf1 = self;
        let pwf1 = pwf1.ptr;
        let pwf2 = pwf2.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_plain_is_equal(pwf1, pwf2) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error: {}", context_for_error_message.last_error_msg()),
        };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_every_piece`.
    pub fn every_piece<test>(&self, mut test: test, user: *mut c_void) -> bool
    where test: FnMut(&Set, &QPolynomialFold) -> bool,
    {
        let context_for_error_message = self.get_ctx();
        let pwf = self;
        let pwf = pwf.ptr;
        extern "C" fn test_wrapper<test>(arg_0: uintptr_t, arg_1: uintptr_t, arg_2: *mut c_void) -> i32 {
            let test: *mut test = unsafe { core::mem::transmute(arg_2) };
            let test: &mut test = unsafe { &mut *test };
            todo!()
        }

        let test_user: *mut test = &mut test;
        let test_user: *mut c_void = unsafe { core::mem::transmute(test_user) };
        let test = test_wrapper::<test>;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_every_piece(pwf, test, user) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error: {}", context_for_error_message.last_error_msg()),
        };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_isa_qpolynomial_fold`.
    pub fn isa_qpolynomial_fold(&self) -> bool {
        let context_for_error_message = self.get_ctx();
        let pwf = self;
        let pwf = pwf.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_isa_qpolynomial_fold(pwf) };
        let isl_rs_result = match isl_rs_result {
            0 => false,
            1 => true,
            _ => panic!("ISL error: {}", context_for_error_message.last_error_msg()),
        };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_fold`.
    pub fn fold(self, pwf2: PwQPolynomialFold) -> PwQPolynomialFold {
        let context_for_error_message = self.get_ctx();
        let pwf1 = self;
        let mut pwf1 = pwf1;
        pwf1.do_not_free_on_drop();
        let pwf1 = pwf1.ptr;
        let mut pwf2 = pwf2;
        pwf2.do_not_free_on_drop();
        let pwf2 = pwf2.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_fold(pwf1, pwf2) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwQPolynomialFold { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_project_domain_on_params`.
    pub fn project_domain_on_params(self) -> PwQPolynomialFold {
        let context_for_error_message = self.get_ctx();
        let pwf = self;
        let mut pwf = pwf;
        pwf.do_not_free_on_drop();
        let pwf = pwf.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_project_domain_on_params(pwf) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwQPolynomialFold { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_dim`.
    pub fn dim(&self, type_: DimType) -> i32 {
        let pwf = self;
        let pwf = pwf.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_dim(pwf, type_) };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_as_qpolynomial_fold`.
    pub fn as_qpolynomial_fold(self) -> QPolynomialFold {
        let context_for_error_message = self.get_ctx();
        let pwf = self;
        let mut pwf = pwf;
        pwf.do_not_free_on_drop();
        let pwf = pwf.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_as_qpolynomial_fold(pwf) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = QPolynomialFold { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_subtract_domain`.
    pub fn subtract_domain(self, set: Set) -> PwQPolynomialFold {
        let context_for_error_message = self.get_ctx();
        let pwf = self;
        let mut pwf = pwf;
        pwf.do_not_free_on_drop();
        let pwf = pwf.ptr;
        let mut set = set;
        set.do_not_free_on_drop();
        let set = set.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_subtract_domain(pwf, set) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwQPolynomialFold { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_intersect_domain_wrapped_range`.
    pub fn intersect_domain_wrapped_range(self, set: Set) -> PwQPolynomialFold {
        let context_for_error_message = self.get_ctx();
        let pwf = self;
        let mut pwf = pwf;
        pwf.do_not_free_on_drop();
        let pwf = pwf.ptr;
        let mut set = set;
        set.do_not_free_on_drop();
        let set = set.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_intersect_domain_wrapped_range(pwf, set) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwQPolynomialFold { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_from_pw_qpolynomial`.
    pub fn from_pw_qpolynomial(type_: Fold, pwqp: PwQPolynomial) -> PwQPolynomialFold {
        let mut pwqp = pwqp;
        pwqp.do_not_free_on_drop();
        let pwqp = pwqp.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_from_pw_qpolynomial(type_, pwqp) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = PwQPolynomialFold { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_zero`.
    pub fn zero(space: Space, type_: Fold) -> PwQPolynomialFold {
        let mut space = space;
        space.do_not_free_on_drop();
        let space = space.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_zero(space, type_) };
        if isl_rs_result == 0 {
            panic!("ISL error");
        }
        let isl_rs_result = PwQPolynomialFold { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_intersect_domain`.
    pub fn intersect_domain(self, set: Set) -> PwQPolynomialFold {
        let context_for_error_message = self.get_ctx();
        let pwf = self;
        let mut pwf = pwf;
        pwf.do_not_free_on_drop();
        let pwf = pwf.ptr;
        let mut set = set;
        set.do_not_free_on_drop();
        let set = set.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_intersect_domain(pwf, set) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = PwQPolynomialFold { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_domain`.
    pub fn domain(self) -> Set {
        let context_for_error_message = self.get_ctx();
        let pwf = self;
        let mut pwf = pwf;
        pwf.do_not_free_on_drop();
        let pwf = pwf.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_domain(pwf) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Set { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_dump`.
    pub fn dump(&self) {
        let pwf = self;
        let pwf = pwf.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_dump(pwf) };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_min`.
    pub fn min(self) -> Val {
        let context_for_error_message = self.get_ctx();
        let pwf = self;
        let mut pwf = pwf;
        pwf.do_not_free_on_drop();
        let pwf = pwf.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_min(pwf) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = Val { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Wraps `isl_pw_qpolynomial_fold_to_union_pw_qpolynomial_fold`.
    pub fn to_union_pw_qpolynomial_fold(self) -> UnionPwQPolynomialFold {
        let context_for_error_message = self.get_ctx();
        let pwf = self;
        let mut pwf = pwf;
        pwf.do_not_free_on_drop();
        let pwf = pwf.ptr;
        let isl_rs_result = unsafe { isl_pw_qpolynomial_fold_to_union_pw_qpolynomial_fold(pwf) };
        if isl_rs_result == 0 {
            panic!("ISL error: {}", context_for_error_message.last_error_msg());
        }
        let isl_rs_result = UnionPwQPolynomialFold { ptr: isl_rs_result, should_free_on_drop: true };
        isl_rs_result
    }

    /// Does not call isl_xxx_free() on being dropped. (For internal use only.)
    pub fn do_not_free_on_drop(&mut self) {
        self.should_free_on_drop = false;
    }
}

impl Drop for PwQPolynomialFold {
    fn drop(&mut self) {
        if self.should_free_on_drop {
            unsafe { isl_pw_qpolynomial_fold_free(self.ptr); }
        }
    }
}